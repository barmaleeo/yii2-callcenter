!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=13)}([function(e,t,n){"use strict";e.exports=n(4)},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(5)},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var i=Object.getOwnPropertySymbols,r=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var i={};return"abcdefghijklmnopqrst".split("").forEach(function(e){i[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},i)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,o,a=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),u=1;u<arguments.length;u++){for(var l in n=Object(arguments[u]))r.call(n,l)&&(a[l]=n[l]);if(i){o=i(n);for(var c=0;c<o.length;c++)s.call(n,o[c])&&(a[o[c]]=n[o[c]])}}return a}},function(e,t,n){
/*!
 * 
 *  SIP version 0.11.6
 *  Copyright (c) 2014-2018 Junction Networks, Inc <http://www.onsip.com>
 *  Homepage: https://sipjs.com
 *  License: https://sipjs.com/license/
 * 
 * 
 *  ~~~SIP.js contains substantial portions of JsSIP under the following license~~~
 *  Homepage: http://jssip.net
 *  Copyright (c) 2012-2013 José Luis Millán - Versatica <http://www.versatica.com>
 * 
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 * 
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 * 
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 *  ~~~ end JsSIP license ~~~
 * 
 * 
 * 
 * 
 */
!function(t,n){e.exports=n()}(0,function(){return function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";e.exports=n(1)(n(40))},function(e,t,n){"use strict";e.exports=function(e){var t=n(2),i=t.version,r=t.title,s=Object.defineProperties({},{version:{get:function(){return i}},name:{get:function(){return r}}});return n(3)(s,e),s.LoggerFactory=n(4)(e.console),s.EventEmitter=n(5)(),s.C=n(7)(s.name,s.version),s.Exceptions=n(8),s.Timers=n(9)(e.timers),s.Transport=n(10)(s),n(11)(s),n(12)(s),n(13)(s),n(14)(s),n(15)(s),n(16)(s),n(18)(s),n(19)(s),s.SessionDescriptionHandler=n(20)(s.EventEmitter),n(21)(s),n(22)(s),n(23)(s),n(25)(s),n(26)(s),n(27)(s,e),n(32)(s),s.DigestAuthentication=n(33)(s.Utils),s.Grammar=n(36)(s),s.Web={Modifiers:n(38)(s),Simple:n(39)(s)},s}},function(e){e.exports={name:"sip.js",title:"SIP.js",description:"A simple, intuitive, and powerful JavaScript signaling library",version:"0.11.6",main:"dist/sip.js",browser:{"./src/environment.js":"./src/environment_browser.js"},homepage:"https://sipjs.com",author:"OnSIP <developer@onsip.com> (https://sipjs.com/aboutus/)",contributors:[{url:"https://github.com/onsip/SIP.js/blob/master/THANKS.md"}],repository:{type:"git",url:"https://github.com/onsip/SIP.js.git"},keywords:["sip","websocket","webrtc","library","javascript"],devDependencies:{"awesome-typescript-loader":"^5.2.1",eslint:"^5.4.0","jasmine-core":"^3.2.1",karma:"^3.0.0","karma-chrome-launcher":"^2.2.0","karma-cli":"^1.0.1","karma-jasmine":"^1.1.0","karma-jasmine-html-reporter":"^1.3.1","karma-mocha-reporter":"^2.2.5","karma-webpack":"^3.0.0",pegjs:"^0.10.0","pegjs-loader":"^0.5.4",typescript:"^3.0.3",webpack:"^4.19.0","webpack-cli":"^3.0.8"},engines:{node:">=6.0"},license:"MIT",scripts:{prebuild:"eslint src/*.js src/**/*.js","build-dev":"webpack --progress --env.buildType dev","build-prod":"webpack --progress --env.buildType prod","copy-dist-files":"cp dist/sip.js dist/sip-$npm_package_version.js && cp dist/sip.min.js  dist/sip-$npm_package_version.min.js",build:"npm run build-dev && npm run build-prod && npm run copy-dist-files",browserTest:"sleep 2 && open http://0.0.0.0:9876/debug.html & karma start --reporters kjhtml --no-single-run",commandLineTest:"karma start --reporters mocha --browsers ChromeHeadless --single-run",buildAndTest:"npm run build && npm run commandLineTest",buildAndBrowserTest:"npm run build && npm run browserTest"},dependencies:{"crypto-js":"^3.1.9-1"},optionalDependencies:{promiscuous:"^0.6.0"}}},function(e,t,n){"use strict";e.exports=function(e,t){var n;n={Promise:t.Promise,defer:function(){var e={};return e.promise=new n.Promise(function(t,n){e.resolve=t,e.reject=n}),e},reducePromises:function(t,n){return t.reduce(function(e,t){return e=e.then(t)},e.Utils.Promise.resolve(n))},augment:function(e,t,n,i){var r,s;for(r in s=t.prototype)(i||void 0===e[r])&&(e[r]=s[r]);t.apply(e,n)},defaultOptions:function(e,t){return e=e||{},t=t||{},Object.assign({},e,t)},optionsOverride:function(e,t,n,i,r,s){i&&e[n]&&r.warn(n+" is deprecated, please use "+t+" instead"),e[t]&&e[n]&&r.warn(t+" overriding "+n),e[t]=e[t]||e[n]||s},str_utf8_length:function(e){return encodeURIComponent(e).replace(/%[A-F\d]{2}/g,"U").length},generateFakeSDP:function(e){if(e){var t=e.indexOf("o="),n=e.indexOf("\r\n",t);return"v=0\r\n"+e.slice(t,n)+"\r\ns=-\r\nt=0 0\r\nc=IN IP4 0.0.0.0"}},isFunction:function(e){return void 0!==e&&"[object Function]"===Object.prototype.toString.call(e)},isDecimal:function(e){return!isNaN(e)&&parseFloat(e)===parseInt(e,10)},createRandomToken:function(e,t){var n,i="";for(t=t||32,n=0;n<e;n++)i+=(Math.random()*t|0).toString(t);return i},newTag:function(){return e.Utils.createRandomToken(e.UA.C.TAG_LENGTH)},newUUID:function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)})},hostType:function(t){if(t)return-1!==(t=e.Grammar.parse(t,"host"))?t.host_type:void 0},normalizeTarget:function(t,n){var i,r,s;if(t){if(t instanceof e.URI)return t;if("string"==typeof t){switch((i=t.split("@")).length){case 1:if(!n)return;r=t,s=n;break;case 2:r=i[0],s=i[1];break;default:r=i.slice(0,i.length-1).join("@"),s=i[i.length-1]}return r=r.replace(/^(sips?|tel):/i,""),/^[\-\.\(\)]*\+?[0-9\-\.\(\)]+$/.test(r)&&(r=r.replace(/[\-\.\(\)]/g,"")),t=e.C.SIP+":"+e.Utils.escapeUser(r)+"@"+s,e.URI.parse(t)}}else;},escapeUser:function(e){return encodeURIComponent(decodeURIComponent(e)).replace(/%3A/gi,":").replace(/%2B/gi,"+").replace(/%3F/gi,"?").replace(/%2F/gi,"/")},headerize:function(e){var t,n={"Call-Id":"Call-ID",Cseq:"CSeq","Min-Se":"Min-SE",Rack:"RAck",Rseq:"RSeq","Www-Authenticate":"WWW-Authenticate"},i=e.toLowerCase().replace(/_/g,"-").split("-"),r="",s=i.length;for(t=0;t<s;t++)0!==t&&(r+="-"),r+=i[t].charAt(0).toUpperCase()+i[t].substring(1);return n[r]&&(r=n[r]),r},sipErrorCause:function(t){var n;for(n in e.C.SIP_ERROR_CAUSES)if(-1!==e.C.SIP_ERROR_CAUSES[n].indexOf(t))return e.C.causes[n];return e.C.causes.SIP_FAILURE_CODE},getReasonPhrase:function(t,n){return n||e.C.REASON_PHRASE[t]||""},getReasonHeaderValue:function(t,n){return"SIP;cause="+t+';text="'+(n=e.Utils.getReasonPhrase(t,n))+'"'},getCancelReason:function(t,n){if(t&&t<200||t>699)throw new TypeError("Invalid status_code: "+t);if(t)return e.Utils.getReasonHeaderValue(t,n)},buildStatusLine:function(e,t){if(e=e||null,t=t||null,!e||e<100||e>699)throw new TypeError("Invalid status_code: "+e);if(t&&"string"!=typeof t&&!(t instanceof String))throw new TypeError("Invalid reason_phrase: "+t);return"SIP/2.0 "+e+" "+(t=n.getReasonPhrase(e,t))+"\r\n"},getRandomTestNetIP:function(){return"192.0.2."+function(e,t){return Math.floor(Math.random()*(t-e+1)+e)}(1,254)}},e.Utils=n}},function(e,t,n){"use strict";var i={error:0,warn:1,log:2,debug:3};e.exports=function(e){var t=function(){var e,t=2,n=!0,r=null;this.loggers={},e=this.getLogger("sip.loggerfactory"),Object.defineProperties(this,{builtinEnabled:{get:function(){return n},set:function(t){"boolean"==typeof t?n=t:e.error('invalid "builtinEnabled" parameter value: '+JSON.stringify(t))}},level:{get:function(){return t},set:function(n){n>=0&&n<=3?t=n:n>3?t=3:i.hasOwnProperty(n)?t=i[n]:e.error('invalid "level" parameter value: '+JSON.stringify(n))}},connector:{get:function(){return r},set:function(t){null===t||""===t||void 0===t?r=null:"function"==typeof t?r=t:e.error('invalid "connector" parameter value: '+JSON.stringify(t))}}})};function n(e,t,n){this.logger=e,this.category=t,this.label=n}return t.prototype.print=function(t,n,i,r){if("string"==typeof r){var s=[new Date,n];i&&s.push(i),r=s.concat(r).join(" | ")}t.call(e,r)},Object.keys(i).forEach(function(r){n.prototype[r]=function(e){this.logger[r](this.category,this.label,e)},t.prototype[r]=function(t,n,s){this.level>=i[r]&&(this.builtinEnabled&&this.print(e[r],t,n,s),this.connector&&this.connector(r,t,n,s))}}),t.prototype.getLogger=function(e,t){var i;return t&&3===this.level?new n(this,e,t):this.loggers[e]?this.loggers[e]:(i=new n(this,e),this.loggers[e]=i,i)},t}},function(e,t,n){"use strict";var i=n(6).EventEmitter;e.exports=function(){function e(){i.call(this)}return e.prototype=Object.create(i.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),e}},function(e,t){function n(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function i(e){return"function"==typeof e}function r(e){return"object"==typeof e&&null!==e}function s(e){return void 0===e}e.exports=n,n.EventEmitter=n,n.prototype._events=void 0,n.prototype._maxListeners=void 0,n.defaultMaxListeners=10,n.prototype.setMaxListeners=function(e){if(!function(e){return"number"==typeof e}(e)||e<0||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},n.prototype.emit=function(e){var t,n,o,a,u,l;if(this._events||(this._events={}),"error"===e&&(!this._events.error||r(this._events.error)&&!this._events.error.length)){if((t=arguments[1])instanceof Error)throw t;var c=new Error('Uncaught, unspecified "error" event. ('+t+")");throw c.context=t,c}if(s(n=this._events[e]))return!1;if(i(n))switch(arguments.length){case 1:n.call(this);break;case 2:n.call(this,arguments[1]);break;case 3:n.call(this,arguments[1],arguments[2]);break;default:a=Array.prototype.slice.call(arguments,1),n.apply(this,a)}else if(r(n))for(a=Array.prototype.slice.call(arguments,1),o=(l=n.slice()).length,u=0;u<o;u++)l[u].apply(this,a);return!0},n.prototype.addListener=function(e,t){var o;if(!i(t))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,i(t.listener)?t.listener:t),this._events[e]?r(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,r(this._events[e])&&!this._events[e].warned&&(o=s(this._maxListeners)?n.defaultMaxListeners:this._maxListeners)&&o>0&&this._events[e].length>o&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),"function"==typeof console.trace&&console.trace()),this},n.prototype.on=n.prototype.addListener,n.prototype.once=function(e,t){if(!i(t))throw TypeError("listener must be a function");var n=!1;function r(){this.removeListener(e,r),n||(n=!0,t.apply(this,arguments))}return r.listener=t,this.on(e,r),this},n.prototype.removeListener=function(e,t){var n,s,o,a;if(!i(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(o=(n=this._events[e]).length,s=-1,n===t||i(n.listener)&&n.listener===t)delete this._events[e],this._events.removeListener&&this.emit("removeListener",e,t);else if(r(n)){for(a=o;a-- >0;)if(n[a]===t||n[a].listener&&n[a].listener===t){s=a;break}if(s<0)return this;1===n.length?(n.length=0,delete this._events[e]):n.splice(s,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},n.prototype.removeAllListeners=function(e){var t,n;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(i(n=this._events[e]))this.removeListener(e,n);else if(n)for(;n.length;)this.removeListener(e,n[n.length-1]);return delete this._events[e],this},n.prototype.listeners=function(e){return this._events&&this._events[e]?i(this._events[e])?[this._events[e]]:this._events[e].slice():[]},n.prototype.listenerCount=function(e){if(this._events){var t=this._events[e];if(i(t))return 1;if(t)return t.length}return 0},n.listenerCount=function(e,t){return e.listenerCount(t)}},function(e,t,n){"use strict";e.exports=function(e,t){return{USER_AGENT:e+"/"+t,SIP:"sip",SIPS:"sips",causes:{CONNECTION_ERROR:"Connection Error",REQUEST_TIMEOUT:"Request Timeout",SIP_FAILURE_CODE:"SIP Failure Code",INTERNAL_ERROR:"Internal Error",BUSY:"Busy",REJECTED:"Rejected",REDIRECTED:"Redirected",UNAVAILABLE:"Unavailable",NOT_FOUND:"Not Found",ADDRESS_INCOMPLETE:"Address Incomplete",INCOMPATIBLE_SDP:"Incompatible SDP",AUTHENTICATION_ERROR:"Authentication Error",DIALOG_ERROR:"Dialog Error",WEBRTC_NOT_SUPPORTED:"WebRTC Not Supported",WEBRTC_ERROR:"WebRTC Error",CANCELED:"Canceled",NO_ANSWER:"No Answer",EXPIRES:"Expires",NO_ACK:"No ACK",NO_PRACK:"No PRACK",USER_DENIED_MEDIA_ACCESS:"User Denied Media Access",BAD_MEDIA_DESCRIPTION:"Bad Media Description",RTP_TIMEOUT:"RTP Timeout"},supported:{UNSUPPORTED:"none",SUPPORTED:"supported",REQUIRED:"required"},SIP_ERROR_CAUSES:{REDIRECTED:[300,301,302,305,380],BUSY:[486,600],REJECTED:[403,603],NOT_FOUND:[404,604],UNAVAILABLE:[480,410,408,430],ADDRESS_INCOMPLETE:[484],INCOMPATIBLE_SDP:[488,606],AUTHENTICATION_ERROR:[401,407]},ACK:"ACK",BYE:"BYE",CANCEL:"CANCEL",INFO:"INFO",INVITE:"INVITE",MESSAGE:"MESSAGE",NOTIFY:"NOTIFY",OPTIONS:"OPTIONS",REGISTER:"REGISTER",UPDATE:"UPDATE",SUBSCRIBE:"SUBSCRIBE",PUBLISH:"PUBLISH",REFER:"REFER",PRACK:"PRACK",REASON_PHRASE:{100:"Trying",180:"Ringing",181:"Call Is Being Forwarded",182:"Queued",183:"Session Progress",199:"Early Dialog Terminated",200:"OK",202:"Accepted",204:"No Notification",300:"Multiple Choices",301:"Moved Permanently",302:"Moved Temporarily",305:"Use Proxy",380:"Alternative Service",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Timeout",410:"Gone",412:"Conditional Request Failed",413:"Request Entity Too Large",414:"Request-URI Too Long",415:"Unsupported Media Type",416:"Unsupported URI Scheme",417:"Unknown Resource-Priority",420:"Bad Extension",421:"Extension Required",422:"Session Interval Too Small",423:"Interval Too Brief",428:"Use Identity Header",429:"Provide Referrer Identity",430:"Flow Failed",433:"Anonymity Disallowed",436:"Bad Identity-Info",437:"Unsupported Certificate",438:"Invalid Identity Header",439:"First Hop Lacks Outbound Support",440:"Max-Breadth Exceeded",469:"Bad Info Package",470:"Consent Needed",478:"Unresolvable Destination",480:"Temporarily Unavailable",481:"Call/Transaction Does Not Exist",482:"Loop Detected",483:"Too Many Hops",484:"Address Incomplete",485:"Ambiguous",486:"Busy Here",487:"Request Terminated",488:"Not Acceptable Here",489:"Bad Event",491:"Request Pending",493:"Undecipherable",494:"Security Agreement Required",500:"Internal Server Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Server Time-out",505:"Version Not Supported",513:"Message Too Large",580:"Precondition Failure",600:"Busy Everywhere",603:"Decline",604:"Does Not Exist Anywhere",606:"Not Acceptable"},OPTION_TAGS:{"100rel":!0,199:!0,answermode:!0,"early-session":!0,eventlist:!0,explicitsub:!0,"from-change":!0,"geolocation-http":!0,"geolocation-sip":!0,gin:!0,gruu:!0,histinfo:!0,ice:!0,join:!0,"multiple-refer":!0,norefersub:!0,nosub:!0,outbound:!0,path:!0,policy:!0,precondition:!0,pref:!0,privacy:!0,"recipient-list-invite":!0,"recipient-list-message":!0,"recipient-list-subscribe":!0,replaces:!0,"resource-priority":!0,"sdp-anat":!0,"sec-agree":!0,tdialog:!0,timer:!0,uui:!0},dtmfType:{INFO:"info",RTP:"rtp"}}}},function(e,t,n){"use strict";e.exports={ConfigurationError:function(){var e=function(e,t){this.code=1,this.name="CONFIGURATION_ERROR",this.parameter=e,this.value=t,this.message=this.value?"Invalid value "+JSON.stringify(this.value)+' for parameter "'+this.parameter+'"':"Missing parameter: "+this.parameter};return e.prototype=new Error,e}(),InvalidStateError:function(){var e=function(e){this.code=2,this.name="INVALID_STATE_ERROR",this.status=e,this.message="Invalid status: "+e};return e.prototype=new Error,e}(),NotSupportedError:function(){var e=function(e){this.code=3,this.name="NOT_SUPPORTED_ERROR",this.message=e};return e.prototype=new Error,e}(),GetDescriptionError:function(){var e=function(e){this.code=4,this.name="GET_DESCRIPTION_ERROR",this.message=e};return e.prototype=new Error,e}(),RenegotiationError:function(){var e=function(e){this.code=5,this.name="RENEGOTIATION_ERROR",this.message=e};return e.prototype=new Error,e}(),MethodParameterError:function(){var e=function(e,t,n){this.code=6,this.name="METHOD_PARAMETER_ERROR",this.method=e,this.parameter=t,this.value=n,this.message=this.value?"Invalid value "+JSON.stringify(this.value)+' for parameter "'+this.parameter+'"':"Missing parameter: "+this.parameter};return e.prototype=new Error,e}(),TransportError:function(){var e=function(e){this.code=7,this.name="TRANSPORT_ERROR",this.message=e};return e.prototype=new Error,e}(),SessionDescriptionHandlerError:function(){var e=function(e,t,n){this.code=8,this.name="SESSION_DESCRIPTION_HANDLER_ERROR",this.method=e,this.error=t,this.message=n||"Error with Session Description Handler"};return e.prototype=new Error,e}()}},function(e,t,n){"use strict";var i=500;e.exports=function(e){var t={T1:i,T2:4e3,T4:5e3,TIMER_B:32e3,TIMER_D:0,TIMER_F:32e3,TIMER_H:32e3,TIMER_I:0,TIMER_J:0,TIMER_K:0,TIMER_L:32e3,TIMER_M:32e3,TIMER_N:32e3,PROVISIONAL_RESPONSE_INTERVAL:6e4};return["setTimeout","clearTimeout","setInterval","clearInterval"].forEach(function(n){t[n]=function(){return e[n].apply(e,arguments)}}),t}},function(e,t,n){"use strict";e.exports=function(e){var t=function(e,t){};return t.prototype=Object.create(e.EventEmitter.prototype,{connect:{writable:!0,value:function(e){return e=e||{},this.connectPromise(e).then(function(e){!e.overrideEvent&&this.emit("connected")}.bind(this))}},connectPromise:{writable:!0,value:function(e){}},isConnected:{writable:!0,value:function(){}},send:{writable:!0,value:function(e,t){return t=t||{},this.sendPromise(e).then(function(e){!e.overrideEvent&&this.emit("messageSent",e.msg)}.bind(this))}},sendPromise:{writable:!0,value:function(e,t){}},onMessage:{writable:!0,value:function(e){}},disconnect:{writable:!0,value:function(e){return e=e||{},this.disconnectPromise(e).then(function(e){!e.overrideEvent&&this.emit("disconnected")}.bind(this))}},disconnectPromise:{writable:!0,value:function(e){}},afterConnected:{writable:!0,value:function(e){this.isConnected()?e():this.once("connected",e)}},waitForConnected:{writable:!0,value:function(){return console.warn("DEPRECATION WARNING Transport.waitForConnected(): use afterConnected() instead"),new e.Utils.Promise(function(e){this.afterConnected(e)}.bind(this))}}}),t}},function(e,t,n){"use strict";e.exports=function(e){var t;function n(e,t){var n=t,i=0,r=0;if(e.substring(n,n+2).match(/(^\r\n)/))return-2;for(;0===i;){if(-1===(r=e.indexOf("\r\n",n)))return r;!e.substring(r+2,r+4).match(/(^\r\n)/)&&e.charAt(r+2).match(/(^\s+)/)?n=r+2:i=r}return i}function i(t,n,i,r){var s,o,a,u,l=n.indexOf(":",i),c=n.substring(i,l).trim(),d=n.substring(l+1,r).trim();switch(c.toLowerCase()){case"via":case"v":t.addHeader("via",d),1===t.getHeaders("via").length?(u=t.parseHeader("Via"))&&(t.via=u,t.via_branch=u.branch):u=0;break;case"from":case"f":t.setHeader("from",d),(u=t.parseHeader("from"))&&(t.from=u,t.from_tag=u.getParam("tag"));break;case"to":case"t":t.setHeader("to",d),(u=t.parseHeader("to"))&&(t.to=u,t.to_tag=u.getParam("tag"));break;case"record-route":if(-1===(u=e.Grammar.parse(d,"Record_Route"))){u=void 0;break}for(a=u.length,o=0;o<a;o++)s=u[o],t.addHeader("record-route",d.substring(s.position,s.offset)),t.headers["Record-Route"][t.getHeaders("record-route").length-1].parsed=s.parsed;break;case"call-id":case"i":t.setHeader("call-id",d),(u=t.parseHeader("call-id"))&&(t.call_id=d);break;case"contact":case"m":if(-1===(u=e.Grammar.parse(d,"Contact"))){u=void 0;break}for(a=u.length,o=0;o<a;o++)s=u[o],t.addHeader("contact",d.substring(s.position,s.offset)),t.headers.Contact[t.getHeaders("contact").length-1].parsed=s.parsed;break;case"content-length":case"l":t.setHeader("content-length",d),u=t.parseHeader("content-length");break;case"content-type":case"c":t.setHeader("content-type",d),u=t.parseHeader("content-type");break;case"cseq":t.setHeader("cseq",d),(u=t.parseHeader("cseq"))&&(t.cseq=u.value),t instanceof e.IncomingResponse&&(t.method=u.method);break;case"max-forwards":t.setHeader("max-forwards",d),u=t.parseHeader("max-forwards");break;case"www-authenticate":t.setHeader("www-authenticate",d),u=t.parseHeader("www-authenticate");break;case"proxy-authenticate":t.setHeader("proxy-authenticate",d),u=t.parseHeader("proxy-authenticate");break;case"refer-to":case"r":t.setHeader("refer-to",d),(u=t.parseHeader("refer-to"))&&(t.refer_to=u);break;default:t.setHeader(c,d),u=0}return void 0!==u||{error:'error parsing header "'+c+'"'}}(t={}).parseMessage=function(t,r){var s,o,a,u,l,c=0,d=t.indexOf("\r\n"),h=r.getLogger("sip.parser");if(-1!==d){if(o=t.substring(0,d),-1!==(l=e.Grammar.parse(o,"Request_Response"))){for(l.status_code?((s=new e.IncomingResponse(r)).status_code=l.status_code,s.reason_phrase=l.reason_phrase):((s=new e.IncomingRequest(r)).method=l.method,s.ruri=l.uri),s.data=t,c=d+2;;){if(-2===(d=n(t,c))){u=c+2;break}if(-1===d)return void h.error("malformed message");if(!0!==(l=i(s,t,c,d)))return void h.error(l.error);c=d+2}return s.hasHeader("content-length")?(a=s.getHeader("content-length"),s.body=t.substr(u,a)):s.body=t.substring(u),s}h.warn('error parsing first line of SIP message: "'+o+'"')}else h.warn("no CRLF found, not a SIP message, discarded")},e.Parser=t}},function(e,t,n){"use strict";e.exports=function(e){var t,n,i,r;function s(t){var n=t.ua.configuration.hackAllowUnregisteredOptionTags,i=[],r={};return t.method===e.C.REGISTER?i.push("path","gruu"):t.method===e.C.INVITE&&(t.ua.contact.pub_gruu||t.ua.contact.temp_gruu)&&i.push("gruu"),t.ua.configuration.rel100===e.C.supported.SUPPORTED&&i.push("100rel"),t.ua.configuration.replaces===e.C.supported.SUPPORTED&&i.push("replaces"),i.push("outbound"),"Supported: "+(i=(i=i.concat(t.ua.configuration.extraSupported)).filter(function(t){var i=e.C.OPTION_TAGS[t],s=!r[t];return r[t]=!0,(i||n)&&s})).join(", ")+"\r\n"}(t=function(t,n,i,r,s,o){var a,u,l,c,d,h;if(r=r||{},!t||!n||!i)return null;this.logger=i.getLogger("sip.sipmessage"),this.ua=i,this.headers={},this.method=t,this.ruri=n,this.body=o,this.extraHeaders=(s||[]).slice(),this.statusCode=r.status_code,this.reasonPhrase=r.reason_phrase,r.route_set?this.setHeader("route",r.route_set):i.configuration.usePreloadedRoute&&this.setHeader("route",i.transport.server.sip_uri),this.setHeader("via",""),this.setHeader("max-forwards",e.UA.C.MAX_FORWARDS),d=r.to_uri||n,a=r.to_displayName||0===r.to_displayName?'"'+r.to_displayName+'" ':"",a+="<"+(d&&d.toRaw?d.toRaw():d)+">",a+=r.to_tag?";tag="+r.to_tag:"",this.to=new e.NameAddrHeader.parse(a),this.setHeader("to",a),h=r.from_uri||i.configuration.uri,u=r.from_displayName||0===r.from_displayName?'"'+r.from_displayName+'" ':i.configuration.displayName?'"'+i.configuration.displayName+'" ':"",u+="<"+(h&&h.toRaw?h.toRaw():h)+">;tag=",u+=r.from_tag||e.Utils.newTag(),this.from=new e.NameAddrHeader.parse(u),this.setHeader("from",u),l=r.call_id||i.configuration.sipjsId+e.Utils.createRandomToken(15),this.call_id=l,this.setHeader("call-id",l),c=r.cseq||Math.floor(1e4*Math.random()),this.cseq=c,this.setHeader("cseq",c+" "+t)}).prototype={setHeader:function(t,n){this.headers[e.Utils.headerize(t)]=n instanceof Array?n:[n]},getHeader:function(t){var n,i,r=this.extraHeaders.length,s=this.headers[e.Utils.headerize(t)];if(s){if(s[0])return s[0]}else for(n=new RegExp("^\\s*"+t+"\\s*:","i"),i=0;i<r;i++)if(s=this.extraHeaders[i],n.test(s))return s.substring(s.indexOf(":")+1).trim()},getHeaders:function(t){var n,i,r,s=this.headers[e.Utils.headerize(t)],o=[];if(s){for(i=s.length,n=0;n<i;n++)o.push(s[n]);return o}for(i=this.extraHeaders.length,r=new RegExp("^\\s*"+t+"\\s*:","i"),n=0;n<i;n++)s=this.extraHeaders[n],r.test(s)&&o.push(s.substring(s.indexOf(":")+1).trim());return o},hasHeader:function(t){var n,i,r=this.extraHeaders.length;if(this.headers[e.Utils.headerize(t)])return!0;for(n=new RegExp("^\\s*"+t+"\\s*:","i"),i=0;i<r;i++)if(n.test(this.extraHeaders[i]))return!0;return!1},toString:function(){var t,n,i,r="";for(t in r+=this.method+" "+(this.ruri.toRaw?this.ruri.toRaw():this.ruri)+" SIP/2.0\r\n",this.headers)for(n=this.headers[t].length,i=0;i<n;i++)r+=t+": "+this.headers[t][i]+"\r\n";for(n=this.extraHeaders.length,i=0;i<n;i++)r+=this.extraHeaders[i].trim()+"\r\n";return r+=s(this),r+="User-Agent: "+this.ua.configuration.userAgentString+"\r\n",this.body?"string"==typeof this.body?(r+="Content-Length: "+(n=e.Utils.str_utf8_length(this.body))+"\r\n\r\n",r+=this.body):this.body.body&&this.body.contentType?(n=e.Utils.str_utf8_length(this.body.body),r+="Content-Type: "+this.body.contentType+"\r\n",r+="Content-Length: "+n+"\r\n\r\n",r+=this.body.body):r+="Content-Length: 0\r\n\r\n":r+="Content-Length: 0\r\n\r\n",r}},(n=function(){this.data=null,this.headers=null,this.method=null,this.via=null,this.via_branch=null,this.call_id=null,this.cseq=null,this.from=null,this.from_tag=null,this.to=null,this.to_tag=null,this.body=null}).prototype={addHeader:function(t,n){var i={raw:n};t=e.Utils.headerize(t),this.headers[t]?this.headers[t].push(i):this.headers[t]=[i]},getHeader:function(t){var n=this.headers[e.Utils.headerize(t)];if(n)return n[0]?n[0].raw:void 0},getHeaders:function(t){var n,i,r=this.headers[e.Utils.headerize(t)],s=[];if(!r)return[];for(i=r.length,n=0;n<i;n++)s.push(r[n].raw);return s},hasHeader:function(t){return!!this.headers[e.Utils.headerize(t)]},parseHeader:function(t,n){var i,r,s;if(t=e.Utils.headerize(t),n=n||0,this.headers[t]){if(!(n>=this.headers[t].length))return r=(i=this.headers[t][n]).raw,i.parsed?i.parsed:-1===(s=e.Grammar.parse(r,t.replace(/-/g,"_")))?(this.headers[t].splice(n,1),void this.logger.warn('error parsing "'+t+'" header field with value "'+r+'"')):(i.parsed=s,s);this.logger.log('not so many "'+t+'" headers present')}else this.logger.log('header "'+t+'" not present')},s:function(e,t){return this.parseHeader(e,t)},setHeader:function(t,n){var i={raw:n};this.headers[e.Utils.headerize(t)]=[i]},toString:function(){return this.data}},((i=function(e){this.logger=e.getLogger("sip.sipmessage"),this.ua=e,this.headers={},this.ruri=null,this.transport=null,this.server_transaction=null}).prototype=new n).reply=function(t,n,i,r,o,a){var u,l,c,d,h,p=this.getHeader("To"),f=0,m=0;if(h=e.Utils.buildStatusLine(t,n),i=(i||[]).slice(),this.method===e.C.INVITE&&t>100&&t<=200)for(c=(u=this.getHeaders("record-route")).length;f<c;f++)h+="Record-Route: "+u[f]+"\r\n";for(c=(l=this.getHeaders("via")).length;m<c;m++)h+="Via: "+l[m]+"\r\n";for(!this.to_tag&&t>100?p+=";tag="+e.Utils.newTag():this.to_tag&&!this.s("to").hasParam("tag")&&(p+=";tag="+this.to_tag),h+="To: "+p+"\r\n",h+="From: "+this.getHeader("From")+"\r\n",h+="Call-ID: "+this.call_id+"\r\n",h+="CSeq: "+this.cseq+" "+this.method+"\r\n",c=i.length,d=0;d<c;d++)h+=i[d].trim()+"\r\n";return h+=s(this),h+="User-Agent: "+this.ua.configuration.userAgentString+"\r\n",r?"string"==typeof r?(h+="Content-Type: application/sdp\r\n",h+="Content-Length: "+(c=e.Utils.str_utf8_length(r))+"\r\n\r\n",h+=r):r.body&&r.contentType?(c=e.Utils.str_utf8_length(r.body),h+="Content-Type: "+r.contentType+"\r\n",h+="Content-Length: "+c+"\r\n\r\n",h+=r.body):h+="Content-Length: 0\r\n\r\n":h+="Content-Length: 0\r\n\r\n",this.server_transaction.receiveResponse(t,h).then(o,a),h},i.prototype.reply_sl=function(t,n){var i,r,s=0,o=this.getHeaders("via"),a=o.length;for(r=e.Utils.buildStatusLine(t,n);s<a;s++)r+="Via: "+o[s]+"\r\n";i=this.getHeader("To"),!this.to_tag&&t>100?i+=";tag="+e.Utils.newTag():this.to_tag&&!this.s("to").hasParam("tag")&&(i+=";tag="+this.to_tag),r+="To: "+i+"\r\n",r+="From: "+this.getHeader("From")+"\r\n",r+="Call-ID: "+this.call_id+"\r\n",r+="CSeq: "+this.cseq+" "+this.method+"\r\n",r+="User-Agent: "+this.ua.configuration.userAgentString+"\r\n",r+="Content-Length: 0\r\n\r\n",this.transport.send(r)},(r=function(e){this.logger=e.getLogger("sip.sipmessage"),this.headers={},this.status_code=null,this.reason_phrase=null}).prototype=new n,e.OutgoingRequest=t,e.IncomingRequest=i,e.IncomingResponse=r}},function(e,t,n){"use strict";e.exports=function(e){var t;(t=function(t,n,i,r,s,o){var a,u,l,c;if(!i)throw new TypeError('missing or invalid "host" parameter');for(a in t=t||e.C.SIP,this.parameters={},this.headers={},s)this.setParam(a,s[a]);for(u in o)this.setHeader(u,o[u]);l={scheme:t,user:n,host:i,port:r},c={scheme:t.toLowerCase(),user:n,host:i.toLowerCase(),port:r},Object.defineProperties(this,{_normal:{get:function(){return c}},_raw:{get:function(){return l}},scheme:{get:function(){return c.scheme},set:function(e){l.scheme=e,c.scheme=e.toLowerCase()}},user:{get:function(){return c.user},set:function(e){c.user=l.user=e}},host:{get:function(){return c.host},set:function(e){l.host=e,c.host=e.toLowerCase()}},aor:{get:function(){return c.user+"@"+c.host}},port:{get:function(){return c.port},set:function(e){c.port=l.port=0===e?e:parseInt(e,10)||null}}})}).prototype={setParam:function(e,t){e&&(this.parameters[e.toLowerCase()]=void 0===t||null===t?null:t.toString())},getParam:function(e){if(e)return this.parameters[e.toLowerCase()]},hasParam:function(e){if(e)return!!this.parameters.hasOwnProperty(e.toLowerCase())},deleteParam:function(e){var t;if(e=e.toLowerCase(),this.parameters.hasOwnProperty(e))return t=this.parameters[e],delete this.parameters[e],t},clearParams:function(){this.parameters={}},setHeader:function(t,n){this.headers[e.Utils.headerize(t)]=n instanceof Array?n:[n]},getHeader:function(t){if(t)return this.headers[e.Utils.headerize(t)]},hasHeader:function(t){if(t)return!!this.headers.hasOwnProperty(e.Utils.headerize(t))},deleteHeader:function(t){var n;if(t=e.Utils.headerize(t),this.headers.hasOwnProperty(t))return n=this.headers[t],delete this.headers[t],n},clearHeaders:function(){this.headers={}},clone:function(){return new t(this._raw.scheme,this._raw.user,this._raw.host,this._raw.port,JSON.parse(JSON.stringify(this.parameters)),JSON.parse(JSON.stringify(this.headers)))},toRaw:function(){return this._toString(this._raw)},toString:function(){return this._toString(this._normal)},_toString:function(t){var n,i,r,s,o=[];for(i in s=t.scheme+":",t.scheme.toLowerCase().match("^sips?$")||(s+="//"),t.user&&(s+=e.Utils.escapeUser(t.user)+"@"),s+=t.host,(t.port||0===t.port)&&(s+=":"+t.port),this.parameters)s+=";"+i,null!==this.parameters[i]&&(s+="="+this.parameters[i]);for(n in this.headers)for(r in this.headers[n])o.push(n+"="+this.headers[n][r]);return o.length>0&&(s+="?"+o.join("&")),s}},t.parse=function(t){return-1!==(t=e.Grammar.parse(t,"SIP_URI"))?t:void 0},e.URI=t}},function(e,t,n){"use strict";e.exports=function(e){var t;(t=function(t,n,i){var r;if(!(t&&t instanceof e.URI))throw new TypeError('missing or invalid "uri" parameter');for(r in this.uri=t,this.parameters={},i)this.setParam(r,i[r]);Object.defineProperties(this,{friendlyName:{get:function(){return this.displayName||t.aor}},displayName:{get:function(){return n},set:function(e){n=0===e?"0":e}}})}).prototype={setParam:function(e,t){e&&(this.parameters[e.toLowerCase()]=void 0===t||null===t?null:t.toString())},getParam:e.URI.prototype.getParam,hasParam:e.URI.prototype.hasParam,deleteParam:e.URI.prototype.deleteParam,clearParams:e.URI.prototype.clearParams,clone:function(){return new t(this.uri.clone(),this.displayName,JSON.parse(JSON.stringify(this.parameters)))},toString:function(){var e,t;for(t in e=this.displayName||0===this.displayName?'"'+this.displayName+'" ':"",e+="<"+this.uri.toString()+">",this.parameters)e+=";"+t,null!==this.parameters[t]&&(e+="="+this.parameters[t]);return e}},t.parse=function(t){return-1!==(t=e.Grammar.parse(t,"Name_Addr_Header"))?t:void 0},e.NameAddrHeader=t}},function(e,t,n){"use strict";e.exports=function(e){var t={STATUS_TRYING:1,STATUS_PROCEEDING:2,STATUS_CALLING:3,STATUS_ACCEPTED:4,STATUS_COMPLETED:5,STATUS_TERMINATED:6,STATUS_CONFIRMED:7,NON_INVITE_CLIENT:"nict",NON_INVITE_SERVER:"nist",INVITE_CLIENT:"ict",INVITE_SERVER:"ist"};function n(e,t,n){var i;return i="SIP/2.0/"+(e.ua.configuration.hackViaTcp?"TCP":t.server.scheme),i+=" "+e.ua.configuration.viaHost+";branch="+n,e.ua.configuration.forceRport&&(i+=";rport"),i}var i=function(e,i,r){var s;this.type=t.NON_INVITE_CLIENT,this.transport=r,this.id="z9hG4bK"+Math.floor(1e7*Math.random()),this.request_sender=e,this.request=i,this.logger=e.ua.getLogger("sip.transaction.nict",this.id),s=n(e,r,this.id),this.request.setHeader("via",s),this.request_sender.ua.newTransaction(this)};(i.prototype=Object.create(e.EventEmitter.prototype)).stateChanged=function(e){this.state=e,this.emit("stateChanged")},i.prototype.send=function(){this.stateChanged(t.STATUS_TRYING),this.F=e.Timers.setTimeout(this.timer_F.bind(this),e.Timers.TIMER_F),this.transport.send(this.request).catch(function(){this.onTransportError()}.bind(this))},i.prototype.onTransportError=function(){this.logger.log("transport error occurred, deleting non-INVITE client transaction "+this.id),e.Timers.clearTimeout(this.F),e.Timers.clearTimeout(this.K),this.stateChanged(t.STATUS_TERMINATED),this.request_sender.ua.destroyTransaction(this),this.request_sender.onTransportError()},i.prototype.timer_F=function(){this.logger.debug("Timer F expired for non-INVITE client transaction "+this.id),this.stateChanged(t.STATUS_TERMINATED),this.request_sender.ua.destroyTransaction(this),this.request_sender.onRequestTimeout()},i.prototype.timer_K=function(){this.stateChanged(t.STATUS_TERMINATED),this.request_sender.ua.destroyTransaction(this)},i.prototype.receiveResponse=function(n){var i=n.status_code;if(i<200)switch(this.state){case t.STATUS_TRYING:case t.STATUS_PROCEEDING:this.stateChanged(t.STATUS_PROCEEDING),this.request_sender.receiveResponse(n)}else switch(this.state){case t.STATUS_TRYING:case t.STATUS_PROCEEDING:this.stateChanged(t.STATUS_COMPLETED),e.Timers.clearTimeout(this.F),408===i?this.request_sender.onRequestTimeout():this.request_sender.receiveResponse(n),this.K=e.Timers.setTimeout(this.timer_K.bind(this),e.Timers.TIMER_K)}};var r=function(e,i,r){var s,o=this;this.type=t.INVITE_CLIENT,this.transport=r,this.id="z9hG4bK"+Math.floor(1e7*Math.random()),this.request_sender=e,this.request=i,this.logger=e.ua.getLogger("sip.transaction.ict",this.id),s=n(e,r,this.id),this.request.setHeader("via",s),this.request_sender.ua.newTransaction(this),this.request.cancel=function(e,t){for(var n=(t=(t||[]).slice()).length,i=null,r=0;r<n;r++)i=(i||"")+t[r].trim()+"\r\n";o.cancel_request(o,e,i)}};(r.prototype=Object.create(e.EventEmitter.prototype)).stateChanged=function(e){this.state=e,this.emit("stateChanged")},r.prototype.send=function(){this.stateChanged(t.STATUS_CALLING),this.B=e.Timers.setTimeout(this.timer_B.bind(this),e.Timers.TIMER_B),this.transport.send(this.request).catch(function(){this.onTransportError()}.bind(this))},r.prototype.onTransportError=function(){this.logger.log("transport error occurred, deleting INVITE client transaction "+this.id),e.Timers.clearTimeout(this.B),e.Timers.clearTimeout(this.D),e.Timers.clearTimeout(this.M),this.stateChanged(t.STATUS_TERMINATED),this.request_sender.ua.destroyTransaction(this),this.state!==t.STATUS_ACCEPTED&&this.request_sender.onTransportError()},r.prototype.timer_M=function(){this.logger.debug("Timer M expired for INVITE client transaction "+this.id),this.state===t.STATUS_ACCEPTED&&(e.Timers.clearTimeout(this.B),this.stateChanged(t.STATUS_TERMINATED),this.request_sender.ua.destroyTransaction(this))},r.prototype.timer_B=function(){this.logger.debug("Timer B expired for INVITE client transaction "+this.id),this.state===t.STATUS_CALLING&&(this.stateChanged(t.STATUS_TERMINATED),this.request_sender.ua.destroyTransaction(this),this.request_sender.onRequestTimeout())},r.prototype.timer_D=function(){this.logger.debug("Timer D expired for INVITE client transaction "+this.id),e.Timers.clearTimeout(this.B),this.stateChanged(t.STATUS_TERMINATED),this.request_sender.ua.destroyTransaction(this)},r.prototype.sendACK=function(t){var n,i=this;t=t||{},n=this.response.getHeader("contact")?this.response.parseHeader("contact").uri:this.request.ruri;var r=new e.OutgoingRequest("ACK",n,this.request.ua,{cseq:this.response.cseq,call_id:this.response.call_id,from_uri:this.response.from.uri,from_tag:this.response.from_tag,to_uri:this.response.to.uri,to_tag:this.response.to_tag,route_set:this.response.getHeaders("record-route").reverse()},t.extraHeaders||[],t.body);return this.ackSender=new e.RequestSender({request:r,onRequestTimeout:this.request_sender.applicant.applicant?this.request_sender.applicant.applicant.onRequestTimeout:function(){i.logger.warn("ACK Request timed out")},onTransportError:this.request_sender.applicant.applicant?this.request_sender.applicant.applicant.onRequestTransportError:function(){i.logger.warn("ACK Request had a transport error")},receiveResponse:t.receiveResponse||function(){i.logger.warn("Received a response to an ACK which was unexpected. Dropping Response.")}},this.request.ua).send(),r},r.prototype.cancel_request=function(n,i,r){var s=n.request;this.cancel=e.C.CANCEL+" "+s.ruri+" SIP/2.0\r\n",this.cancel+="Via: "+s.headers.Via.toString()+"\r\n",this.request.headers.Route&&(this.cancel+="Route: "+s.headers.Route.toString()+"\r\n"),this.cancel+="To: "+s.headers.To.toString()+"\r\n",this.cancel+="From: "+s.headers.From.toString()+"\r\n",this.cancel+="Call-ID: "+s.headers["Call-ID"].toString()+"\r\n",this.cancel+="Max-Forwards: "+e.UA.C.MAX_FORWARDS+"\r\n",this.cancel+="CSeq: "+s.headers.CSeq.toString().split(" ")[0]+" CANCEL\r\n",i&&(this.cancel+="Reason: "+i+"\r\n"),r&&(this.cancel+=r),this.cancel+="Content-Length: 0\r\n\r\n",this.state===t.STATUS_PROCEEDING&&this.transport.send(this.cancel)},r.prototype.receiveResponse=function(n){var i=n.status_code;if(n.transaction=this,this.response&&this.response.status_code===n.status_code&&this.response.cseq===n.cseq)return this.logger.debug("ICT Received a retransmission for cseq: "+n.cseq),void(this.ackSender&&this.ackSender.send());if(this.response=n,i>=100&&i<=199)switch(this.state){case t.STATUS_CALLING:this.stateChanged(t.STATUS_PROCEEDING),this.request_sender.receiveResponse(n),this.cancel&&this.transport.send(this.cancel);break;case t.STATUS_PROCEEDING:this.request_sender.receiveResponse(n)}else if(i>=200&&i<=299)switch(this.state){case t.STATUS_CALLING:case t.STATUS_PROCEEDING:this.stateChanged(t.STATUS_ACCEPTED),this.M=e.Timers.setTimeout(this.timer_M.bind(this),e.Timers.TIMER_M),this.request_sender.receiveResponse(n);break;case t.STATUS_ACCEPTED:this.request_sender.receiveResponse(n)}else if(i>=300&&i<=699)switch(this.state){case t.STATUS_CALLING:case t.STATUS_PROCEEDING:this.stateChanged(t.STATUS_COMPLETED),this.sendACK(),this.request_sender.receiveResponse(n);break;case t.STATUS_COMPLETED:this.sendACK()}};var s=function(e,t,i){var r;this.transport=i,this.id="z9hG4bK"+Math.floor(1e7*Math.random()),this.request_sender=e,this.request=t,this.logger=e.ua.getLogger("sip.transaction.nict",this.id),r=n(e,i,this.id),this.request.setHeader("via",r)};(s.prototype=Object.create(e.EventEmitter.prototype)).send=function(){this.transport.send(this.request).catch(function(){this.onTransportError()}.bind(this))},s.prototype.onTransportError=function(){this.logger.log("transport error occurred, for an ACK client transaction "+this.id),this.request_sender.onTransportError()};var o=function(e,n){this.type=t.NON_INVITE_SERVER,this.id=e.via_branch,this.request=e,this.transport=n.transport,this.ua=n,this.last_response="",e.server_transaction=this,this.logger=n.getLogger("sip.transaction.nist",this.id),this.state=t.STATUS_TRYING,n.newTransaction(this)};(o.prototype=Object.create(e.EventEmitter.prototype)).stateChanged=function(e){this.state=e,this.emit("stateChanged")},o.prototype.timer_J=function(){this.logger.debug("Timer J expired for non-INVITE server transaction "+this.id),this.stateChanged(t.STATUS_TERMINATED),this.ua.destroyTransaction(this)},o.prototype.onTransportError=function(){this.transportError||(this.transportError=!0,this.logger.log("transport error occurred, deleting non-INVITE server transaction "+this.id),e.Timers.clearTimeout(this.J),this.stateChanged(t.STATUS_TERMINATED),this.ua.destroyTransaction(this))},o.prototype.receiveResponse=function(n,i){var r=e.Utils.defer();if(100===n)switch(this.state){case t.STATUS_TRYING:this.stateChanged(t.STATUS_PROCEEDING),this.transport.send(i).catch(function(){this.onTransportError()}.bind(this));break;case t.STATUS_PROCEEDING:this.last_response=i,this.transport.send(i).then(function(){r.resolve()}).catch(function(){this.onTransportError(),r.reject()}.bind(this))}else if(n>=200&&n<=699)switch(this.state){case t.STATUS_TRYING:case t.STATUS_PROCEEDING:this.stateChanged(t.STATUS_COMPLETED),this.last_response=i,this.J=e.Timers.setTimeout(this.timer_J.bind(this),e.Timers.TIMER_J),this.transport.send(i).then(function(){r.resolve()}).catch(function(){this.onTransportError(),r.reject()}.bind(this))}return r.promise};var a=function(e,n){this.type=t.INVITE_SERVER,this.id=e.via_branch,this.request=e,this.transport=n.transport,this.ua=n,this.last_response="",e.server_transaction=this,this.logger=n.getLogger("sip.transaction.ist",this.id),this.state=t.STATUS_PROCEEDING,n.newTransaction(this),this.resendProvisionalTimer=null,e.reply(100)};(a.prototype=Object.create(e.EventEmitter.prototype)).stateChanged=function(e){this.state=e,this.emit("stateChanged")},a.prototype.timer_H=function(){this.logger.debug("Timer H expired for INVITE server transaction "+this.id),this.state===t.STATUS_COMPLETED&&this.logger.warn("transactions","ACK for INVITE server transaction was never received, call will be terminated"),this.stateChanged(t.STATUS_TERMINATED),this.ua.destroyTransaction(this)},a.prototype.timer_I=function(){this.stateChanged(t.STATUS_TERMINATED),this.ua.destroyTransaction(this)},a.prototype.timer_L=function(){this.logger.debug("Timer L expired for INVITE server transaction "+this.id),this.state===t.STATUS_ACCEPTED&&(this.stateChanged(t.STATUS_TERMINATED),this.ua.destroyTransaction(this))},a.prototype.onTransportError=function(){this.transportError||(this.transportError=!0,this.logger.log("transport error occurred, deleting INVITE server transaction "+this.id),null!==this.resendProvisionalTimer&&(e.Timers.clearInterval(this.resendProvisionalTimer),this.resendProvisionalTimer=null),e.Timers.clearTimeout(this.L),e.Timers.clearTimeout(this.H),e.Timers.clearTimeout(this.I),this.stateChanged(t.STATUS_TERMINATED),this.ua.destroyTransaction(this))},a.prototype.resend_provisional=function(){this.transport.send(this.request).catch(function(){this.onTransportError()}.bind(this))},a.prototype.receiveResponse=function(n,i){var r=this,s=e.Utils.defer();if(n>=100&&n<=199)switch(this.state){case t.STATUS_PROCEEDING:this.transport.send(i).catch(function(){this.onTransportError()}.bind(this)),this.last_response=i}if(n>100&&n<=199&&this.state===t.STATUS_PROCEEDING)null===this.resendProvisionalTimer&&(this.resendProvisionalTimer=e.Timers.setInterval(r.resend_provisional.bind(r),e.Timers.PROVISIONAL_RESPONSE_INTERVAL));else if(n>=200&&n<=299)switch(this.state){case t.STATUS_PROCEEDING:this.stateChanged(t.STATUS_ACCEPTED),this.last_response=i,this.L=e.Timers.setTimeout(r.timer_L.bind(r),e.Timers.TIMER_L),null!==this.resendProvisionalTimer&&(e.Timers.clearInterval(this.resendProvisionalTimer),this.resendProvisionalTimer=null);case t.STATUS_ACCEPTED:this.transport.send(i).then(function(){s.resolve()}).catch(function(e){this.logger.error(e),this.onTransportError(),s.reject()}.bind(this))}else if(n>=300&&n<=699)switch(this.state){case t.STATUS_PROCEEDING:null!==this.resendProvisionalTimer&&(e.Timers.clearInterval(this.resendProvisionalTimer),this.resendProvisionalTimer=null),this.transport.send(i).then(function(){this.stateChanged(t.STATUS_COMPLETED),this.H=e.Timers.setTimeout(r.timer_H.bind(r),e.Timers.TIMER_H),s.resolve()}.bind(this)).catch(function(e){this.logger.error(e),this.onTransportError(),s.reject()}.bind(this))}return s.promise};e.Transactions={C:t,checkTransaction:function(n,i){var r;switch(i.method){case e.C.INVITE:if(r=n.transactions.ist[i.via_branch]){switch(r.state){case t.STATUS_PROCEEDING:r.transport.send(r.last_response)}return!0}break;case e.C.ACK:if(!(r=n.transactions.ist[i.via_branch]))return!1;if(r.state===t.STATUS_ACCEPTED)return!1;if(r.state===t.STATUS_COMPLETED)return r.stateChanged(t.STATUS_CONFIRMED),r.I=e.Timers.setTimeout(r.timer_I.bind(r),e.Timers.TIMER_I),!0;break;case e.C.CANCEL:return(r=n.transactions.ist[i.via_branch])?(i.reply_sl(200),r.state!==t.STATUS_PROCEEDING):(i.reply_sl(481),!0);default:if(r=n.transactions.nist[i.via_branch]){switch(r.state){case t.STATUS_TRYING:break;case t.STATUS_PROCEEDING:case t.STATUS_COMPLETED:r.transport.send(r.last_response)}return!0}}},NonInviteClientTransaction:i,InviteClientTransaction:r,AckClientTransaction:s,NonInviteServerTransaction:o,InviteServerTransaction:a}}},function(e,t,n){"use strict";e.exports=function(e){var t,i=n(17)(e),r={STATUS_EARLY:1,STATUS_CONFIRMED:2};(t=function(t,n,i,s){var o;if(this.uac_pending_reply=!1,this.uas_pending_reply=!1,!n.hasHeader("contact"))return{error:"unable to create a Dialog without Contact header field"};s=n instanceof e.IncomingResponse?n.status_code<200?r.STATUS_EARLY:r.STATUS_CONFIRMED:s||r.STATUS_CONFIRMED,o=n.parseHeader("contact"),"UAS"===i?(this.id={call_id:n.call_id,local_tag:n.to_tag,remote_tag:n.from_tag,toString:function(){return this.call_id+this.local_tag+this.remote_tag}},this.state=s,this.remote_seqnum=n.cseq,this.local_uri=n.parseHeader("to").uri,this.remote_uri=n.parseHeader("from").uri,this.remote_target=o.uri,this.route_set=n.getHeaders("record-route"),this.invite_seqnum=n.cseq,this.local_seqnum=n.cseq):"UAC"===i&&(this.id={call_id:n.call_id,local_tag:n.from_tag,remote_tag:n.to_tag,toString:function(){return this.call_id+this.local_tag+this.remote_tag}},this.state=s,this.invite_seqnum=n.cseq,this.local_seqnum=n.cseq,this.local_uri=n.parseHeader("from").uri,this.pracked=[],this.remote_uri=n.parseHeader("to").uri,this.remote_target=o.uri,this.route_set=n.getHeaders("record-route").reverse()),this.logger=t.ua.getLogger("sip.dialog",this.id.toString()),this.owner=t,t.ua.dialogs[this.id.toString()]=this,this.logger.log("new "+i+" dialog created with status "+(this.state===r.STATUS_EARLY?"EARLY":"CONFIRMED")),t.emit("dialog",this)}).prototype={update:function(e,t){this.state=r.STATUS_CONFIRMED,this.logger.log("dialog "+this.id.toString()+"  changed to CONFIRMED state"),"UAC"===t&&(this.route_set=e.getHeaders("record-route").reverse())},terminate:function(){this.logger.log("dialog "+this.id.toString()+" deleted"),this.sessionDescriptionHandler&&this.state!==r.STATUS_CONFIRMED&&this.sessionDescriptionHandler.close(),delete this.owner.ua.dialogs[this.id.toString()]},createRequest:function(t,n,i){var r,s;return n=(n||[]).slice(),this.local_seqnum||(this.local_seqnum=Math.floor(1e4*Math.random())),r=t===e.C.CANCEL||t===e.C.ACK?this.invite_seqnum:this.local_seqnum+=1,(s=new e.OutgoingRequest(t,this.remote_target,this.owner.ua,{cseq:r,call_id:this.id.call_id,from_uri:this.local_uri,from_tag:this.id.local_tag,to_uri:this.remote_uri,to_tag:this.id.remote_tag,route_set:this.route_set},n,i)).dialog=this,s},checkInDialogRequest:function(t){var n=this;if(this.remote_seqnum){if(t.cseq<this.remote_seqnum)return t.method!==e.C.ACK&&t.reply(500),t.cseq===this.invite_seqnum}else this.remote_seqnum=t.cseq;switch(t.method){case e.C.INVITE:if(!0===this.uac_pending_reply)t.reply(491);else{if(!0===this.uas_pending_reply&&t.cseq>this.remote_seqnum){var i=1+(10*Math.random()|0);return t.reply(500,null,["Retry-After:"+i]),this.remote_seqnum=t.cseq,!1}this.uas_pending_reply=!0,t.server_transaction.on("stateChanged",function t(){this.state!==e.Transactions.C.STATUS_ACCEPTED&&this.state!==e.Transactions.C.STATUS_COMPLETED&&this.state!==e.Transactions.C.STATUS_TERMINATED||(this.removeListener("stateChanged",t),n.uas_pending_reply=!1)})}t.hasHeader("contact")&&t.server_transaction.on("stateChanged",function(){this.state===e.Transactions.C.STATUS_ACCEPTED&&(n.remote_target=t.parseHeader("contact").uri)});break;case e.C.NOTIFY:t.hasHeader("contact")&&t.server_transaction.on("stateChanged",function(){this.state===e.Transactions.C.STATUS_COMPLETED&&(n.remote_target=t.parseHeader("contact").uri)})}return t.cseq>this.remote_seqnum&&(this.remote_seqnum=t.cseq),!0},sendRequest:function(e,t,n){var r=((n=n||{}).extraHeaders||[]).slice(),s=null;n.body&&(n.body.body?s=n.body:((s={}).body=n.body,n.contentType&&(s.contentType=n.contentType)));var o=this.createRequest(t,r,s);return new i(this,e,o).send(),o},receiveRequest:function(e){this.checkInDialogRequest(e)&&this.owner.receiveRequest(e)}},t.C=r,e.Dialog=t}},function(e,t,n){"use strict";e.exports=function(e){var t;return(t=function(e,t,n){this.dialog=e,this.applicant=t,this.request=n,this.reattempt=!1,this.reattemptTimer=null}).prototype={send:function(){var t=this,n=new e.RequestSender(this,this.dialog.owner.ua);n.send(),this.request.method===e.C.INVITE&&n.clientTransaction.state!==e.Transactions.C.STATUS_TERMINATED&&(this.dialog.uac_pending_reply=!0,n.clientTransaction.on("stateChanged",function n(){this.state!==e.Transactions.C.STATUS_ACCEPTED&&this.state!==e.Transactions.C.STATUS_COMPLETED&&this.state!==e.Transactions.C.STATUS_TERMINATED||(this.removeListener("stateChanged",n),t.dialog.uac_pending_reply=!1)}))},onRequestTimeout:function(){this.applicant.onRequestTimeout()},onTransportError:function(){this.applicant.onTransportError()},receiveResponse:function(t){var n=this;408===t.status_code||481===t.status_code?this.applicant.onDialogError(t):t.method===e.C.INVITE&&491===t.status_code?this.reattempt?this.applicant.receiveResponse(t):(this.request.cseq.value=this.dialog.local_seqnum+=1,this.reattemptTimer=e.Timers.setTimeout(function(){n.applicant.owner.status!==e.Session.C.STATUS_TERMINATED&&(n.reattempt=!0,n.request_sender.send())},this.getReattemptTimeout())):this.applicant.receiveResponse(t)}},t}},function(e,t,n){"use strict";e.exports=function(e){var t;(t=function(t,n){this.logger=n.getLogger("sip.requestsender"),this.ua=n,this.applicant=t,this.method=t.request.method,this.request=t.request,this.credentials=null,this.challenged=!1,this.staled=!1,n.status!==e.UA.C.STATUS_USER_CLOSED||this.method===e.C.BYE&&this.method===e.C.ACK||this.onTransportError()}).prototype={send:function(){switch(this.method){case"INVITE":this.clientTransaction=new e.Transactions.InviteClientTransaction(this,this.request,this.ua.transport);break;case"ACK":this.clientTransaction=new e.Transactions.AckClientTransaction(this,this.request,this.ua.transport);break;default:this.clientTransaction=new e.Transactions.NonInviteClientTransaction(this,this.request,this.ua.transport)}return this.clientTransaction.send(),this.clientTransaction},onRequestTimeout:function(){this.applicant.onRequestTimeout()},onTransportError:function(){this.applicant.onTransportError()},receiveResponse:function(t){var n,i,r,s=t.status_code;if(401===s||407===s){if(401===t.status_code?(i=t.parseHeader("www-authenticate"),r="authorization"):(i=t.parseHeader("proxy-authenticate"),r="proxy-authorization"),!i)return this.logger.warn(t.status_code+" with wrong or missing challenge, cannot authenticate"),void this.applicant.receiveResponse(t);if(!this.challenged||!this.staled&&!0===i.stale){if(this.credentials||(this.credentials=this.ua.configuration.authenticationFactory(this.ua)),!this.credentials.authenticate(this.request,i))return void this.applicant.receiveResponse(t);this.challenged=!0,i.stale&&(this.staled=!0),t.method===e.C.REGISTER?n=this.applicant.cseq+=1:this.request.dialog?n=this.request.dialog.local_seqnum+=1:(n=this.request.cseq+1,this.request.cseq=n),this.request.setHeader("cseq",n+" "+this.method),this.request.setHeader(r,this.credentials.toString()),this.send()}else this.applicant.receiveResponse(t)}else this.applicant.receiveResponse(t)}},e.RequestSender=t}},function(e,t,n){"use strict";e.exports=function(e){var t;(t=function(t){var n={};this.registrar=t.configuration.registrarServer,this.expires=t.configuration.registerExpires,this.contact=t.contact.toString(),this.contact+=";reg-id=1",this.contact+=';+sip.instance="<urn:uuid:'+t.configuration.instanceId+'>"',this.call_id=e.Utils.createRandomToken(22),this.cseq=Math.floor(1e4*Math.random()),this.to_uri=t.configuration.uri,n.to_uri=this.to_uri,n.to_displayName=t.configuration.displayName,n.call_id=this.call_id,n.cseq=this.cseq,e.Utils.augment(this,e.ClientContext,[t,"REGISTER",this.registrar,{params:n}]),this.registrationTimer=null,this.registrationExpiredTimer=null,this.registered=!1,this.logger=t.getLogger("sip.registercontext"),t.on("transportCreated",function(e){e.on("disconnected",this.onTransportDisconnected.bind(this))}.bind(this))}).prototype=Object.create({},{register:{writable:!0,value:function(t){var n,i=this;this.options=t||{},(n=(this.options.extraHeaders||[]).slice()).push("Contact: "+this.contact+";expires="+this.expires),n.push("Allow: "+e.UA.C.ALLOWED_METHODS.toString()),this.closeHeaders=this.options.closeWithHeaders?(this.options.extraHeaders||[]).slice():[],this.receiveResponse=function(t){var n,r,s,o=t.getHeaders("contact").length;if(t.cseq===this.cseq)switch(null!==this.registrationTimer&&(e.Timers.clearTimeout(this.registrationTimer),this.registrationTimer=null),!0){case/^1[0-9]{2}$/.test(t.status_code):this.emit("progress",t);break;case/^2[0-9]{2}$/.test(t.status_code):if(this.emit("accepted",t),t.hasHeader("expires")&&(r=t.getHeader("expires")),null!==this.registrationExpiredTimer&&(e.Timers.clearTimeout(this.registrationExpiredTimer),this.registrationExpiredTimer=null),!o){this.logger.warn("no Contact header in response to REGISTER, response ignored");break}for(;o--;){if((n=t.parseHeader("contact",o)).uri.user===this.ua.contact.uri.user){r=n.getParam("expires");break}n=null}if(!n){this.logger.warn("no Contact header pointing to us, response ignored");break}r||(r=this.expires),this.registrationTimer=e.Timers.setTimeout(function(){i.registrationTimer=null,i.register(i.options)},1e3*r-3e3),this.registrationExpiredTimer=e.Timers.setTimeout(function(){i.logger.warn("registration expired"),i.registered&&i.unregistered(null,e.C.causes.EXPIRES)},1e3*r),n.hasParam("temp-gruu")&&(this.ua.contact.temp_gruu=e.URI.parse(n.getParam("temp-gruu").replace(/"/g,""))),n.hasParam("pub-gruu")&&(this.ua.contact.pub_gruu=e.URI.parse(n.getParam("pub-gruu").replace(/"/g,""))),this.registered=!0,this.emit("registered",t||null);break;case/^423$/.test(t.status_code):t.hasHeader("min-expires")?(this.expires=t.getHeader("min-expires"),this.register(this.options)):(this.logger.warn("423 response received for REGISTER without Min-Expires"),this.registrationFailure(t,e.C.causes.SIP_FAILURE_CODE));break;default:s=e.Utils.sipErrorCause(t.status_code),this.registrationFailure(t,s)}},this.onRequestTimeout=function(){this.registrationFailure(null,e.C.causes.REQUEST_TIMEOUT)},this.onTransportError=function(){this.registrationFailure(null,e.C.causes.CONNECTION_ERROR)},this.cseq++,this.request.cseq=this.cseq,this.request.setHeader("cseq",this.cseq+" REGISTER"),this.request.extraHeaders=n,this.send()}},registrationFailure:{writable:!0,value:function(e,t){this.emit("failed",e||null,t||null)}},onTransportDisconnected:{writable:!0,value:function(){this.registered_before=this.registered,null!==this.registrationTimer&&(e.Timers.clearTimeout(this.registrationTimer),this.registrationTimer=null),null!==this.registrationExpiredTimer&&(e.Timers.clearTimeout(this.registrationExpiredTimer),this.registrationExpiredTimer=null),this.registered&&this.unregistered(null,e.C.causes.CONNECTION_ERROR)}},onTransportConnected:{writable:!0,value:function(){this.register(this.options)}},close:{writable:!0,value:function(){var e={all:!1,extraHeaders:this.closeHeaders};this.registered_before=this.registered,this.registered&&this.unregister(e)}},unregister:{writable:!0,value:function(t){var n;t=t||{},this.registered||t.all||this.logger.warn("Already unregistered, but sending an unregister anyways."),n=(t.extraHeaders||[]).slice(),this.registered=!1,null!==this.registrationTimer&&(e.Timers.clearTimeout(this.registrationTimer),this.registrationTimer=null),t.all?(n.push("Contact: *"),n.push("Expires: 0")):n.push("Contact: "+this.contact+";expires=0"),this.receiveResponse=function(t){var n;switch(!0){case/^1[0-9]{2}$/.test(t.status_code):this.emit("progress",t);break;case/^2[0-9]{2}$/.test(t.status_code):this.emit("accepted",t),null!==this.registrationExpiredTimer&&(e.Timers.clearTimeout(this.registrationExpiredTimer),this.registrationExpiredTimer=null),this.unregistered(t);break;default:n=e.Utils.sipErrorCause(t.status_code),this.unregistered(t,n)}},this.onRequestTimeout=function(){},this.cseq++,this.request.cseq=this.cseq,this.request.setHeader("cseq",this.cseq+" REGISTER"),this.request.extraHeaders=n,this.send()}},unregistered:{writable:!0,value:function(e,t){this.registered=!1,this.emit("unregistered",e||null,t||null)}}}),e.RegisterContext=t}},function(e,t,n){"use strict";e.exports=function(e){var t=function(){};return t.prototype=Object.create(e.prototype,{close:{value:function(){}},getDescription:{value:function(e,t){}},hasDescription:{value:function(e){}},holdModifier:{value:function(e){}},setDescription:{value:function(e,t,n){}},sendDtmf:{value:function(e,t){}},getDirection:{value:function(){}}}),t}},function(e,t,n){"use strict";e.exports=function(e){var t;((t=function(t,n,i,r){var s=i;if(void 0===i)throw new TypeError("Not enough arguments");if(this.ua=t,this.logger=t.getLogger("sip.clientcontext"),this.method=n,!(i=t.normalizeTarget(i)))throw new TypeError("Invalid target: "+s);(r=Object.create(r||Object.prototype)).extraHeaders=(r.extraHeaders||[]).slice(),this.request=new e.OutgoingRequest(this.method,i,this.ua,r.params,r.extraHeaders),r.body&&(this.body={},this.body.body=r.body,r.contentType&&(this.body.contentType=r.contentType),this.request.body=this.body),this.localIdentity=this.request.from,this.remoteIdentity=this.request.to,this.data={}}).prototype=Object.create(e.EventEmitter.prototype)).send=function(){return new e.RequestSender(this,this.ua).send(),this},t.prototype.cancel=function(t){(t=t||{}).extraHeaders=(t.extraHeaders||[]).slice();var n=e.Utils.getCancelReason(t.status_code,t.reason_phrase);this.request.cancel(n,t.extraHeaders),this.emit("cancel")},t.prototype.receiveResponse=function(t){var n=e.Utils.getReasonPhrase(t.status_code);switch(!0){case/^1[0-9]{2}$/.test(t.status_code):this.emit("progress",t,n);break;case/^2[0-9]{2}$/.test(t.status_code):this.ua.applicants[this]&&delete this.ua.applicants[this],this.emit("accepted",t,n);break;default:this.ua.applicants[this]&&delete this.ua.applicants[this],this.emit("rejected",t,n),this.emit("failed",t,n)}},t.prototype.onRequestTimeout=function(){this.emit("failed",null,e.C.causes.REQUEST_TIMEOUT)},t.prototype.onTransportError=function(){this.emit("failed",null,e.C.causes.CONNECTION_ERROR)},e.ClientContext=t}},function(e,t,n){"use strict";e.exports=function(e){var t;((t=function(t,n){this.ua=t,this.logger=t.getLogger("sip.servercontext"),this.request=n,n.method===e.C.INVITE?this.transaction=new e.Transactions.InviteServerTransaction(n,t):this.transaction=new e.Transactions.NonInviteServerTransaction(n,t),n.body&&(this.body=n.body),n.hasHeader("Content-Type")&&(this.contentType=n.getHeader("Content-Type")),this.method=n.method,this.data={},this.localIdentity=n.to,this.remoteIdentity=n.from,n.hasHeader("P-Asserted-Identity")&&(this.assertedIdentity=new e.NameAddrHeader.parse(n.getHeader("P-Asserted-Identity")))}).prototype=Object.create(e.EventEmitter.prototype)).progress=function(e){return(e=Object.create(e||Object.prototype)).statusCode||(e.statusCode=180),e.minCode=100,e.maxCode=199,e.events=["progress"],this.reply(e)},t.prototype.accept=function(e){return(e=Object.create(e||Object.prototype)).statusCode||(e.statusCode=200),e.minCode=200,e.maxCode=299,e.events=["accepted"],this.reply(e)},t.prototype.reject=function(e){return(e=Object.create(e||Object.prototype)).statusCode||(e.statusCode=480),e.minCode=300,e.maxCode=699,e.events=["rejected","failed"],this.reply(e)},t.prototype.reply=function(t){var n,i=(t=t||{}).statusCode||100,r=t.minCode||100,s=t.maxCode||699,o=e.Utils.getReasonPhrase(i,t.reasonPhrase),a=t.extraHeaders||[],u=t.body,l=t.events||[];if(i<r||i>s)throw new TypeError("Invalid statusCode: "+i);return n=this.request.reply(i,o,a,u),l.forEach(function(e){this.emit(e,n,o)},this),this},t.prototype.onRequestTimeout=function(){this.emit("failed",null,e.C.causes.REQUEST_TIMEOUT)},t.prototype.onTransportError=function(){this.emit("failed",null,e.C.causes.CONNECTION_ERROR)},e.ServerContext=t}},function(e,t,n){"use strict";e.exports=function(e){var t,i,r,s,o,a=n(24)(e),u={STATUS_NULL:0,STATUS_INVITE_SENT:1,STATUS_1XX_RECEIVED:2,STATUS_INVITE_RECEIVED:3,STATUS_WAITING_FOR_ANSWER:4,STATUS_ANSWERED:5,STATUS_WAITING_FOR_PRACK:6,STATUS_WAITING_FOR_ACK:7,STATUS_CANCELED:8,STATUS_TERMINATED:9,STATUS_ANSWERED_WAITING_FOR_PRACK:10,STATUS_EARLY_MEDIA:11,STATUS_CONFIRMED:12};(t=function(t){if(this.status=u.STATUS_NULL,this.dialog=null,this.pendingReinvite=!1,this.earlyDialogs={},!t)throw new e.Exceptions.SessionDescriptionHandlerMissing("A session description handler is required for the session to function");this.sessionDescriptionHandlerFactory=t,this.hasOffer=!1,this.hasAnswer=!1,this.timers={ackTimer:null,expiresTimer:null,invite2xxTimer:null,userNoAnswerTimer:null,rel1xxTimer:null,prackTimer:null},this.startTime=null,this.endTime=null,this.tones=null,this.local_hold=!1,this.early_sdp=null,this.rel100=e.C.supported.UNSUPPORTED}).prototype={dtmf:function(t,n){var i=[],r=this,s=this.ua.configuration.dtmfType;if(n=n||{},void 0===t)throw new TypeError("Not enough arguments");if(this.status!==u.STATUS_CONFIRMED&&this.status!==u.STATUS_WAITING_FOR_ACK)throw new e.Exceptions.InvalidStateError(this.status);if("string"!=typeof t&&"number"!=typeof t||!t.toString().match(/^[0-9A-D#*,]+$/i))throw new TypeError("Invalid tones: "+t);var o=function(){var t,i;if(r.status===u.STATUS_TERMINATED||!r.tones||0===r.tones.length)return r.tones=null,this;(t=r.tones.shift()).on("failed",function(){r.tones=null}),t.send(n),i=t.duration+t.interToneGap,e.Timers.setTimeout(o,i)};(t=t.toString(),s===e.C.dtmfType.RTP)&&(this.sessionDescriptionHandler.sendDtmf(t,n)||(this.logger.warn("Attempt to use dtmfType 'RTP' has failed, falling back to INFO packet method"),s=e.C.dtmfType.INFO));if(s===e.C.dtmfType.INFO){for(t=t.split("");t.length>0;)i.push(new a(this,t.shift(),n));if(this.tones)return this.tones=this.tones.concat(i),this;this.tones=i,o()}return this},bye:function(t){var n=(t=Object.create(t||Object.prototype)).statusCode;if(this.status===u.STATUS_TERMINATED)return this.logger.error("Error: Attempted to send BYE in a terminated session."),this;if(this.logger.log("terminating Session"),n&&(n<200||n>=700))throw new TypeError("Invalid statusCode: "+n);return t.receiveResponse=function(){},this.sendRequest(e.C.BYE,t).terminated()},refer:function(t,n){if(n=n||{},this.status!==u.STATUS_CONFIRMED)throw new e.Exceptions.InvalidStateError(this.status);this.referContext=new e.ReferClientContext(this.ua,this,t,n),this.emit("referRequested",this.referContext),this.referContext.refer(n)},sendRequest:function(t,n){n=n||{};var i=this,r=new e.OutgoingRequest(t,this.dialog.remote_target,this.ua,{cseq:n.cseq||(this.dialog.local_seqnum+=1),call_id:this.dialog.id.call_id,from_uri:this.dialog.local_uri,from_tag:this.dialog.id.local_tag,to_uri:this.dialog.remote_uri,to_tag:this.dialog.id.remote_tag,route_set:this.dialog.route_set,statusCode:n.statusCode,reasonPhrase:n.reasonPhrase},n.extraHeaders||[],n.body);return new e.RequestSender({request:r,onRequestTimeout:function(){i.onRequestTimeout()},onTransportError:function(){i.onTransportError()},receiveResponse:n.receiveResponse||function(e){i.receiveNonInviteResponse(e)}},this.ua).send(),this.emit(t.toLowerCase(),r),this},close:function(){var t;if(this.status===u.STATUS_TERMINATED)return this;for(t in this.logger.log("closing INVITE session "+this.id),this.sessionDescriptionHandler&&this.sessionDescriptionHandler.close(),this.timers)e.Timers.clearTimeout(this.timers[t]);for(t in this.dialog&&(this.dialog.terminate(),delete this.dialog),this.earlyDialogs)this.earlyDialogs[t].terminate(),delete this.earlyDialogs[t];return this.status=u.STATUS_TERMINATED,this.ua.transport.removeListener("transportError",this.errorListener),delete this.ua.sessions[this.id],this},createDialog:function(t,n,i){var r,s,o=t["UAS"===n?"to_tag":"from_tag"],a=t["UAS"===n?"from_tag":"to_tag"],u=t.call_id+o+a;if(s=this.earlyDialogs[u],i)return!!s||((s=new e.Dialog(this,t,n,e.Dialog.C.STATUS_EARLY)).error?(this.logger.error(s.error),this.failed(t,e.C.causes.INTERNAL_ERROR),!1):(this.earlyDialogs[u]=s,!0));if(s){for(var l in s.update(t,n),this.dialog=s,delete this.earlyDialogs[u],this.earlyDialogs)this.earlyDialogs[l].terminate(),delete this.earlyDialogs[l];return!0}return(r=new e.Dialog(this,t,n)).error?(this.logger.error(r.error),this.failed(t,e.C.causes.INTERNAL_ERROR),!1):(this.to_tag=t.to_tag,this.dialog=r,!0)},hold:function(t,n){if(this.status!==u.STATUS_WAITING_FOR_ACK&&this.status!==u.STATUS_CONFIRMED)throw new e.Exceptions.InvalidStateError(this.status);this.local_hold?this.logger.log("Session is already on hold, cannot put it on hold again"):((t=t||{}).modifiers=n||[],t.modifiers.push(this.sessionDescriptionHandler.holdModifier),this.local_hold=!0,this.sendReinvite(t))},unhold:function(t,n){if(this.status!==u.STATUS_WAITING_FOR_ACK&&this.status!==u.STATUS_CONFIRMED)throw new e.Exceptions.InvalidStateError(this.status);this.local_hold?(t=t||{},n&&(t.modifiers=n),this.local_hold=!1,this.sendReinvite(t)):this.logger.log("Session is not on hold, cannot unhold it")},reinvite:function(e,t){return e=e||{},t&&(e.modifiers=t),this.sendReinvite(e)},receiveReinvite:function(t){var n,i=this;if(i.emit("reinvite",this),t.hasHeader("P-Asserted-Identity")&&(this.assertedIdentity=new e.NameAddrHeader.parse(t.getHeader("P-Asserted-Identity"))),"0"!==t.getHeader("Content-Length")||t.getHeader("Content-Type")){if(!this.sessionDescriptionHandler.hasDescription(t.getHeader("Content-Type")))return t.reply(415),void this.emit("reinviteFailed",i);n=this.sessionDescriptionHandler.setDescription(t.body,this.sessionDescriptionHandlerOptions,this.modifiers).then(this.sessionDescriptionHandler.getDescription.bind(this.sessionDescriptionHandler,this.sessionDescriptionHandlerOptions,this.modifiers))}else n=this.sessionDescriptionHandler.getDescription(this.sessionDescriptionHandlerOptions,this.modifiers);this.receiveRequest=function(t){t.method===e.C.ACK&&this.status===u.STATUS_WAITING_FOR_ACK?this.sessionDescriptionHandler.hasDescription(t.getHeader("Content-Type"))?(this.hasAnswer=!0,this.sessionDescriptionHandler.setDescription(t.body,this.sessionDescriptionHandlerOptions,this.modifiers).then(function(){e.Timers.clearTimeout(this.timers.ackTimer),e.Timers.clearTimeout(this.timers.invite2xxTimer),this.status=u.STATUS_CONFIRMED,this.emit("confirmed",t)}.bind(this))):(e.Timers.clearTimeout(this.timers.ackTimer),e.Timers.clearTimeout(this.timers.invite2xxTimer),this.status=u.STATUS_CONFIRMED,this.emit("confirmed",t)):e.Session.prototype.receiveRequest.apply(this,[t])}.bind(this),n.catch(function(n){var r;throw n instanceof e.Exceptions.SessionDescriptionHandlerError?r=500:n instanceof e.Exceptions.RenegotiationError?(i.emit("renegotiationError",n),i.logger.warn(n),r=488):(i.logger.error(n),r=488),t.reply(r),i.emit("reinviteFailed",i),n}).then(function(e){var n=["Contact: "+i.contact];t.reply(200,null,n,e,function(){i.status=u.STATUS_WAITING_FOR_ACK,i.setACKTimer(),i.emit("reinviteAccepted",i)})})},sendReinvite:function(t){if(this.pendingReinvite)this.logger.warn("Reinvite in progress. Please wait until complete, then try again.");else{this.pendingReinvite=!0,(t=t||{}).modifiers=t.modifiers||[];var n=this,i=(t.extraHeaders||[]).slice();i.push("Contact: "+this.contact),i.push("Allow: "+e.UA.C.ALLOWED_METHODS.toString()),this.sessionDescriptionHandler.getDescription(t.sessionDescriptionHandlerOptions,t.modifiers).then(function(t){n.sendRequest(e.C.INVITE,{extraHeaders:i,body:t,receiveResponse:n.receiveReinviteResponse.bind(n)})}).catch(function(t){if(t instanceof e.Exceptions.RenegotiationError)return n.pendingReinvite=!1,n.emit("renegotiationError",t),n.logger.warn("Renegotiation Error"),void n.logger.warn(t);n.logger.error("sessionDescriptionHandler error"),n.logger.error(t)})}},receiveRequest:function(t){switch(t.method){case e.C.BYE:t.reply(200),this.status===u.STATUS_CONFIRMED&&(this.emit("bye",t),this.terminated(t,e.C.causes.BYE));break;case e.C.INVITE:this.status===u.STATUS_CONFIRMED&&(this.logger.log("re-INVITE received"),this.receiveReinvite(t));break;case e.C.INFO:if(this.status===u.STATUS_CONFIRMED||this.status===u.STATUS_WAITING_FOR_ACK){if(this.onInfo)return this.onInfo(t);var n,i,r,s=t.getHeader("content-type"),o=/^(Signal\s*?=\s*?)([0-9A-D#*]{1})(\s)?.*/,l=/^(Duration\s?=\s?)([0-9]{1,4})(\s)?.*/;s&&(s.match(/^application\/dtmf-relay/i)?(t.body&&2===(n=t.body.split("\r\n",2)).length&&(o.test(n[0])&&(i=n[0].replace(o,"$2")),l.test(n[1])&&(r=parseInt(n[1].replace(l,"$2"),10))),new a(this,i,{duration:r}).init_incoming(t)):t.reply(415,null,["Accept: application/dtmf-relay"]))}break;case e.C.REFER:if(this.status===u.STATUS_CONFIRMED)if(this.logger.log("REFER received"),this.referContext=new e.ReferServerContext(this.ua,t),this.listeners("referRequested").length)this.emit("referRequested",this.referContext);else{this.logger.log("No referRequested listeners, automatically accepting and following the refer");var c={followRefer:!0};this.passedOptions&&(c.inviteOptions=this.passedOptions),this.referContext.accept(c,this.modifiers)}break;case e.C.NOTIFY:if(this.referContext&&this.referContext instanceof e.ReferClientContext&&t.hasHeader("event")&&/^refer(;.*)?$/.test(t.getHeader("event")))return void this.referContext.receiveNotify(t);t.reply(200,"OK"),this.emit("notify",t)}},receiveReinviteResponse:function(t){var n=this;if(this.status!==u.STATUS_TERMINATED)if(this.pendingReinvite)switch(!0){case/^1[0-9]{2}$/.test(t.status_code):break;case/^2[0-9]{2}$/.test(t.status_code):if(this.status=u.STATUS_CONFIRMED,this.emit("ack",t.transaction.sendACK()),this.pendingReinvite=!1,e.Timers.clearTimeout(n.timers.invite2xxTimer),!this.sessionDescriptionHandler.hasDescription(t.getHeader("Content-Type"))){this.logger.error("2XX response received to re-invite but did not have a description"),this.emit("reinviteFailed",n),this.emit("renegotiationError",new e.Exceptions.RenegotiationError("2XX response received to re-invite but did not have a description"));break}this.sessionDescriptionHandler.setDescription(t.body,this.sessionDescriptionHandlerOptions,this.modifiers).catch(function(t){n.logger.error("Could not set the description in 2XX response"),n.logger.error(t),n.emit("reinviteFailed",n),n.emit("renegotiationError",t),n.sendRequest(e.C.BYE,{extraHeaders:["Reason: "+e.Utils.getReasonHeaderValue(488,"Not Acceptable Here")]}),n.terminated(null,e.C.causes.INCOMPATIBLE_SDP)}).then(function(){n.emit("reinviteAccepted",n)});break;default:this.pendingReinvite=!1,this.logger.log("Received a non 1XX or 2XX response to a re-invite"),this.emit("reinviteFailed",n),this.emit("renegotiationError",new e.Exceptions.RenegotiationError("Invalid response to a re-invite"))}else this.logger.error("Received reinvite response, but have no pending reinvite");else this.logger.error("Received reinvite response, but in STATUS_TERMINATED")},acceptAndTerminate:function(t,n,i){var r=[];return n&&r.push("Reason: "+e.Utils.getReasonHeaderValue(n,i)),(this.dialog||this.createDialog(t,"UAC"))&&(this.emit("ack",t.transaction.sendACK()),this.sendRequest(e.C.BYE,{extraHeaders:r})),this},setInvite2xxTimer:function(t,n){var i=this,r=e.Timers.T1;this.timers.invite2xxTimer=e.Timers.setTimeout(function s(){if(i.status===u.STATUS_WAITING_FOR_ACK){i.logger.log("no ACK received, attempting to retransmit OK");var o=["Contact: "+i.contact];t.reply(200,null,o,n),r=Math.min(2*r,e.Timers.T2),i.timers.invite2xxTimer=e.Timers.setTimeout(s,r)}},r)},setACKTimer:function(){var t=this;this.timers.ackTimer=e.Timers.setTimeout(function(){t.status===u.STATUS_WAITING_FOR_ACK&&(t.logger.log("no ACK received for an extended period of time, terminating the call"),e.Timers.clearTimeout(t.timers.invite2xxTimer),t.sendRequest(e.C.BYE),t.terminated(null,e.C.causes.NO_ACK))},e.Timers.TIMER_H)},onTransportError:function(){this.status!==u.STATUS_CONFIRMED&&this.status!==u.STATUS_TERMINATED&&this.failed(null,e.C.causes.CONNECTION_ERROR)},onRequestTimeout:function(){this.status===u.STATUS_CONFIRMED?this.terminated(null,e.C.causes.REQUEST_TIMEOUT):this.status!==u.STATUS_TERMINATED&&(this.failed(null,e.C.causes.REQUEST_TIMEOUT),this.terminated(null,e.C.causes.REQUEST_TIMEOUT))},onDialogError:function(t){this.status===u.STATUS_CONFIRMED?this.terminated(t,e.C.causes.DIALOG_ERROR):this.status!==u.STATUS_TERMINATED&&(this.failed(t,e.C.causes.DIALOG_ERROR),this.terminated(t,e.C.causes.DIALOG_ERROR))},failed:function(e,t){return this.status===u.STATUS_TERMINATED?this:(this.emit("failed",e||null,t||null),this)},rejected:function(e,t){return this.emit("rejected",e||null,t||null),this},canceled:function(){return this.sessionDescriptionHandler&&this.sessionDescriptionHandler.close(),this.emit("cancel"),this},accepted:function(t,n){return n=e.Utils.getReasonPhrase(t&&t.status_code,n),this.startTime=new Date,this.replacee&&(this.replacee.emit("replaced",this),this.replacee.terminate()),this.emit("accepted",t,n),this},terminated:function(e,t){return this.status===u.STATUS_TERMINATED?this:(this.endTime=new Date,this.close(),this.emit("terminated",e||null,t||null),this)},connecting:function(e){return this.emit("connecting",{request:e}),this}},t.C=u,e.Session=t,(i=function(t,n){var i,r=this,s=n.getHeader("Content-Type"),o=n.parseHeader("Content-Disposition");function a(e,t){n.hasHeader(e)&&n.getHeader(e).toLowerCase().indexOf("100rel")>=0&&(r.rel100=t)}if(e.Utils.augment(this,e.ServerContext,[t,n]),e.Utils.augment(this,e.Session,[t.configuration.sessionDescriptionHandlerFactory]),o&&"render"===o.type&&(this.renderbody=n.body,this.rendertype=s),this.status=u.STATUS_INVITE_RECEIVED,this.from_tag=n.from_tag,this.id=n.call_id+this.from_tag,this.request=n,this.contact=this.ua.contact.toString(),this.receiveNonInviteResponse=function(){},this.logger=t.getLogger("sip.inviteservercontext",this.id),this.ua.sessions[this.id]=this,n.hasHeader("expires")&&(i=1e3*n.getHeader("expires")),a("require",e.C.supported.REQUIRED),a("supported",e.C.supported.SUPPORTED),n.to_tag=e.Utils.newTag(),this.createDialog(n,"UAS",!0)){var l={extraHeaders:["Contact: "+r.contact]};r.rel100!==e.C.supported.REQUIRED&&r.progress(l),r.status=u.STATUS_WAITING_FOR_ANSWER,r.timers.userNoAnswerTimer=e.Timers.setTimeout(function(){n.reply(408),r.failed(n,e.C.causes.NO_ANSWER),r.terminated(n,e.C.causes.NO_ANSWER)},r.ua.configuration.noAnswerTimeout),i&&(r.timers.expiresTimer=e.Timers.setTimeout(function(){r.status===u.STATUS_WAITING_FOR_ANSWER&&(n.reply(487),r.failed(n,e.C.causes.EXPIRES),r.terminated(n,e.C.causes.EXPIRES))},i)),this.errorListener=this.onTransportError.bind(this),t.transport.on("transportError",this.errorListener)}else n.reply(500,"Missing Contact header field")}).prototype=Object.create({},{reject:{writable:!0,value:function(t){if(this.status===u.STATUS_TERMINATED)throw new e.Exceptions.InvalidStateError(this.status);return this.logger.log("rejecting RTCSession"),e.ServerContext.prototype.reject.call(this,t),this.terminated()}},terminate:{writable:!0,value:function(t){var n,i=((t=t||{}).extraHeaders||[]).slice(),r=t.body,s=this;return this.status===u.STATUS_WAITING_FOR_ACK&&this.request.server_transaction.state!==e.Transactions.C.STATUS_TERMINATED?(n=this.dialog,this.receiveRequest=function(t){t.method===e.C.ACK&&(this.sendRequest(e.C.BYE,{extraHeaders:i,body:r}),n.terminate())},this.request.server_transaction.on("stateChanged",function(){this.state===e.Transactions.C.STATUS_TERMINATED&&this.dialog&&(this.request=new e.OutgoingRequest(e.C.BYE,this.dialog.remote_target,this.ua,{cseq:this.dialog.local_seqnum+=1,call_id:this.dialog.id.call_id,from_uri:this.dialog.local_uri,from_tag:this.dialog.id.local_tag,to_uri:this.dialog.remote_uri,to_tag:this.dialog.id.remote_tag,route_set:this.dialog.route_set},i,r),new e.RequestSender({request:this.request,onRequestTimeout:function(){s.onRequestTimeout()},onTransportError:function(){s.onTransportError()},receiveResponse:function(){}},this.ua).send(),n.terminate())}),this.emit("bye",this.request),this.terminated(),this.dialog=n,this.ua.dialogs[n.id.toString()]=n):this.status===u.STATUS_CONFIRMED?this.bye(t):this.reject(t),this}},progress:{writable:!0,value:function(t){var n,i=(t=t||{}).statusCode||180,r=t.reasonPhrase,s=(t.extraHeaders||[]).slice(),o=t.body;if(i<100||i>199)throw new TypeError("Invalid statusCode: "+i);if(this.isCanceled||this.status===u.STATUS_TERMINATED)return this;function a(){i=t.statusCode||183,this.status=u.STATUS_WAITING_FOR_PRACK,s.push("Contact: "+this.contact),s.push("Require: 100rel"),s.push("RSeq: "+Math.floor(1e4*Math.random())),this.sessionDescriptionHandler.getDescription(t.sessionDescriptionHandlerOptions,t.modifiers).then(function(t){if(!this.isCanceled&&this.status!==u.STATUS_TERMINATED){this.early_sdp=t.body,this[this.hasOffer?"hasAnswer":"hasOffer"]=!0;var o=e.Timers.T1;this.timers.rel1xxTimer=e.Timers.setTimeout(function n(){this.request.reply(i,null,s,t),o*=2,this.timers.rel1xxTimer=e.Timers.setTimeout(n.bind(this),o)}.bind(this),o),this.timers.prackTimer=e.Timers.setTimeout(function(){this.status===u.STATUS_WAITING_FOR_PRACK&&(this.logger.log("no PRACK received, rejecting the call"),e.Timers.clearTimeout(this.timers.rel1xxTimer),this.request.reply(504),this.terminated(null,e.C.causes.NO_PRACK))}.bind(this),64*e.Timers.T1),n=this.request.reply(i,r,s,t),this.emit("progress",n,r)}}.bind(this),function(){this.request.reply(480),this.failed(null,e.C.causes.WEBRTC_ERROR),this.terminated(null,e.C.causes.WEBRTC_ERROR)}.bind(this))}return 100!==t.statusCode&&(this.rel100===e.C.supported.REQUIRED||this.rel100===e.C.supported.SUPPORTED&&t.rel100||this.rel100===e.C.supported.SUPPORTED&&this.ua.configuration.rel100===e.C.supported.REQUIRED)?(this.sessionDescriptionHandler=this.setupSessionDescriptionHandler(),this.emit("SessionDescriptionHandler-created",this.sessionDescriptionHandler),this.sessionDescriptionHandler.hasDescription(this.request.getHeader("Content-Type"))?(this.hasOffer=!0,this.sessionDescriptionHandler.setDescription(this.request.body,t.sessionDescriptionHandlerOptions,t.modifiers).then(a.apply(this)).catch(function(t){this.logger.warn("invalid description"),this.logger.warn(t),this.failed(null,e.C.causes.WEBRTC_ERROR),this.terminated(null,e.C.causes.WEBRTC_ERROR)}.bind(this))):a.apply(this)):function(){n=this.request.reply(i,r,s,o),this.emit("progress",n,r)}.apply(this),this}},accept:{writable:!0,value:function(t){t=t||{},this.onInfo=t.onInfo;var n=this,i=this.request,r=(t.extraHeaders||[]).slice(),s=function(t){var s;r.push("Contact: "+n.contact),r.push("Allow: "+e.UA.C.ALLOWED_METHODS.toString()),n.hasOffer?n.hasAnswer=!0:n.hasOffer=!0,s=i.reply(200,null,r,t,function(){n.status=u.STATUS_WAITING_FOR_ACK,n.setInvite2xxTimer(i,t),n.setACKTimer()},function(){n.failed(null,e.C.causes.CONNECTION_ERROR),n.terminated(null,e.C.causes.CONNECTION_ERROR)}),n.status!==u.STATUS_TERMINATED&&n.accepted(s,e.Utils.getReasonPhrase(200))},o=function(t){t instanceof e.Exceptions.SessionDescriptionHandlerError&&(n.logger.log(t.message),n.logger.log(t.error)),n.status!==u.STATUS_TERMINATED&&(n.request.reply(480),n.failed(null,e.C.causes.WEBRTC_ERROR),n.terminated(null,e.C.causes.WEBRTC_ERROR))};if(this.status===u.STATUS_WAITING_FOR_PRACK)return this.status=u.STATUS_ANSWERED_WAITING_FOR_PRACK,this;if(this.status===u.STATUS_WAITING_FOR_ANSWER)this.status=u.STATUS_ANSWERED;else if(this.status!==u.STATUS_EARLY_MEDIA)throw new e.Exceptions.InvalidStateError(this.status);if(!this.createDialog(i,"UAS"))return i.reply(500,"Missing Contact header field"),this;if(e.Timers.clearTimeout(this.timers.userNoAnswerTimer),this.status===u.STATUS_EARLY_MEDIA)s({});else if(this.sessionDescriptionHandler=this.setupSessionDescriptionHandler(),this.emit("SessionDescriptionHandler-created",this.sessionDescriptionHandler),"0"!==this.request.getHeader("Content-Length")||this.request.getHeader("Content-Type")){if(!this.sessionDescriptionHandler.hasDescription(this.request.getHeader("Content-Type")))return void this.request.reply(415);this.hasOffer=!0,this.sessionDescriptionHandler.setDescription(this.request.body,t.sessionDescriptionHandlerOptions,t.modifiers).then(function(){return this.sessionDescriptionHandler.getDescription(t.sessionDescriptionHandlerOptions,t.modifiers)}.bind(this)).catch(o).then(s)}else this.sessionDescriptionHandler.getDescription(t.sessionDescriptionHandlerOptions,t.modifiers).catch(o).then(s);return this}},receiveRequest:{writable:!0,value:function(n){function i(){var t,i;e.Timers.clearTimeout(this.timers.ackTimer),e.Timers.clearTimeout(this.timers.invite2xxTimer),this.status=u.STATUS_CONFIRMED,t=n.getHeader("Content-Type"),(i=n.getHeader("Content-Disposition"))&&"render"===i.type&&(this.renderbody=n.body,this.rendertype=t),this.emit("confirmed",n)}switch(n.method){case e.C.CANCEL:this.status!==u.STATUS_WAITING_FOR_ANSWER&&this.status!==u.STATUS_WAITING_FOR_PRACK&&this.status!==u.STATUS_ANSWERED_WAITING_FOR_PRACK&&this.status!==u.STATUS_EARLY_MEDIA&&this.status!==u.STATUS_ANSWERED||(this.status=u.STATUS_CANCELED,this.request.reply(487),this.canceled(n),this.rejected(n,e.C.causes.CANCELED),this.failed(n,e.C.causes.CANCELED),this.terminated(n,e.C.causes.CANCELED));break;case e.C.ACK:this.status===u.STATUS_WAITING_FOR_ACK&&(this.sessionDescriptionHandler.hasDescription(n.getHeader("Content-Type"))?(this.hasAnswer=!0,this.sessionDescriptionHandler.setDescription(n.body,this.sessionDescriptionHandlerOptions,this.modifiers).then(i.bind(this),function(t){this.logger.warn(t),this.terminate({statusCode:"488",reasonPhrase:"Bad Media Description"}),this.failed(n,e.C.causes.BAD_MEDIA_DESCRIPTION),this.terminated(n,e.C.causes.BAD_MEDIA_DESCRIPTION)}.bind(this))):i.apply(this));break;case e.C.PRACK:this.status===u.STATUS_WAITING_FOR_PRACK||this.status===u.STATUS_ANSWERED_WAITING_FOR_PRACK?this.hasAnswer?(e.Timers.clearTimeout(this.timers.rel1xxTimer),e.Timers.clearTimeout(this.timers.prackTimer),n.reply(200),this.status===u.STATUS_ANSWERED_WAITING_FOR_PRACK&&(this.status=u.STATUS_EARLY_MEDIA,this.accept()),this.status=u.STATUS_EARLY_MEDIA):(this.sessionDescriptionHandler=this.setupSessionDescriptionHandler(),this.emit("SessionDescriptionHandler-created",this.sessionDescriptionHandler),this.sessionDescriptionHandler.hasDescription(n.getHeader("Content-Type"))?(this.hasAnswer=!0,this.sessionDescriptionHandler.setDescription(n.body,this.sessionDescriptionHandlerOptions,this.modifiers).then(function(){e.Timers.clearTimeout(this.timers.rel1xxTimer),e.Timers.clearTimeout(this.timers.prackTimer),n.reply(200),this.status===u.STATUS_ANSWERED_WAITING_FOR_PRACK&&(this.status=u.STATUS_EARLY_MEDIA,this.accept()),this.status=u.STATUS_EARLY_MEDIA}.bind(this),function(t){this.logger.warn(t),this.terminate({statusCode:"488",reasonPhrase:"Bad Media Description"}),this.failed(n,e.C.causes.BAD_MEDIA_DESCRIPTION),this.terminated(n,e.C.causes.BAD_MEDIA_DESCRIPTION)}.bind(this))):(this.terminate({statusCode:"488",reasonPhrase:"Bad Media Description"}),this.failed(n,e.C.causes.BAD_MEDIA_DESCRIPTION),this.terminated(n,e.C.causes.BAD_MEDIA_DESCRIPTION))):this.status===u.STATUS_EARLY_MEDIA&&n.reply(200);break;default:t.prototype.receiveRequest.apply(this,[n])}}},setupSessionDescriptionHandler:{writable:!0,value:function(){return this.sessionDescriptionHandler?this.sessionDescriptionHandler:this.sessionDescriptionHandlerFactory(this,this.ua.configuration.sessionDescriptionHandlerFactoryOptions)}},onTransportError:{writable:!0,value:function(){this.status!==u.STATUS_CONFIRMED&&this.status!==u.STATUS_TERMINATED&&this.failed(null,e.C.causes.CONNECTION_ERROR)}},onRequestTimeout:{writable:!0,value:function(){this.status===u.STATUS_CONFIRMED?this.terminated(null,e.C.causes.REQUEST_TIMEOUT):this.status!==u.STATUS_TERMINATED&&(this.failed(null,e.C.causes.REQUEST_TIMEOUT),this.terminated(null,e.C.causes.REQUEST_TIMEOUT))}}}),e.InviteServerContext=i,(r=function(t,n,i,r){i=i||{},this.passedOptions=i,i.params=Object.create(i.params||Object.prototype);var s=(i.extraHeaders||[]).slice(),o=t.configuration.sessionDescriptionHandlerFactory;if(this.sessionDescriptionHandlerFactoryOptions=t.configuration.sessionDescriptionHandlerFactoryOptions||{},this.sessionDescriptionHandlerOptions=i.sessionDescriptionHandlerOptions||{},this.modifiers=r,this.inviteWithoutSdp=i.inviteWithoutSdp||!1,this.anonymous=i.anonymous||!1,this.renderbody=i.renderbody||null,this.rendertype=i.rendertype||"text/plain",this.from_tag=e.Utils.newTag(),i.params.from_tag=this.from_tag,this.contact=t.contact.toString({anonymous:this.anonymous,outbound:this.anonymous?!t.contact.temp_gruu:!t.contact.pub_gruu}),this.anonymous&&(i.params.from_displayName="Anonymous",i.params.from_uri="sip:anonymous@anonymous.invalid",s.push("P-Preferred-Identity: "+t.configuration.uri.toString()),s.push("Privacy: id")),s.push("Contact: "+this.contact),s.push("Allow: "+e.UA.C.ALLOWED_METHODS.toString()),this.inviteWithoutSdp&&this.renderbody&&(s.push("Content-Type: "+this.rendertype),s.push("Content-Disposition: render;handling=optional")),t.configuration.rel100===e.C.supported.REQUIRED&&s.push("Require: 100rel"),t.configuration.replaces===e.C.supported.REQUIRED&&s.push("Require: replaces"),i.extraHeaders=s,e.Utils.augment(this,e.ClientContext,[t,e.C.INVITE,n,i]),e.Utils.augment(this,e.Session,[o]),this.status!==u.STATUS_NULL)throw new e.Exceptions.InvalidStateError(this.status);this.isCanceled=!1,this.received_100=!1,this.method=e.C.INVITE,this.receiveNonInviteResponse=this.receiveResponse,this.receiveResponse=this.receiveInviteResponse,this.logger=t.getLogger("sip.inviteclientcontext"),t.applicants[this]=this,this.id=this.request.call_id+this.from_tag,this.onInfo=i.onInfo,this.errorListener=this.onTransportError.bind(this),t.transport.on("transportError",this.errorListener)}).prototype=Object.create({},{invite:{writable:!0,value:function(){var t=this;return this.ua.sessions[this.id]=this,e.Utils.Promise.resolve().then(function(){this.inviteWithoutSdp?(this.request.body=t.renderbody,this.status=u.STATUS_INVITE_SENT,this.send()):(this.sessionDescriptionHandler=this.sessionDescriptionHandlerFactory(this,this.sessionDescriptionHandlerFactoryOptions),this.emit("SessionDescriptionHandler-created",this.sessionDescriptionHandler),this.sessionDescriptionHandler.getDescription(this.sessionDescriptionHandlerOptions,this.modifiers).then(function(e){t.isCanceled||t.status===u.STATUS_TERMINATED||(t.hasOffer=!0,t.request.body=e,t.status=u.STATUS_INVITE_SENT,t.send())},function(n){n instanceof e.Exceptions.SessionDescriptionHandlerError&&(t.logger.log(n.message),t.logger.log(n.error)),t.status!==u.STATUS_TERMINATED&&(t.failed(null,e.C.causes.WEBRTC_ERROR),t.terminated(null,e.C.causes.WEBRTC_ERROR))}))}.bind(this)),this}},receiveInviteResponse:{writable:!0,value:function(t){var n,i=this,r=t.call_id+t.from_tag+t.to_tag,s=[],o={};if(this.status!==u.STATUS_TERMINATED&&t.method===e.C.INVITE){if(this.dialog&&t.status_code>=200&&t.status_code<=299){if(r!==this.dialog.id.toString()){if(!this.createDialog(t,"UAC",!0))return;return this.emit("ack",t.transaction.sendACK({body:e.Utils.generateFakeSDP(t.body)})),this.earlyDialogs[r].sendRequest(this,e.C.BYE),void(this.status!==u.STATUS_CONFIRMED&&(this.failed(t,e.C.causes.WEBRTC_ERROR),this.terminated(t,e.C.causes.WEBRTC_ERROR)))}if(this.status===u.STATUS_CONFIRMED)return void this.emit("ack",t.transaction.sendACK());if(!this.hasAnswer)return}if(this.dialog&&t.status_code<200){if(-1!==this.dialog.pracked.indexOf(t.getHeader("rseq"))||this.dialog.pracked[this.dialog.pracked.length-1]>=t.getHeader("rseq")&&this.dialog.pracked.length>0)return;if(!this.earlyDialogs[r]&&!this.createDialog(t,"UAC",!0))return;if(-1!==this.earlyDialogs[r].pracked.indexOf(t.getHeader("rseq"))||this.earlyDialogs[r].pracked[this.earlyDialogs[r].pracked.length-1]>=t.getHeader("rseq")&&this.earlyDialogs[r].pracked.length>0)return;return s.push("RAck: "+t.getHeader("rseq")+" "+t.getHeader("cseq")),this.earlyDialogs[r].pracked.push(t.getHeader("rseq")),void this.earlyDialogs[r].sendRequest(this,e.C.PRACK,{extraHeaders:s,body:e.Utils.generateFakeSDP(t.body)})}if(this.isCanceled)t.status_code>=100&&t.status_code<200?(this.request.cancel(this.cancelReason,s),this.canceled(null)):t.status_code>=200&&t.status_code<299?(this.acceptAndTerminate(t),this.emit("bye",this.request)):t.status_code>=300&&(n=e.C.REASON_PHRASE[t.status_code]||e.C.causes.CANCELED,this.rejected(t,n),this.failed(t,n),this.terminated(t,n));else switch(!0){case/^100$/.test(t.status_code):this.received_100=!0,this.emit("progress",t);break;case/^1[0-9]{2}$/.test(t.status_code):if(!t.to_tag){this.logger.warn("1xx response received without to tag");break}if(t.hasHeader("contact")&&!this.createDialog(t,"UAC",!0))break;if(this.status=u.STATUS_1XX_RECEIVED,t.hasHeader("P-Asserted-Identity")&&(this.assertedIdentity=new e.NameAddrHeader.parse(t.getHeader("P-Asserted-Identity"))),t.hasHeader("require")&&-1!==t.getHeader("require").indexOf("100rel")){if(this.dialog||!this.earlyDialogs[r])break;if(-1!==this.earlyDialogs[r].pracked.indexOf(t.getHeader("rseq"))||this.earlyDialogs[r].pracked[this.earlyDialogs[r].pracked.length-1]>=t.getHeader("rseq")&&this.earlyDialogs[r].pracked.length>0)return;if(this.sessionDescriptionHandler=this.sessionDescriptionHandlerFactory(this,this.sessionDescriptionHandlerFactoryOptions),this.emit("SessionDescriptionHandler-created",this.sessionDescriptionHandler),this.sessionDescriptionHandler.hasDescription(t.getHeader("Content-Type")))if(this.hasOffer){if(!this.createDialog(t,"UAC"))break;this.hasAnswer=!0,this.dialog.pracked.push(t.getHeader("rseq")),this.sessionDescriptionHandler.setDescription(t.body,this.sessionDescriptionHandlerOptions,this.modifiers).then(function(){s.push("RAck: "+t.getHeader("rseq")+" "+t.getHeader("cseq")),i.sendRequest(e.C.PRACK,{extraHeaders:s,receiveResponse:function(){}}),i.status=u.STATUS_EARLY_MEDIA,i.emit("progress",t)},function(n){i.logger.warn(n),i.acceptAndTerminate(t,488,"Not Acceptable Here"),i.failed(t,e.C.causes.BAD_MEDIA_DESCRIPTION)})}else{var a=this.earlyDialogs[r],l=a.sessionDescriptionHandler=this.sessionDescriptionHandlerFactory(this,this.sessionDescriptionHandlerFactoryOptions);this.emit("SessionDescriptionHandler-created",l),a.pracked.push(t.getHeader("rseq")),l.setDescription(t.body,i.sessionDescriptionHandlerOptions,i.modifers).then(l.getDescription.bind(l,i.sessionDescriptionHandlerOptions,i.modifiers)).then(function(n){s.push("RAck: "+t.getHeader("rseq")+" "+t.getHeader("cseq")),a.sendRequest(i,e.C.PRACK,{extraHeaders:s,body:n}),i.status=u.STATUS_EARLY_MEDIA,i.emit("progress",t)}).catch(function(n){if(n instanceof e.Exceptions.SessionDescriptionHandlerError){if(a.pracked.push(t.getHeader("rseq")),i.status===u.STATUS_TERMINATED)return;i.failed(null,e.C.causes.WEBRTC_ERROR),i.terminated(null,e.C.causes.WEBRTC_ERROR)}else a.pracked.splice(a.pracked.indexOf(t.getHeader("rseq")),1),i.logger.warn("invalid description"),i.logger.warn(n)})}else s.push("RAck: "+t.getHeader("rseq")+" "+t.getHeader("cseq")),this.earlyDialogs[r].pracked.push(t.getHeader("rseq")),this.earlyDialogs[r].sendRequest(this,e.C.PRACK,{extraHeaders:s}),this.emit("progress",t)}else this.emit("progress",t);break;case/^2[0-9]{2}$/.test(t.status_code):if(this.request.cseq+" "+this.request.method!==t.getHeader("cseq"))break;if(t.hasHeader("P-Asserted-Identity")&&(this.assertedIdentity=new e.NameAddrHeader.parse(t.getHeader("P-Asserted-Identity"))),this.status===u.STATUS_EARLY_MEDIA&&this.dialog){this.status=u.STATUS_CONFIRMED,o={},this.renderbody&&(s.push("Content-Type: "+this.rendertype),o.extraHeaders=s,o.body=this.renderbody),this.emit("ack",t.transaction.sendACK(o)),this.accepted(t);break}if(this.dialog)break;if(this.hasOffer)if(this.hasAnswer)this.renderbody&&(s.push("Content-Type: "+i.rendertype),o.extraHeaders=s,o.body=this.renderbody),this.emit("ack",t.transaction.sendACK(o));else{if(!this.sessionDescriptionHandler.hasDescription(t.getHeader("Content-Type"))){this.acceptAndTerminate(t,400,"Missing session description"),this.failed(t,e.C.causes.BAD_MEDIA_DESCRIPTION);break}if(!this.createDialog(t,"UAC"))break;this.hasAnswer=!0,this.sessionDescriptionHandler.setDescription(t.body,this.sessionDescriptionHandlerOptions,this.modifiers).then(function(){var e={};i.status=u.STATUS_CONFIRMED,i.renderbody&&(s.push("Content-Type: "+i.rendertype),e.extraHeaders=s,e.body=i.renderbody),i.emit("ack",t.transaction.sendACK(e)),i.accepted(t)},function(n){i.logger.warn(n),i.acceptAndTerminate(t,488,"Not Acceptable Here"),i.failed(t,e.C.causes.BAD_MEDIA_DESCRIPTION)})}else if(this.earlyDialogs[r]&&this.earlyDialogs[r].sessionDescriptionHandler){if(this.hasOffer=!0,this.hasAnswer=!0,this.sessionDescriptionHandler=this.earlyDialogs[r].sessionDescriptionHandler,!this.createDialog(t,"UAC"))break;this.status=u.STATUS_CONFIRMED,this.emit("ack",t.transaction.sendACK()),this.accepted(t)}else{if(this.sessionDescriptionHandler=this.sessionDescriptionHandlerFactory(this,this.sessionDescriptionHandlerFactoryOptions),this.emit("SessionDescriptionHandler-created",this.sessionDescriptionHandler),!this.sessionDescriptionHandler.hasDescription(t.getHeader("Content-Type"))){this.acceptAndTerminate(t,400,"Missing session description"),this.failed(t,e.C.causes.BAD_MEDIA_DESCRIPTION);break}if(!this.createDialog(t,"UAC"))break;this.hasOffer=!0,this.sessionDescriptionHandler.setDescription(t.body,this.sessionDescriptionHandlerOptions,this.modifiers).then(this.sessionDescriptionHandler.getDescription.bind(this.sessionDescriptionHandler,this.sessionDescriptionHandlerOptions,this.modifiers)).then(function(e){i.isCanceled||i.status===u.STATUS_TERMINATED||(i.status=u.STATUS_CONFIRMED,i.hasAnswer=!0,i.emit("ack",t.transaction.sendACK({body:e})),i.accepted(t))}).catch(function(n){n instanceof e.Exceptions.SessionDescriptionHandlerError&&(i.logger.warn("invalid description"),i.logger.warn(n),i.acceptAndTerminate(t,488,"Invalid session description"),i.failed(t,e.C.causes.BAD_MEDIA_DESCRIPTION))})}break;default:n=e.Utils.sipErrorCause(t.status_code),this.rejected(t,n),this.failed(t,n),this.terminated(t,n)}}}},cancel:{writable:!0,value:function(t){if((t=t||{}).extraHeaders=(t.extraHeaders||[]).slice(),this.isCanceled)throw new e.Exceptions.InvalidStateError("CANCELED");if(this.status===u.STATUS_TERMINATED||this.status===u.STATUS_CONFIRMED)throw new e.Exceptions.InvalidStateError(this.status);this.logger.log("canceling RTCSession"),this.isCanceled=!0;var n=e.Utils.getCancelReason(t.status_code,t.reason_phrase);return this.status===u.STATUS_NULL||this.status===u.STATUS_INVITE_SENT&&!this.received_100?this.cancelReason=n:this.status!==u.STATUS_INVITE_SENT&&this.status!==u.STATUS_1XX_RECEIVED&&this.status!==u.STATUS_EARLY_MEDIA||this.request.cancel(n,t.extraHeaders),this.canceled()}},terminate:{writable:!0,value:function(e){return this.status===u.STATUS_TERMINATED?this:(this.status===u.STATUS_WAITING_FOR_ACK||this.status===u.STATUS_CONFIRMED?this.bye(e):this.cancel(e),this)}},receiveRequest:{writable:!0,value:function(n){return n.method,e.C.CANCEL,n.method===e.C.ACK&&this.status===u.STATUS_WAITING_FOR_ACK&&(e.Timers.clearTimeout(this.timers.ackTimer),e.Timers.clearTimeout(this.timers.invite2xxTimer),this.status=u.STATUS_CONFIRMED,this.accepted()),t.prototype.receiveRequest.apply(this,[n])}},onTransportError:{writable:!0,value:function(){this.status!==u.STATUS_CONFIRMED&&this.status!==u.STATUS_TERMINATED&&this.failed(null,e.C.causes.CONNECTION_ERROR)}},onRequestTimeout:{writable:!0,value:function(){this.status===u.STATUS_CONFIRMED?this.terminated(null,e.C.causes.REQUEST_TIMEOUT):this.status!==u.STATUS_TERMINATED&&(this.failed(null,e.C.causes.REQUEST_TIMEOUT),this.terminated(null,e.C.causes.REQUEST_TIMEOUT))}}}),e.InviteClientContext=r,(o=function(t,n,i,r){if(this.options=r||{},this.extraHeaders=(this.options.extraHeaders||[]).slice(),void 0===t||void 0===n||void 0===i)throw new TypeError("Not enough arguments");if(e.Utils.augment(this,e.ClientContext,[t,e.C.REFER,n.remoteIdentity.uri.toString(),r]),this.applicant=n,i instanceof e.InviteServerContext||i instanceof e.InviteClientContext)this.target='"'+i.remoteIdentity.friendlyName+'" <'+i.dialog.remote_target.toString()+"?Replaces="+i.dialog.id.call_id+"%3Bto-tag%3D"+i.dialog.id.remote_tag+"%3Bfrom-tag%3D"+i.dialog.id.local_tag+">";else{try{this.target=e.Grammar.parse(i,"Refer_To").uri||i}catch(e){this.logger.debug(".refer() cannot parse Refer_To from",i),this.logger.debug("...falling through to normalizeTarget()")}if(this.target=this.ua.normalizeTarget(this.target),!this.target)throw new TypeError("Invalid target: "+i)}this.ua&&this.extraHeaders.push("Referred-By: <"+this.ua.configuration.uri+">"),this.extraHeaders.push("Contact: "+n.contact),this.extraHeaders.push("Allow: "+e.UA.C.ALLOWED_METHODS.toString()),this.extraHeaders.push("Refer-To: "+this.target),this.errorListener=this.onTransportError.bind(this),t.transport.on("transportError",this.errorListener)}).prototype=Object.create({},{refer:{writable:!0,value:function(t){t=t||{};var n=(this.extraHeaders||[]).slice();return t.extraHeaders&&n.concat(t.extraHeaders),this.applicant.sendRequest(e.C.REFER,{extraHeaders:this.extraHeaders,receiveResponse:function(e){/^1[0-9]{2}$/.test(e.status_code)?this.emit("referRequestProgress",this):/^2[0-9]{2}$/.test(e.status_code)?this.emit("referRequestAccepted",this):/^[4-6][0-9]{2}$/.test(e.status_code)&&this.emit("referRequestRejected",this),t.receiveResponse&&t.receiveResponse(e)}.bind(this)}),this}},receiveNotify:{writable:!0,value:function(t){if(t.hasHeader("Content-Type")&&-1!==t.getHeader("Content-Type").search(/^message\/sipfrag/)){var n=e.Grammar.parse(t.body,"sipfrag");if(-1===n)return void t.reply(489,"Bad Event");switch(!0){case/^1[0-9]{2}$/.test(n.status_code):this.emit("referProgress",this);break;case/^2[0-9]{2}$/.test(n.status_code):this.emit("referAccepted",this),!this.options.activeAfterTransfer&&this.applicant.terminate&&this.applicant.terminate();break;default:this.emit("referRejected",this)}return t.reply(200),void this.emit("notify",t)}t.reply(489,"Bad Event")}}}),e.ReferClientContext=o,(s=function(t,n){if(e.Utils.augment(this,e.ServerContext,[t,n]),this.ua=t,this.status=u.STATUS_INVITE_RECEIVED,this.from_tag=n.from_tag,this.id=n.call_id+this.from_tag,this.request=n,this.contact=this.ua.contact.toString(),this.logger=t.getLogger("sip.referservercontext",this.id),!this.request.hasHeader("refer-to"))return this.logger.warn("Invalid REFER packet. A refer-to header is required. Rejecting refer."),void this.reject();this.referTo=this.request.parseHeader("refer-to"),this.referredSession=this.ua.findSession(n),this.cseq=Math.floor(1e4*Math.random()),this.call_id=this.request.call_id,this.from_uri=this.request.to.uri,this.from_tag=this.request.to.parameters.tag,this.remote_target=this.request.headers.Contact[0].parsed.uri,this.to_uri=this.request.from.uri,this.to_tag=this.request.from_tag,this.route_set=this.request.getHeaders("record-route"),this.receiveNonInviteResponse=function(){},this.request.hasHeader("referred-by")&&(this.referredBy=this.request.getHeader("referred-by")),this.referTo.uri.hasHeader("replaces")&&(this.replaces=this.referTo.uri.getHeader("replaces")),this.errorListener=this.onTransportError.bind(this),t.transport.on("transportError",this.errorListener),this.status=u.STATUS_WAITING_FOR_ANSWER}).prototype=Object.create({},{progress:{writable:!0,value:function(){if(this.status!==u.STATUS_WAITING_FOR_ANSWER)throw new e.Exceptions.InvalidStateError(this.status);this.request.reply(100)}},reject:{writable:!0,value:function(t){if(this.status===u.STATUS_TERMINATED)throw new e.Exceptions.InvalidStateError(this.status);this.logger.log("Rejecting refer"),this.status=u.STATUS_TERMINATED,e.ServerContext.prototype.reject.call(this,t),this.emit("referRequestRejected",this)}},accept:{writable:!0,value:function(t,n){if(t=t||{},this.status!==u.STATUS_WAITING_FOR_ANSWER)throw new e.Exceptions.InvalidStateError(this.status);if(this.status=u.STATUS_ANSWERED,this.request.reply(202,"Accepted"),this.emit("referRequestAccepted",this),t.followRefer){this.logger.log("Accepted refer, attempting to automatically follow it");var i=this.referTo.uri;if(!i.scheme.match("^sips?$"))return this.logger.error("SIP.js can only automatically follow SIP refer target"),void this.reject();var r=t.inviteOptions||{},s=(r.extraHeaders||[]).slice();this.replaces&&s.push("Replaces: "+decodeURIComponent(this.replaces)),this.referredBy&&s.push("Referred-By: "+this.referredBy),r.extraHeaders=s,i.clearHeaders(),this.targetSession=this.ua.invite(i,r,n),this.emit("referInviteSent",this),this.targetSession.once("progress",function(){this.sendNotify("SIP/2.0 100 Trying"),this.emit("referProgress",this),this.referredSession&&this.referredSession.emit("referProgress",this)}.bind(this)),this.targetSession.once("accepted",function(){this.logger.log("Successfully followed the refer"),this.sendNotify("SIP/2.0 200 OK"),this.emit("referAccepted",this),this.referredSession&&this.referredSession.emit("referAccepted",this)}.bind(this));var o=function(e){if(this.status!==u.STATUS_TERMINATED){if(this.logger.log("Refer was not successful. Resuming session"),e&&429===e.status_code)return this.logger.log("Alerting referrer that identity is required."),void this.sendNotify("SIP/2.0 429 Provide Referrer Identity");this.sendNotify("SIP/2.0 603 Declined"),this.status=u.STATUS_TERMINATED,this.emit("referRejected",this),this.referredSession&&this.referredSession.emit("referRejected")}};this.targetSession.once("rejected",o.bind(this)),this.targetSession.once("failed",o.bind(this))}else this.logger.log("Accepted refer, but did not automatically follow it"),this.sendNotify("SIP/2.0 200 OK"),this.emit("referAccepted",this),this.referredSession&&this.referredSession.emit("referAccepted",this)}},sendNotify:{writable:!0,value:function(t){if(this.status!==u.STATUS_ANSWERED)throw new e.Exceptions.InvalidStateError(this.status);if(-1===e.Grammar.parse(t,"sipfrag"))throw new Error("sipfrag body is required to send notify for refer");var n=new e.OutgoingRequest(e.C.NOTIFY,this.remote_target,this.ua,{cseq:this.cseq+=1,call_id:this.call_id,from_uri:this.from_uri,from_tag:this.from_tag,to_uri:this.to_uri,to_tag:this.to_tag,route_set:this.route_set},["Event: refer","Subscription-State: terminated","Content-Type: message/sipfrag"],t);new e.RequestSender({request:n,onRequestTimeout:function(){},onTransportError:function(){},receiveResponse:function(){}},this.ua).send()}}}),e.ReferServerContext=s}},function(e,t,n){"use strict";e.exports=function(e){var t;return(t=function(n,i,r){var s,o;if(void 0===i)throw new TypeError("Not enough arguments");if(this.logger=n.ua.getLogger("sip.invitecontext.dtmf",n.id),this.owner=n,this.direction=null,s=(r=r||{}).duration||null,o=r.interToneGap||null,"string"==typeof i)i=i.toUpperCase();else{if("number"!=typeof i)throw new TypeError("Invalid tone: "+i);i=i.toString()}if(!i.match(/^[0-9A-D#*]$/))throw new TypeError("Invalid tone: "+i);if(this.tone=i,s&&!e.Utils.isDecimal(s))throw new TypeError("Invalid tone duration: "+s);if(s?s<t.C.MIN_DURATION?(this.logger.warn('"duration" value is lower than the minimum allowed, setting it to '+t.C.MIN_DURATION+" milliseconds"),s=t.C.MIN_DURATION):s>t.C.MAX_DURATION?(this.logger.warn('"duration" value is greater than the maximum allowed, setting it to '+t.C.MAX_DURATION+" milliseconds"),s=t.C.MAX_DURATION):s=Math.abs(s):s=t.C.DEFAULT_DURATION,this.duration=s,o&&!e.Utils.isDecimal(o))throw new TypeError("Invalid interToneGap: "+o);o?o<t.C.MIN_INTER_TONE_GAP?(this.logger.warn('"interToneGap" value is lower than the minimum allowed, setting it to '+t.C.MIN_INTER_TONE_GAP+" milliseconds"),o=t.C.MIN_INTER_TONE_GAP):o=Math.abs(o):o=t.C.DEFAULT_INTER_TONE_GAP,this.interToneGap=o}).prototype=Object.create(e.EventEmitter.prototype),t.prototype.send=function(t){var n,i={};if(this.direction="outgoing",this.owner.status!==e.Session.C.STATUS_CONFIRMED&&this.owner.status!==e.Session.C.STATUS_WAITING_FOR_ACK)throw new e.Exceptions.InvalidStateError(this.owner.status);n=(t=t||{}).extraHeaders?t.extraHeaders.slice():[],i.contentType="application/dtmf-relay",i.body="Signal= "+this.tone+"\r\n",i.body+="Duration= "+this.duration,this.request=this.owner.dialog.sendRequest(this,e.C.INFO,{extraHeaders:n,body:i}),this.owner.emit("dtmf",this.request,this)},t.prototype.receiveResponse=function(t){var n;switch(!0){case/^1[0-9]{2}$/.test(t.status_code):break;case/^2[0-9]{2}$/.test(t.status_code):this.emit("succeeded",{originator:"remote",response:t});break;default:n=e.Utils.sipErrorCause(t.status_code),this.emit("failed",t,n)}},t.prototype.onRequestTimeout=function(){this.emit("failed",null,e.C.causes.REQUEST_TIMEOUT),this.owner.onRequestTimeout()},t.prototype.onTransportError=function(){this.emit("failed",null,e.C.causes.CONNECTION_ERROR),this.owner.onTransportError()},t.prototype.onDialogError=function(t){this.emit("failed",t,e.C.causes.DIALOG_ERROR),this.owner.onDialogError(t)},t.prototype.init_incoming=function(e){this.direction="incoming",this.request=e,e.reply(200),this.tone&&this.duration?this.owner.emit("dtmf",e,this):this.logger.warn("invalid INFO DTMF received, discarded")},t.C={MIN_DURATION:70,MAX_DURATION:6e3,DEFAULT_DURATION:100,MIN_INTER_TONE_GAP:50,DEFAULT_INTER_TONE_GAP:500},t}},function(e,t,n){"use strict";e.exports=function(e){e.Subscription=function(t,n,i,r){if(r=Object.create(r||Object.prototype),this.extraHeaders=r.extraHeaders=(r.extraHeaders||[]).slice(),this.id=null,this.state="init",!i)throw new TypeError("Event necessary to create a subscription.");this.event=i,"number"!=typeof r.expires?(t.logger.warn("expires must be a number. Using default of 3600."),this.expires=3600):this.expires=r.expires,this.requestedExpires=this.expires,r.extraHeaders.push("Event: "+this.event),r.extraHeaders.push("Expires: "+this.expires),r.body&&(this.body=r.body),this.contact=t.contact.toString(),r.extraHeaders.push("Contact: "+this.contact),r.extraHeaders.push("Allow: "+e.UA.C.ALLOWED_METHODS.toString()),e.Utils.augment(this,e.ClientContext,[t,e.C.SUBSCRIBE,n,r]),this.logger=t.getLogger("sip.subscription"),this.dialog=null,this.timers={N:null,sub_duration:null},this.errorCodes=[404,405,410,416,480,481,482,483,484,485,489,501,604]},e.Subscription.prototype={subscribe:function(){return"active"===this.state?(this.refresh(),this):"notify_wait"===this.state?this:(e.Timers.clearTimeout(this.timers.sub_duration),e.Timers.clearTimeout(this.timers.N),this.timers.N=e.Timers.setTimeout(this.timer_fire.bind(this),e.Timers.TIMER_N),this.ua.earlySubscriptions[this.request.call_id+this.request.from.parameters.tag+this.event]=this,this.send(),this.state="notify_wait",this)},refresh:function(){"terminated"!==this.state&&"pending"!==this.state&&"notify_wait"!==this.state&&this.dialog.sendRequest(this,e.C.SUBSCRIBE,{extraHeaders:this.extraHeaders,body:this.body})},receiveResponse:function(t){var n,i=e.Utils.getReasonPhrase(t.status_code);"notify_wait"===this.state&&t.status_code>=300||"notify_wait"!==this.state&&-1!==this.errorCodes.indexOf(t.status_code)?this.failed(t,null):/^2[0-9]{2}$/.test(t.status_code)?(this.emit("accepted",t,i),(n=t.getHeader("Expires"))&&n<=this.requestedExpires?(this.expires=n,this.timers.sub_duration=e.Timers.setTimeout(this.refresh.bind(this),900*n)):n?(this.logger.warn("Expires header in a 200-class response to SUBSCRIBE with a higher value than the one in the request"),this.failed(t,e.C.INVALID_EXPIRES_HEADER)):(this.logger.warn("Expires header missing in a 200-class response to SUBSCRIBE"),this.failed(t,e.C.EXPIRES_HEADER_MISSING))):t.statusCode>300&&(this.emit("failed",t,i),this.emit("rejected",t,i))},unsubscribe:function(){var t=[];this.state="terminated",t.push("Event: "+this.event),t.push("Expires: 0"),t.push("Contact: "+this.contact),t.push("Allow: "+e.UA.C.ALLOWED_METHODS.toString()),this.receiveResponse=function(){},this.dialog.sendRequest(this,this.method,{extraHeaders:t,body:this.body}),e.Timers.clearTimeout(this.timers.sub_duration),e.Timers.clearTimeout(this.timers.N),this.timers.N=e.Timers.setTimeout(this.timer_fire.bind(this),e.Timers.TIMER_N)},timer_fire:function(){"terminated"===this.state?(this.terminateDialog(),e.Timers.clearTimeout(this.timers.N),e.Timers.clearTimeout(this.timers.sub_duration),delete this.ua.subscriptions[this.id]):"notify_wait"===this.state||"pending"===this.state?this.close():this.refresh()},close:function(){"notify_wait"===this.state?(this.state="terminated",e.Timers.clearTimeout(this.timers.N),e.Timers.clearTimeout(this.timers.sub_duration),this.receiveResponse=function(){},delete this.ua.earlySubscriptions[this.request.call_id+this.request.from.parameters.tag+this.event]):"terminated"!==this.state&&this.unsubscribe()},createConfirmedDialog:function(t,n){var i;return this.terminateDialog(),(i=new e.Dialog(this,t,n)).invite_seqnum=this.request.cseq,i.local_seqnum=this.request.cseq,!i.error&&(this.dialog=i,!0)},terminateDialog:function(){this.dialog&&(delete this.ua.subscriptions[this.id],this.dialog.terminate(),delete this.dialog)},receiveRequest:function(t){var n,i=this;function r(){n.expires&&(e.Timers.clearTimeout(i.timers.sub_duration),n.expires=Math.min(i.expires,Math.max(n.expires,0)),i.timers.sub_duration=e.Timers.setTimeout(i.refresh.bind(i),900*n.expires))}if(this.matchEvent(t))if(this.dialog||this.createConfirmedDialog(t,"UAS")&&(this.id=this.dialog.id.toString(),delete this.ua.earlySubscriptions[this.request.call_id+this.request.from.parameters.tag+this.event],this.ua.subscriptions[this.id]=this),n=t.parseHeader("Subscription-State"),t.reply(200,e.C.REASON_200),e.Timers.clearTimeout(this.timers.N),this.emit("notify",{request:t}),"terminated"!==this.state)switch(n.state){case"active":this.state="active",r();break;case"pending":"notify_wait"===this.state&&r(),this.state="pending";break;case"terminated":if(e.Timers.clearTimeout(this.timers.sub_duration),n.reason)switch(this.logger.log("terminating subscription with reason "+n.reason),n.reason){case"deactivated":case"timeout":return void this.subscribe();case"probation":case"giveup":return void(n.params&&n.params["retry-after"]?this.timers.sub_duration=e.Timers.setTimeout(i.subscribe.bind(i),n.params["retry-after"]):this.subscribe())}this.close()}else"terminated"===n.state&&(this.terminateDialog(),e.Timers.clearTimeout(this.timers.N),e.Timers.clearTimeout(this.timers.sub_duration),delete this.ua.subscriptions[this.id]);else t.reply(489)},failed:function(e,t){return this.close(),this.emit("failed",e,t),this.emit("rejected",e,t),this},onDialogError:function(t){this.failed(t,e.C.causes.DIALOG_ERROR)},matchEvent:function(e){var t;return e.hasHeader("Event")?e.hasHeader("Subscription-State")?(t=e.parseHeader("event").event,this.event===t||(this.logger.warn("event match failed"),e.reply(481,"Event Match Failed"),!1)):(this.logger.warn("missing Subscription-State header"),!1):(this.logger.warn("missing Event header"),!1)}}}},function(e,t,n){"use strict";e.exports=function(e){var t;((t=function(t,n,i,r){if(this.options=r=r||{},this.options.extraHeaders=(r.extraHeaders||[]).slice(),this.options.contentType=r.contentType||"text/plain","number"!=typeof r.expires||r.expires%1!=0?this.options.expires=3600:this.options.expires=Number(r.expires),"boolean"!=typeof r.unpublishOnClose?this.options.unpublishOnClose=!0:this.options.unpublishOnClose=r.unpublishOnClose,void 0===n||null===n||""===n)throw new e.Exceptions.MethodParameterError("Publish","Target",n);if(this.target=t.normalizeTarget(n),void 0===i||null===i||""===i)throw new e.Exceptions.MethodParameterError("Publish","Event",i);this.event=i,e.ClientContext.call(this,t,e.C.PUBLISH,this.target,this.options),this.logger=this.ua.getLogger("sip.publish"),this.pubRequestBody=null,this.pubRequestExpires=this.options.expires,this.pubRequestEtag=null,this.publish_refresh_timer=null,t.on("transportCreated",function(e){e.on("transportError",this.onTransportError.bind(this))}.bind(this))}).prototype=Object.create(e.ClientContext.prototype)).constructor=t,t.prototype.publish=function(t){if(this.request=null,e.Timers.clearTimeout(this.publish_refresh_timer),void 0!==t&&null!==t&&""!==t)this.options.body=t,this.pubRequestBody=this.options.body,0===this.pubRequestExpires&&(this.pubRequestExpires=this.options.expires,this.pubRequestEtag=null),this.ua.publishers[this.target.toString()+":"+this.event]||(this.ua.publishers[this.target.toString()+":"+this.event]=this);else{if(this.pubRequestBody=null,null===this.pubRequestEtag)throw new e.Exceptions.MethodParameterError("Publish","Body",t);if(0===this.pubRequestExpires)throw new e.Exceptions.MethodParameterError("Publish","Expire",this.pubRequestExpires)}this.sendPublishRequest()},t.prototype.unpublish=function(){this.request=null,e.Timers.clearTimeout(this.publish_refresh_timer),this.pubRequestBody=null,this.pubRequestExpires=0,null!==this.pubRequestEtag&&this.sendPublishRequest()},t.prototype.close=function(){this.options.unpublishOnClose?this.unpublish():(this.request=null,e.Timers.clearTimeout(this.publish_refresh_timer),this.pubRequestBody=null,this.pubRequestExpires=0,this.pubRequestEtag=null),this.ua.publishers[this.target.toString()+":"+this.event]&&delete this.ua.publishers[this.target.toString()+":"+this.event]},t.prototype.sendPublishRequest=function(){var t;(t=Object.create(this.options||Object.prototype)).extraHeaders=(this.options.extraHeaders||[]).slice(),t.extraHeaders.push("Event: "+this.event),t.extraHeaders.push("Expires: "+this.pubRequestExpires),null!==this.pubRequestEtag&&t.extraHeaders.push("SIP-If-Match: "+this.pubRequestEtag),this.request=new e.OutgoingRequest(e.C.PUBLISH,this.target,this.ua,this.options.params,t.extraHeaders),null!==this.pubRequestBody&&(this.request.body={},this.request.body.body=this.pubRequestBody,this.request.body.contentType=this.options.contentType),this.send()},t.prototype.receiveResponse=function(t){var n,i,r=e.Utils.getReasonPhrase(t.status_code);switch(!0){case/^1[0-9]{2}$/.test(t.status_code):this.emit("progress",t,r);break;case/^2[0-9]{2}$/.test(t.status_code):t.hasHeader("SIP-ETag")?this.pubRequestEtag=t.getHeader("SIP-ETag"):this.logger.warn("SIP-ETag header missing in a 200-class response to PUBLISH"),t.hasHeader("Expires")?"number"==typeof(n=Number(t.getHeader("Expires")))&&n>=0&&n<=this.pubRequestExpires?this.pubRequestExpires=n:this.logger.warn("Bad Expires header in a 200-class response to PUBLISH"):this.logger.warn("Expires header missing in a 200-class response to PUBLISH"),0!==this.pubRequestExpires?(this.publish_refresh_timer=e.Timers.setTimeout(this.publish.bind(this),900*this.pubRequestExpires),this.emit("published",t,r)):this.emit("unpublished",t,r);break;case/^412$/.test(t.status_code):null!==this.pubRequestEtag&&0!==this.pubRequestExpires?(this.logger.warn("412 response to PUBLISH, recovering"),this.pubRequestEtag=null,this.emit("progress",t,r),this.publish(this.options.body)):(this.logger.warn("412 response to PUBLISH, recovery failed"),this.pubRequestExpires=0,this.emit("failed",t,r),this.emit("unpublished",t,r));break;case/^423$/.test(t.status_code):0!==this.pubRequestExpires&&t.hasHeader("Min-Expires")?"number"==typeof(i=Number(t.getHeader("Min-Expires")))||i>this.pubRequestExpires?(this.logger.warn("423 code in response to PUBLISH, adjusting the Expires value and trying to recover"),this.pubRequestExpires=i,this.emit("progress",t,r),this.publish(this.options.body)):(this.logger.warn("Bad 423 response Min-Expires header received for PUBLISH"),this.pubRequestExpires=0,this.emit("failed",t,r),this.emit("unpublished",t,r)):(this.logger.warn("423 response to PUBLISH, recovery failed"),this.pubRequestExpires=0,this.emit("failed",t,r),this.emit("unpublished",t,r));break;default:this.pubRequestExpires=0,this.emit("failed",t,r),this.emit("unpublished",t,r)}0===this.pubRequestExpires&&(e.Timers.clearTimeout(this.publish_refresh_timer),this.pubRequestBody=null,this.pubRequestEtag=null)},t.prototype.onRequestTimeout=function(){e.ClientContext.prototype.onRequestTimeout.call(this),this.emit("unpublished",null,e.C.causes.REQUEST_TIMEOUT)},t.prototype.onTransportError=function(){e.ClientContext.prototype.onTransportError.call(this),this.emit("unpublished",null,e.C.causes.CONNECTION_ERROR)},e.PublishContext=t}},function(e,t,n){"use strict";(function(t){e.exports=function(e,i){var r,s={STATUS_INIT:0,STATUS_STARTING:1,STATUS_READY:2,STATUS_USER_CLOSED:3,STATUS_NOT_READY:4,CONFIGURATION_ERROR:1,NETWORK_ERROR:2,ALLOWED_METHODS:["ACK","CANCEL","INVITE","MESSAGE","BYE","OPTIONS","INFO","NOTIFY","REFER"],ACCEPTED_BODY_TYPES:["application/sdp","application/dtmf-relay"],MAX_FORWARDS:70,TAG_LENGTH:10};function o(t){if(t instanceof Function)return t.initialize||(t.initialize=function(){return e.Utils.Promise.resolve()}),t}((r=function(t){var n=this;function i(e){return n.emit.bind(n,e)}s.ACCEPTED_BODY_TYPES=s.ACCEPTED_BODY_TYPES.toString(),this.log=new e.LoggerFactory,this.logger=this.getLogger("sip.ua"),this.cache={credentials:{}},this.configuration={},this.dialogs={},this.applicants={},this.data={},this.sessions={},this.subscriptions={},this.earlySubscriptions={},this.publishers={},this.transport=null,this.contact=null,this.status=s.STATUS_INIT,this.error=null,this.transactions={nist:{},nict:{},ist:{},ict:{}},Object.defineProperties(this,{transactionsCount:{get:function(){var e,t=["nist","nict","ist","ict"],n=0;for(e in t)n+=Object.keys(this.transactions[t[e]]).length;return n}},nictTransactionsCount:{get:function(){return Object.keys(this.transactions.nict).length}},nistTransactionsCount:{get:function(){return Object.keys(this.transactions.nist).length}},ictTransactionsCount:{get:function(){return Object.keys(this.transactions.ict).length}},istTransactionsCount:{get:function(){return Object.keys(this.transactions.ist).length}}}),void 0===t?t={}:("string"==typeof t||t instanceof String)&&(t={uri:t}),t.log&&(t.log.hasOwnProperty("builtinEnabled")&&(this.log.builtinEnabled=t.log.builtinEnabled),t.log.hasOwnProperty("level")&&(this.log.level=t.log.level),t.log.hasOwnProperty("connector")&&(this.log.connector=t.log.connector));try{this.loadConfig(t)}catch(e){throw this.status=s.STATUS_NOT_READY,this.error=s.CONFIGURATION_ERROR,e}this.registerContext=new e.RegisterContext(this),this.registerContext.on("failed",i("registrationFailed")),this.registerContext.on("registered",i("registered")),this.registerContext.on("unregistered",i("unregistered")),this.configuration.autostart&&this.start()}).prototype=Object.create(e.EventEmitter.prototype)).register=function(e){return this.configuration.register=!0,this.registerContext.register(e),this},r.prototype.unregister=function(e){this.configuration.register=!1;var t=this.registerContext;return this.transport.afterConnected(t.unregister.bind(t,e)),this},r.prototype.isRegistered=function(){return this.registerContext.registered},r.prototype.invite=function(t,n,i){var r=new e.InviteClientContext(this,t,n,i);return this.transport.afterConnected(function(){r.invite(),this.emit("inviteSent",r)}.bind(this)),r},r.prototype.subscribe=function(t,n,i){var r=new e.Subscription(this,t,n,i);return this.transport.afterConnected(r.subscribe.bind(r)),r},r.prototype.publish=function(t,n,i,r){var s=new e.PublishContext(this,t,n,r);return this.transport.afterConnected(s.publish.bind(s,i)),s},r.prototype.message=function(t,n,i){if(void 0===n)throw new TypeError("Not enough arguments");return(i=Object.create(i||Object.prototype)).contentType||(i.contentType="text/plain"),i.body=n,this.request(e.C.MESSAGE,t,i)},r.prototype.request=function(t,n,i){var r=new e.ClientContext(this,t,n,i);return this.transport.afterConnected(r.send.bind(r)),r},r.prototype.stop=function(){var e,n,r,o,a=this;if(this.logger.log("user requested closure..."),this.status===s.STATUS_USER_CLOSED)return this.logger.warn("UA already closed"),this;for(e in this.logger.log("closing registerContext"),this.registerContext.close(),this.sessions)this.logger.log("closing session "+e),this.sessions[e].terminate();for(n in this.subscriptions)this.logger.log("unsubscribing from subscription "+n),this.subscriptions[n].close();for(n in this.earlySubscriptions)this.logger.log("unsubscribing from early subscription "+n),this.earlySubscriptions[n].close();for(o in this.publishers)this.logger.log("unpublish "+o),this.publishers[o].close();for(r in this.applicants)this.applicants[r].close();return this.status=s.STATUS_USER_CLOSED,0===this.nistTransactionsCount&&0===this.nictTransactionsCount?this.transport.disconnect():this.on("transactionDestroyed",function e(){0===a.nistTransactionsCount&&0===a.nictTransactionsCount&&(a.removeListener("transactionDestroyed",e),a.transport.disconnect())}),"function"==typeof i.removeEventListener&&(t.chrome&&t.chrome.app&&t.chrome.app.runtime||i.removeEventListener("unload",this.environListener)),this},r.prototype.start=function(){if(this.logger.log("user requested startup..."),this.status===s.STATUS_INIT){if(this.status=s.STATUS_STARTING,!this.configuration.transportConstructor)throw new e.Exceptions.TransportError("Transport constructor not set");this.transport=new this.configuration.transportConstructor(this.getLogger("sip.transport"),this.configuration.transportOptions),this.setTransportListeners(),this.emit("transportCreated",this.transport),this.transport.connect()}else this.status===s.STATUS_USER_CLOSED?(this.logger.log("resuming"),this.status=s.STATUS_READY,this.transport.connect()):this.status===s.STATUS_STARTING?this.logger.log("UA is in STARTING status, not opening new connection"):this.status===s.STATUS_READY?this.logger.log("UA is in READY status, not resuming"):this.logger.error("Connection is down. Auto-Recovery system is trying to connect");return this.configuration.autostop&&"function"==typeof i.addEventListener&&(t.chrome&&t.chrome.app&&t.chrome.app.runtime||(this.environListener=this.stop.bind(this),i.addEventListener("unload",this.environListener))),this},r.prototype.normalizeTarget=function(t){return e.Utils.normalizeTarget(t,this.configuration.hostportParams)},r.prototype.saveCredentials=function(e){return this.cache.credentials[e.realm]=this.cache.credentials[e.realm]||{},this.cache.credentials[e.realm][e.uri]=e,this},r.prototype.getCredentials=function(e){var t,n;return t=e.ruri.host,this.cache.credentials[t]&&this.cache.credentials[t][e.ruri]&&((n=this.cache.credentials[t][e.ruri]).method=e.method),n},r.prototype.getLogger=function(e,t){return this.log.getLogger(e,t)},r.prototype.onTransportError=function(){this.status!==s.STATUS_USER_CLOSED&&(this.error&&this.error===s.NETWORK_ERROR||(this.status=s.STATUS_NOT_READY,this.error=s.NETWORK_ERROR))},r.prototype.setTransportListeners=function(){this.transport.on("connected",this.onTransportConnected.bind(this)),this.transport.on("message",this.onTransportReceiveMsg.bind(this)),this.transport.on("transportError",this.onTransportError.bind(this))},r.prototype.onTransportConnected=function(){this.configuration.register&&this.configuration.authenticationFactory.initialize().then(function(){this.registerContext.onTransportConnected()}.bind(this))},r.prototype.onTransportReceiveMsg=function(t){var n;if(t=e.Parser.parseMessage(t,this),this.status===e.UA.C.STATUS_USER_CLOSED&&t instanceof e.IncomingRequest)this.logger.warn("UA received message when status = USER_CLOSED - aborting");else if(e.sanityCheck(t,this,this.transport))if(t instanceof e.IncomingRequest)t.transport=this.transport,this.receiveRequest(t);else if(t instanceof e.IncomingResponse)switch(t.method){case e.C.INVITE:(n=this.transactions.ict[t.via_branch])&&n.receiveResponse(t);break;case e.C.ACK:break;default:(n=this.transactions.nict[t.via_branch])&&n.receiveResponse(t)}},r.prototype.newTransaction=function(e){this.transactions[e.type][e.id]=e,this.emit("newTransaction",{transaction:e})},r.prototype.destroyTransaction=function(e){delete this.transactions[e.type][e.id],this.emit("transactionDestroyed",{transaction:e})},r.prototype.receiveRequest=function(t){var n,i,r,o,a,u,l=t.method;function c(e){return e&&e.user===t.ruri.user}if(!(c(this.configuration.uri)||c(this.contact.uri)||c(this.contact.pub_gruu)||c(this.contact.temp_gruu)))return this.logger.warn("Request-URI does not point to us"),void(t.method!==e.C.ACK&&t.reply_sl(404));if(t.ruri.scheme!==e.C.SIPS){if(!e.Transactions.checkTransaction(this,t))if(l===e.C.OPTIONS?(new e.Transactions.NonInviteServerTransaction(t,this),t.reply(200,null,["Allow: "+e.UA.C.ALLOWED_METHODS.toString(),"Accept: "+s.ACCEPTED_BODY_TYPES])):l===e.C.MESSAGE?((r=new e.ServerContext(this,t)).body=t.body,r.content_type=t.getHeader("Content-Type")||"text/plain",t.reply(200,null),this.emit("message",r)):l!==e.C.INVITE&&l!==e.C.ACK&&new e.ServerContext(this,t),t.to_tag)(n=this.findDialog(t))?(l===e.C.INVITE&&new e.Transactions.InviteServerTransaction(t,this),n.receiveRequest(t)):l===e.C.NOTIFY?(i=this.findSession(t),o=this.findEarlySubscription(t),i?i.receiveRequest(t):o?o.receiveRequest(t):(this.logger.warn("received NOTIFY request for a non existent session or subscription"),t.reply(481,"Subscription does not exist"))):l!==e.C.ACK&&t.reply(481);else switch(l){case e.C.INVITE:if(a=this.configuration.replaces!==e.C.supported.UNSUPPORTED&&t.parseHeader("replaces")){if(!(u=this.dialogs[a.call_id+a.replaces_to_tag+a.replaces_from_tag]))return void t.reply_sl(481,null);if(u.owner.status===e.Session.C.STATUS_TERMINATED)return void t.reply_sl(603,null);if(u.state===e.Dialog.C.STATUS_CONFIRMED&&a.early_only)return void t.reply_sl(486,null)}(i=new e.InviteServerContext(this,t)).replacee=u&&u.owner,this.emit("invite",i);break;case e.C.BYE:t.reply(481);break;case e.C.CANCEL:(i=this.findSession(t))?i.receiveRequest(t):this.logger.warn("received CANCEL request for a non existent session");break;case e.C.ACK:break;case e.C.NOTIFY:this.configuration.allowLegacyNotifications&&this.listeners("notify").length>0?(t.reply(200,null),this.emit("notify",{request:t})):t.reply(481,"Subscription does not exist");break;case e.C.REFER:if(this.logger.log("Received an out of dialog refer"),this.configuration.allowOutOfDialogRefers){this.logger.log("Allow out of dialog refers is enabled on the UA");var d=new e.ReferServerContext(this,t);this.listeners("outOfDialogReferRequested").length?this.emit("outOfDialogReferRequested",d):(this.logger.log("No outOfDialogReferRequest listeners, automatically accepting and following the out of dialog refer"),d.accept({followRefer:!0}));break}t.reply(405);break;default:t.reply(405)}}else t.reply_sl(416)},r.prototype.findSession=function(e){return this.sessions[e.call_id+e.from_tag]||this.sessions[e.call_id+e.to_tag]||null},r.prototype.findDialog=function(e){return this.dialogs[e.call_id+e.from_tag+e.to_tag]||this.dialogs[e.call_id+e.to_tag+e.from_tag]||null},r.prototype.findEarlySubscription=function(e){return this.earlySubscriptions[e.call_id+e.to_tag+e.getHeader("event")]||null},r.prototype.loadConfig=function(t){var i,r,s,a,u,l={viaHost:e.Utils.createRandomToken(12)+".invalid",uri:new e.URI("sip","anonymous."+e.Utils.createRandomToken(6),"anonymous.invalid",null,null),custom:{},displayName:"",password:null,registerExpires:600,register:!0,registrarServer:null,transportConstructor:n(29)(e),transportOptions:{},userAgentString:e.C.USER_AGENT,noAnswerTimeout:60,hackViaTcp:!1,hackIpInContact:!1,hackWssInTransport:!1,hackAllowUnregisteredOptionTags:!1,sessionDescriptionHandlerFactoryOptions:{constraints:{},peerConnectionOptions:{}},contactName:e.Utils.createRandomToken(8),contactTransport:"ws",forceRport:!1,autostart:!0,autostop:!0,rel100:e.C.supported.UNSUPPORTED,dtmfType:e.C.dtmfType.INFO,replaces:e.C.supported.UNSUPPORTED,sessionDescriptionHandlerFactory:n(30)(e).defaultFactory,authenticationFactory:o(function(t){return new e.DigestAuthentication(t)}),allowLegacyNotifications:!1,allowOutOfDialogRefers:!1};function c(e,n){var i=e.replace(/([a-z][A-Z])/g,function(e){return e[0]+"_"+e[1].toLowerCase()});if(e!==i){var r=t.hasOwnProperty(e);t.hasOwnProperty(i)&&(n.warn(i+" is deprecated, please use "+e),r&&n.warn(e+" overriding "+i)),t[e]=r?t[e]:t[i]}}var d=this.getConfigurationCheck();for(i in d.mandatory){if(c(i,this.logger),!t.hasOwnProperty(i))throw new e.Exceptions.ConfigurationError(i);if(r=t[i],void 0===(s=d.mandatory[i](r)))throw new e.Exceptions.ConfigurationError(i,r);l[i]=s}for(i in d.optional)if(c(i,this.logger),t.hasOwnProperty(i)){if((r=t[i])instanceof Array&&0===r.length)continue;if(null===r||""===r||void 0===r)continue;if("number"==typeof r&&isNaN(r))continue;if(void 0===(s=d.optional[i](r)))throw new e.Exceptions.ConfigurationError(i,r);l[i]=s}0===l.displayName&&(l.displayName="0"),l.instanceId||(l.instanceId=e.Utils.newUUID()),l.sipjsId=e.Utils.createRandomToken(5),(a=l.uri.clone()).user=null,l.hostportParams=a.toRaw().replace(/^sip:/i,""),l.authorizationUser||(l.authorizationUser=l.uri.user),l.registrarServer||((u=l.uri.clone()).user=null,l.registrarServer=u),l.noAnswerTimeout=1e3*l.noAnswerTimeout,l.hackIpInContact&&("boolean"==typeof l.hackIpInContact?l.viaHost=e.Utils.getRandomTestNetIP():"string"==typeof l.hackIpInContact&&(l.viaHost=l.hackIpInContact)),l.hackWssInTransport&&(l.contactTransport="wss"),this.contact={pub_gruu:null,temp_gruu:null,uri:new e.URI("sip",l.contactName,l.viaHost,null,{transport:l.contactTransport}),toString:function(e){var t=(e=e||{}).anonymous||null,n=e.outbound||null,i="<";return i+=t?(this.temp_gruu||"sip:anonymous@anonymous.invalid;transport="+l.contactTransport).toString():(this.pub_gruu||this.uri).toString(),n&&(i+=";ob"),i+=">"}};var h={};for(i in l)h[i]=l[i];for(i in Object.assign(this.configuration,h),this.logger.log("configuration parameters after validation:"),l)switch(i){case"uri":case"registrarServer":case"sessionDescriptionHandlerFactory":this.logger.log("· "+i+": "+l[i]);break;case"password":this.logger.log("· "+i+": NOT SHOWN");break;case"transportConstructor":this.logger.log("· "+i+": "+l[i].name);break;default:this.logger.log("· "+i+": "+JSON.stringify(l[i]))}},r.prototype.getConfigurationCheck=function(){return{mandatory:{},optional:{uri:function(t){var n;return/^sip:/i.test(t)||(t=e.C.SIP+":"+t),(n=e.URI.parse(t))&&n.user?n:void 0},transportConstructor:function(e){if(e instanceof Function)return e},transportOptions:function(e){if("object"==typeof e)return e},authorizationUser:function(t){return-1===e.Grammar.parse('"'+t+'"',"quoted_string")?void 0:t},displayName:function(t){return-1===e.Grammar.parse('"'+t+'"',"displayName")?void 0:t},dtmfType:function(t){switch(t){case e.C.dtmfType.RTP:return e.C.dtmfType.RTP;case e.C.dtmfType.INFO:default:return e.C.dtmfType.INFO}},hackViaTcp:function(e){if("boolean"==typeof e)return e},hackIpInContact:function(t){return"boolean"==typeof t?t:"string"==typeof t&&-1!==e.Grammar.parse(t,"host")?t:void 0},hackWssInTransport:function(e){if("boolean"==typeof e)return e},hackAllowUnregisteredOptionTags:function(e){if("boolean"==typeof e)return e},contactTransport:function(e){if("string"==typeof e)return e},forceRport:function(e){if("boolean"==typeof e)return e},instanceId:function(t){if("string"==typeof t)return/^uuid:/i.test(t)&&(t=t.substr(5)),-1===e.Grammar.parse(t,"uuid")?void 0:t},noAnswerTimeout:function(t){var n;if(e.Utils.isDecimal(t)&&(n=Number(t))>0)return n},password:function(e){return String(e)},rel100:function(t){return t===e.C.supported.REQUIRED?e.C.supported.REQUIRED:t===e.C.supported.SUPPORTED?e.C.supported.SUPPORTED:e.C.supported.UNSUPPORTED},replaces:function(t){return t===e.C.supported.REQUIRED?e.C.supported.REQUIRED:t===e.C.supported.SUPPORTED?e.C.supported.SUPPORTED:e.C.supported.UNSUPPORTED},register:function(e){if("boolean"==typeof e)return e},registerExpires:function(t){var n;if(e.Utils.isDecimal(t)&&(n=Number(t))>0)return n},registrarServer:function(t){var n;if("string"==typeof t)return/^sip:/i.test(t)||(t=e.C.SIP+":"+t),(n=e.URI.parse(t))?n.user?void 0:n:void 0},userAgentString:function(e){if("string"==typeof e)return e},autostart:function(e){if("boolean"==typeof e)return e},autostop:function(e){if("boolean"==typeof e)return e},sessionDescriptionHandlerFactory:function(e){if(e instanceof Function)return e},sessionDescriptionHandlerFactoryOptions:function(e){if("object"==typeof e)return e},authenticationFactory:o,allowLegacyNotifications:function(e){if("boolean"==typeof e)return e},custom:function(e){if("object"==typeof e)return e},contactName:function(e){if("string"==typeof e)return e}}}},r.C=s,e.UA=r}}).call(this,n(28))},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";(function(t){e.exports=function(e){var n,i={STATUS_CONNECTING:0,STATUS_OPEN:1,STATUS_CLOSING:2,STATUS_CLOSED:3},r=(t.window||t).WebSocket;return(n=function(t,n){n=e.Utils.defaultOptions({},n),this.logger=t,this.ws=null,this.server=null,this.connectionPromise=null,this.connectDeferredResolve=null,this.connectionTimeout=null,this.disconnectionPromise=null,this.disconnectDeferredResolve=null,this.boundOnOpen=null,this.boundOnMessage=null,this.boundOnClose=null,this.boundOnError=null,this.reconnectionAttempts=0,this.reconnectTimer=null,this.keepAliveInterval=null,this.keepAliveDebounceTimeout=null,this.status=i.STATUS_CONNECTING,this.configuration={},this.loadConfig(n)}).prototype=Object.create(e.Transport.prototype,{isConnected:{writable:!0,value:function(){return this.status===i.STATUS_OPEN}},sendPromise:{writable:!0,value:function(t,n){if(n=n||{},!this.statusAssert(i.STATUS_OPEN,n.force))return this.onError("unable to send message - WebSocket not open"),e.Utils.Promise.reject();var r=t.toString();return this.ws?(!0===this.configuration.traceSip&&this.logger.log("sending WebSocket message:\n\n"+r+"\n"),this.ws.send(r),e.Utils.Promise.resolve({msg:r})):(this.onError("unable to send message - WebSocket does not exist"),e.Utils.Promise.reject())}},disconnectPromise:{writable:!0,value:function(t){return this.disconnectionPromise?this.disconnectionPromise:(t=t||{},this.statusTransition(i.STATUS_CLOSING,t.force)?(this.disconnectionPromise=new e.Utils.Promise(function(n,i){this.disconnectDeferredResolve=n,this.reconnectTimer&&(e.Timers.clearTimeout(this.reconnectTimer),this.reconnectTimer=null),this.ws?(this.stopSendingKeepAlives(),this.logger.log("closing WebSocket "+this.server.ws_uri),this.ws.close(t.code,t.reason)):i("Attempted to disconnect but the websocket doesn't exist")}.bind(this)),this.disconnectionPromise):e.Utils.Promise.reject("Failed status transition - attempted to disconnect a socket that was not open"))}},connectPromise:{writable:!0,value:function(t){return this.connectionPromise?this.connectionPromise:(t=t||{},this.server=this.server||this.getNextWsServer(t.force),this.connectionPromise=new e.Utils.Promise(function(n,s){if((this.status===i.STATUS_OPEN||this.status===i.STATUS_CLOSING)&&!t.force)return this.logger.warn("WebSocket "+this.server.ws_uri+" is already connected"),void s("Failed status check - attempted to open a connection but already open/closing");this.connectDeferredResolve=n,this.status=i.STATUS_CONNECTING,this.logger.log("connecting to WebSocket "+this.server.ws_uri),this.disposeWs();try{this.ws=new r(this.server.ws_uri,"sip")}catch(e){return this.ws=null,this.status=i.STATUS_CLOSED,this.onError("error connecting to WebSocket "+this.server.ws_uri+":"+e),void s("Failed to create a websocket")}this.ws?(this.connectionTimeout=e.Timers.setTimeout(function(){this.onError("took too long to connect - exceeded time set in configuration.connectionTimeout: "+this.configuration.connectionTimeout+"s")}.bind(this),1e3*this.configuration.connectionTimeout),this.boundOnOpen=this.onOpen.bind(this),this.boundOnMessage=this.onMessage.bind(this),this.boundOnClose=this.onClose.bind(this),this.boundOnError=this.onError.bind(this),this.ws.addEventListener("open",this.boundOnOpen),this.ws.addEventListener("message",this.boundOnMessage),this.ws.addEventListener("close",this.boundOnClose),this.ws.addEventListener("error",this.boundOnError)):s("Unexpected instance websocket not set")}.bind(this)),this.connectionPromise)}},onOpen:{writable:!0,value:function(){this.status=i.STATUS_OPEN,this.emit("connected"),e.Timers.clearTimeout(this.connectionTimeout),this.logger.log("WebSocket "+this.server.ws_uri+" connected"),null!==this.reconnectTimer&&(e.Timers.clearTimeout(this.reconnectTimer),this.reconnectTimer=null),this.reconnectionAttempts=0,this.disconnectionPromise=null,this.disconnectDeferredResolve=null,this.startSendingKeepAlives(),this.connectDeferredResolve?this.connectDeferredResolve({overrideEvent:!0}):this.logger.warn("Unexpected websocket.onOpen with no connectDeferredResolve")}},onClose:{writable:!0,value:function(t){if(this.logger.log("WebSocket disconnected (code: "+t.code+(t.reason?"| reason: "+t.reason:"")+")"),this.emit("disconnected",{code:t.code,reason:t.reason}),this.status!==i.STATUS_CLOSING&&(this.logger.warn("WebSocket abrupt disconnection"),this.emit("transportError")),this.stopSendingKeepAlives(),e.Timers.clearTimeout(this.connectionTimeout),this.connectionTimeout=null,this.connectionPromise=null,this.connectDeferredResolve=null,this.disconnectDeferredResolve)return this.disconnectDeferredResolve({overrideEvent:!0}),this.statusTransition(i.STATUS_CLOSED),void(this.disconnectDeferredResolve=null);this.status=i.STATUS_CLOSED,this.reconnect()}},disposeWs:{writable:!0,value:function(){this.ws&&(this.ws.removeEventListener("open",this.boundOnOpen),this.ws.removeEventListener("message",this.boundOnMessage),this.ws.removeEventListener("close",this.boundOnClose),this.ws.removeEventListener("error",this.boundOnError),this.boundOnOpen=null,this.boundOnMessage=null,this.boundOnClose=null,this.boundOnError=null,this.ws=null)}},onMessage:{writable:!0,value:function(e){var t=e.data;if(/^(\r\n)+$/.test(t))return this.clearKeepAliveTimeout(),void(!0===this.configuration.traceSip&&this.logger.log("received WebSocket message with CRLF Keep Alive response"));if(t){if("string"!=typeof t){try{t=String.fromCharCode.apply(null,new Uint8Array(t))}catch(e){return void this.logger.warn("received WebSocket binary message failed to be converted into string, message discarded")}!0===this.configuration.traceSip&&this.logger.log("received WebSocket binary message:\n\n"+t+"\n")}else!0===this.configuration.traceSip&&this.logger.log("received WebSocket text message:\n\n"+t+"\n");this.emit("message",t)}else this.logger.warn("received empty message, message discarded")}},onError:{writable:!0,value:function(e){this.logger.warn("Transport error: "+e),this.emit("transportError")}},reconnect:{writable:!0,value:function(){if(this.reconnectionAttempts>0&&this.logger.log("Reconnection attempt "+this.reconnectionAttempts+" failed"),this.noAvailableServers())return this.logger.warn("no available ws servers left - going to closed state"),this.status=i.STATUS_CLOSED,this.emit("closed"),void this.resetServerErrorStatus();this.isConnected()&&(this.logger.warn("attempted to reconnect while connected - forcing disconnect"),this.disconnect({force:!0})),this.reconnectionAttempts+=1,this.reconnectionAttempts>this.configuration.maxReconnectionAttempts?(this.logger.warn("maximum reconnection attempts for WebSocket "+this.server.ws_uri),this.logger.log("transport "+this.server.ws_uri+" failed | connection state set to 'error'"),this.server.isError=!0,this.emit("transportError"),this.server=this.getNextWsServer(),this.reconnectionAttempts=0,this.reconnect()):(this.logger.log("trying to reconnect to WebSocket "+this.server.ws_uri+" (reconnection attempt "+this.reconnectionAttempts+")"),this.reconnectTimer=e.Timers.setTimeout(function(){this.connect(),this.reconnectTimer=null}.bind(this),1===this.reconnectionAttempts?0:1e3*this.configuration.reconnectionTimeout))}},resetServerErrorStatus:{writable:!0,value:function(){var e,t=this.configuration.wsServers.length;for(e=0;e<t;e++)this.configuration.wsServers[e].isError=!1}},getNextWsServer:{writable:!0,value:function(e){if(!this.noAvailableServers()){var t,n,i,r=[];for(n=this.configuration.wsServers.length,t=0;t<n;t++)(i=this.configuration.wsServers[t]).isError&&!e||(0===r.length?r.push(i):i.weight>r[0].weight?r=[i]:i.weight===r[0].weight&&r.push(i));return r[t=Math.floor(Math.random()*r.length)]}this.logger.warn("attempted to get next ws server but there are no available ws servers left")}},noAvailableServers:{writable:!0,value:function(){var e;for(e in this.configuration.wsServers)if(!this.configuration.wsServers[e].isError)return!1;return!0}},sendKeepAlive:{writable:!0,value:function(){if(!this.keepAliveDebounceTimeout)return this.keepAliveDebounceTimeout=e.Timers.setTimeout(function(){this.emit("keepAliveDebounceTimeout"),this.clearKeepAliveTimeout()}.bind(this),1e3*this.configuration.keepAliveDebounce),this.send("\r\n\r\n")}},clearKeepAliveTimeout:{writable:!0,value:function(){e.Timers.clearTimeout(this.keepAliveDebounceTimeout),this.keepAliveDebounceTimeout=null}},startSendingKeepAlives:{writable:!0,value:function(){this.configuration.keepAliveInterval&&!this.keepAliveInterval&&(this.keepAliveInterval=e.Timers.setInterval(function(){this.sendKeepAlive(),this.startSendingKeepAlives()}.bind(this),function(e){var t=.8*e;return 1e3*(Math.random()*(e-t)+t)}(this.configuration.keepAliveInterval)))}},stopSendingKeepAlives:{writable:!0,value:function(){e.Timers.clearInterval(this.keepAliveInterval),e.Timers.clearTimeout(this.keepAliveDebounceTimeout),this.keepAliveInterval=null,this.keepAliveDebounceTimeout=null}},statusAssert:{writable:!0,value:function(e,t){return e===this.status||(t?(this.logger.warn("Attempted to assert "+Object.keys(i)[this.status]+" as "+Object.keys(i)[e]+"- continuing with option: 'force'"),!0):(this.logger.warn("Tried to assert "+Object.keys(i)[e]+" but is currently "+Object.keys(i)[this.status]),!1))}},statusTransition:{writable:!0,value:function(e,t){return this.logger.log("Attempting to transition status from "+Object.keys(i)[this.status]+" to "+Object.keys(i)[e]),e===i.STATUS_OPEN&&this.statusAssert(i.STATUS_CONNECTING,t)||e===i.STATUS_CLOSING&&this.statusAssert(i.STATUS_OPEN,t)||e===i.STATUS_CLOSED&&this.statusAssert(i.STATUS_CLOSING,t)?(this.status=e,!0):(this.logger.warn("Status transition failed - result: no-op - reason: either gave an nonexistent status or attempted illegal transition"),!1)}},loadConfig:{writable:!0,value:function(t){var n,i,r,s={wsServers:[{scheme:"WSS",sip_uri:"<sip:edge.sip.onsip.com;transport=ws;lr>",weight:0,ws_uri:"wss://edge.sip.onsip.com",isError:!1}],connectionTimeout:5,maxReconnectionAttempts:3,reconnectionTimeout:4,keepAliveInterval:0,keepAliveDebounce:10,traceSip:!1};function o(e,n){var i=e.replace(/([a-z][A-Z])/g,function(e){return e[0]+"_"+e[1].toLowerCase()});if(e!==i){var r=t.hasOwnProperty(e);t.hasOwnProperty(i)&&(n.warn(i+" is deprecated, please use "+e),r&&n.warn(e+" overriding "+i)),t[e]=r?t[e]:t[i]}}var a=this.getConfigurationCheck();for(n in a.mandatory){if(o(n,this.logger),!t.hasOwnProperty(n))throw new e.Exceptions.ConfigurationError(n);if(i=t[n],void 0===(r=a.mandatory[n](i)))throw new e.Exceptions.ConfigurationError(n,i);s[n]=r}for(n in a.optional)if(o(n,this.logger),t.hasOwnProperty(n)){if((i=t[n])instanceof Array&&0===i.length)continue;if(null===i||""===i||void 0===i)continue;if("number"==typeof i&&isNaN(i))continue;if(void 0===(r=a.optional[n](i)))throw new e.Exceptions.ConfigurationError(n,i);s[n]=r}var u={};for(n in s)u[n]={value:s[n]};for(n in Object.defineProperties(this.configuration,u),this.logger.log("configuration parameters after validation:"),s)this.logger.log("· "+n+": "+JSON.stringify(s[n]))}},getConfigurationCheck:{writable:!0,value:function(){return{mandatory:{},optional:{wsServers:function(t){var n,i,r;if("string"==typeof t)t=[{ws_uri:t}];else{if(!(t instanceof Array))return;for(i=t.length,n=0;n<i;n++)"string"==typeof t[n]&&(t[n]={ws_uri:t[n]})}if(0===t.length)return!1;for(i=t.length,n=0;n<i;n++){if(!t[n].ws_uri)return;if(t[n].weight&&!Number(t[n].weight))return;if(-1===(r=e.Grammar.parse(t[n].ws_uri,"absoluteURI")))return;if(["wss","ws","udp"].indexOf(r.scheme)<0)return;t[n].sip_uri="<sip:"+r.host+(r.port?":"+r.port:"")+";transport="+r.scheme.replace(/^wss$/i,"ws")+";lr>",t[n].weight||(t[n].weight=0),t[n].isError=!1,t[n].scheme=r.scheme.toUpperCase()}return t},keepAliveInterval:function(t){var n;if(e.Utils.isDecimal(t)&&(n=Number(t))>0)return n},keepAliveDebounce:function(t){var n;if(e.Utils.isDecimal(t)&&(n=Number(t))>0)return n},traceSip:function(e){if("boolean"==typeof e)return e},connectionTimeout:function(t){var n;if(e.Utils.isDecimal(t)&&(n=Number(t))>0)return n},maxReconnectionAttempts:function(t){var n;if(e.Utils.isDecimal(t)&&(n=Number(t))>=0)return n},reconnectionTimeout:function(t){var n;if(e.Utils.isDecimal(t)&&(n=Number(t))>0)return n}}}}}}),n.C=i,e.Web.Transport=n,n}}).call(this,n(28))},function(e,t,n){"use strict";(function(t){e.exports=function(e){var i=function(e,n,i){this.options=i||{},this.logger=e,this.observer=n,this.dtmfSender=null,this.shouldAcquireMedia=!0,this.CONTENT_TYPE="application/sdp",this.C={},this.C.DIRECTION={NULL:null,SENDRECV:"sendrecv",SENDONLY:"sendonly",RECVONLY:"recvonly",INACTIVE:"inactive"},this.logger.log("SessionDescriptionHandlerOptions: "+JSON.stringify(this.options)),this.direction=this.C.DIRECTION.NULL,this.modifiers=this.options.modifiers||[],Array.isArray(this.modifiers)||(this.modifiers=[this.modifiers]);var r=t.window||t;this.WebRTC={MediaStream:r.MediaStream,getUserMedia:r.navigator.mediaDevices.getUserMedia.bind(r.navigator.mediaDevices),RTCPeerConnection:r.RTCPeerConnection},this.iceGatheringDeferred=null,this.iceGatheringTimeout=!1,this.iceGatheringTimer=null,this.initPeerConnection(this.options.peerConnectionOptions),this.constraints=this.checkAndDefaultConstraints(this.options.constraints)};return i.defaultFactory=function(e,t){var r=e.ua.getLogger("sip.invitecontext.sessionDescriptionHandler",e.id),s=new(n(31))(e,t);return new i(r,s,t)},i.prototype=Object.create(e.SessionDescriptionHandler.prototype,{close:{writable:!0,value:function(){this.logger.log("closing PeerConnection"),this.peerConnection&&"closed"!==this.peerConnection.signalingState&&(this.peerConnection.getSenders?this.peerConnection.getSenders().forEach(function(e){e.track&&e.track.stop()}):(this.logger.warn("Using getLocalStreams which is deprecated"),this.peerConnection.getLocalStreams().forEach(function(e){e.getTracks().forEach(function(e){e.stop()})})),this.peerConnection.getReceivers?this.peerConnection.getReceivers().forEach(function(e){e.track&&e.track.stop()}):(this.logger.warn("Using getRemoteStreams which is deprecated"),this.peerConnection.getRemoteStreams().forEach(function(e){e.getTracks().forEach(function(e){e.stop()})})),this.resetIceGatheringComplete(),this.peerConnection.close())}},getDescription:{writable:!0,value:function(t,n){(t=t||{}).peerConnectionOptions&&this.initPeerConnection(t.peerConnectionOptions);var i=Object.assign({},this.constraints,t.constraints);return i=this.checkAndDefaultConstraints(i),JSON.stringify(i)!==JSON.stringify(this.constraints)&&(this.constraints=i,this.shouldAcquireMedia=!0),n=n||[],Array.isArray(n)||(n=[n]),n=n.concat(this.modifiers),e.Utils.Promise.resolve().then(function(){if(this.shouldAcquireMedia)return this.acquire(this.constraints).then(function(){this.shouldAcquireMedia=!1}.bind(this))}.bind(this)).then(function(){return this.createOfferOrAnswer(t.RTCOfferOptions,n)}.bind(this)).then(function(e){return this.emit("getDescription",e),{body:e.sdp,contentType:this.CONTENT_TYPE}}.bind(this))}},hasDescription:{writable:!0,value:function(e){return e===this.CONTENT_TYPE}},holdModifier:{writable:!0,value:function(t){return/a=(sendrecv|sendonly|recvonly|inactive)/.test(t.sdp)?(t.sdp=t.sdp.replace(/a=sendrecv\r\n/g,"a=sendonly\r\n"),t.sdp=t.sdp.replace(/a=recvonly\r\n/g,"a=inactive\r\n")):t.sdp=t.sdp.replace(/(m=[^\r]*\r\n)/g,"$1a=sendonly\r\n"),e.Utils.Promise.resolve(t)}},setDescription:{writable:!0,value:function(t,n,i){var r=this,s=this;(n=n||{}).peerConnectionOptions&&this.initPeerConnection(n.peerConnectionOptions),i=i||[],Array.isArray(i)||(i=[i]),i=i.concat(this.modifiers);var o={type:this.hasOffer("local")?"answer":"offer",sdp:t};return e.Utils.Promise.resolve().then(function(){if(this.shouldAcquireMedia&&this.options.alwaysAcquireMediaFirst)return this.acquire(this.constraints).then(function(){this.shouldAcquireMedia=!1}.bind(this))}.bind(this)).then(function(){return e.Utils.reducePromises(i,o)}).catch(function(t){if(t instanceof e.Exceptions.SessionDescriptionHandlerError)throw t;var n=new e.Exceptions.SessionDescriptionHandlerError("setDescription",t,"The modifiers did not resolve successfully");throw r.logger.error(n.message),s.emit("peerConnection-setRemoteDescriptionFailed",n),n}).then(function(e){return s.emit("setDescription",e),s.peerConnection.setRemoteDescription(e)}).catch(function(s){if(s instanceof e.Exceptions.SessionDescriptionHandlerError)throw s;if(/^m=video.+$/gm.test(t)&&!n.disableAudioFallback)return n.disableAudioFallback=!0,r.setDescription(t,n,[e.Web.Modifiers.stripVideo].concat(i));var o=new e.Exceptions.SessionDescriptionHandlerError("setDescription",s);throw r.logger.error(o.error),r.emit("peerConnection-setRemoteDescriptionFailed",o),o}).then(function(){s.peerConnection.getReceivers?s.emit("setRemoteDescription",s.peerConnection.getReceivers()):s.emit("setRemoteDescription",s.peerConnection.getRemoteStreams()),s.emit("confirmed",s)})}},sendDtmf:{writable:!0,value:function(e,t){if(!this.dtmfSender&&this.hasBrowserGetSenderSupport()){var n=this.peerConnection.getSenders();n.length>0&&(this.dtmfSender=n[0].dtmf)}if(!this.dtmfSender&&this.hasBrowserTrackSupport()){var i=this.peerConnection.getLocalStreams();if(i.length>0){var r=i[0].getAudioTracks();r.length>0&&(this.dtmfSender=this.peerConnection.createDTMFSender(r[0]))}}if(!this.dtmfSender)return!1;try{this.dtmfSender.insertDTMF(e,t.duration,t.interToneGap)}catch(e){if("InvalidStateError"===e.type||"InvalidCharacterError"===e.type)return this.logger.error(e),!1;throw e}return this.logger.log("DTMF sent via RTP: "+e.toString()),!0}},getDirection:{writable:!0,value:function(){return this.direction}},createOfferOrAnswer:{writable:!0,value:function(t,n){var i,r=this,s=this,o=this.peerConnection;return t=t||{},i=s.hasOffer("remote")?"createAnswer":"createOffer",o[i](t).catch(function(t){if(t instanceof e.Exceptions.SessionDescriptionHandlerError)throw t;var n=new e.Exceptions.SessionDescriptionHandlerError("createOfferOrAnswer",t,"peerConnection-"+i+"Failed");throw r.emit("peerConnection-"+i+"Failed",n),n}).then(function(t){return e.Utils.reducePromises(n,s.createRTCSessionDescriptionInit(t))}).then(function(e){return s.resetIceGatheringComplete(),o.setLocalDescription(e)}).catch(function(t){if(t instanceof e.Exceptions.SessionDescriptionHandlerError)throw t;var n=new e.Exceptions.SessionDescriptionHandlerError("createOfferOrAnswer",t,"peerConnection-SetLocalDescriptionFailed");throw r.emit("peerConnection-SetLocalDescriptionFailed",n),n}).then(function(){return s.waitForIceGatheringComplete()}).then(function(){var t=s.createRTCSessionDescriptionInit(s.peerConnection.localDescription);return e.Utils.reducePromises(n,t)}).then(function(e){return s.setDirection(e.sdp),e}).catch(function(t){if(t instanceof e.Exceptions.SessionDescriptionHandlerError)throw t;var n=new e.Exceptions.SessionDescriptionHandlerError("createOfferOrAnswer",t);throw r.logger.error(n),n})}},createRTCSessionDescriptionInit:{writable:!0,value:function(e){return{type:e.type,sdp:e.sdp}}},addDefaultIceCheckingTimeout:{writable:!0,value:function(e){return void 0===e.iceCheckingTimeout&&(e.iceCheckingTimeout=5e3),e}},addDefaultIceServers:{writable:!0,value:function(e){return e.iceServers||(e.iceServers=[{urls:"stun:stun.l.google.com:19302"}]),e}},checkAndDefaultConstraints:{writable:!0,value:function(e){var t={audio:!0,video:!this.options.alwaysAcquireMediaFirst};return e=e||t,0===Object.keys(e).length&&e.constructor===Object?t:e}},hasBrowserTrackSupport:{writable:!0,value:function(){return Boolean(this.peerConnection.addTrack)}},hasBrowserGetSenderSupport:{writable:!0,value:function(){return Boolean(this.peerConnection.getSenders)}},initPeerConnection:{writable:!0,value:function(t){var n=this;t=t||{},(t=this.addDefaultIceCheckingTimeout(t)).rtcConfiguration=t.rtcConfiguration||{},t.rtcConfiguration=this.addDefaultIceServers(t.rtcConfiguration),this.logger.log("initPeerConnection"),this.peerConnection&&(this.logger.log("Already have a peer connection for this session. Tearing down."),this.resetIceGatheringComplete(),this.peerConnection.close()),this.peerConnection=new this.WebRTC.RTCPeerConnection(t.rtcConfiguration),this.logger.log("New peer connection created"),"ontrack"in this.peerConnection?this.peerConnection.addEventListener("track",function(e){n.logger.log("track added"),n.observer.trackAdded(),n.emit("addTrack",e)}):(this.logger.warn("Using onaddstream which is deprecated"),this.peerConnection.onaddstream=function(e){n.logger.log("stream added"),n.emit("addStream",e)}),this.peerConnection.onicecandidate=function(e){n.emit("iceCandidate",e),e.candidate?n.logger.log("ICE candidate received: "+(null===e.candidate.candidate?null:e.candidate.candidate.trim())):null===e.candidate&&(n.logger.log("ICE candidate gathering complete"),n.triggerIceGatheringComplete())},this.peerConnection.onicegatheringstatechange=function(){switch(n.logger.log("RTCIceGatheringState changed: "+this.iceGatheringState),this.iceGatheringState){case"gathering":n.emit("iceGathering",this),!n.iceGatheringTimer&&t.iceCheckingTimeout&&(n.iceGatheringTimeout=!1,n.iceGatheringTimer=e.Timers.setTimeout(function(){n.logger.log("RTCIceChecking Timeout Triggered after "+t.iceCheckingTimeout+" milliseconds"),n.iceGatheringTimeout=!0,n.triggerIceGatheringComplete()},t.iceCheckingTimeout));break;case"complete":n.triggerIceGatheringComplete()}},this.peerConnection.oniceconnectionstatechange=function(){var e;switch(this.iceConnectionState){case"new":e="iceConnection";break;case"checking":e="iceConnectionChecking";break;case"connected":e="iceConnectionConnected";break;case"completed":e="iceConnectionCompleted";break;case"failed":e="iceConnectionFailed";break;case"disconnected":e="iceConnectionDisconnected";break;case"closed":e="iceConnectionClosed";break;default:return void n.logger.warn("Unknown iceConnection state:",this.iceConnectionState)}n.emit(e,this)}}},acquire:{writable:!0,value:function(t){var n=this;return t=this.checkAndDefaultConstraints(t),new e.Utils.Promise(function(e,n){this.logger.log("acquiring local media"),this.emit("userMediaRequest",t),t.audio||t.video?this.WebRTC.getUserMedia(t).then(function(t){this.observer.trackAdded(),this.emit("userMedia",t),e(t)}.bind(this)).catch(function(e){this.emit("userMediaFailed",e),n(e)}.bind(this)):e([])}.bind(this)).catch(function(t){if(t instanceof e.Exceptions.SessionDescriptionHandlerError)throw t;var i=new e.Exceptions.SessionDescriptionHandlerError("acquire",t,"unable to acquire streams");throw n.logger.error(i.message),n.logger.error(i.error),i}).then(function(t){this.logger.log("acquired local media streams");try{return this.peerConnection.removeTrack&&this.peerConnection.getSenders().forEach(function(e){this.peerConnection.removeTrack(e)},this),t}catch(t){return e.Utils.Promise.reject(t)}}.bind(this)).catch(function(t){if(t instanceof e.Exceptions.SessionDescriptionHandlerError)throw t;var i=new e.Exceptions.SessionDescriptionHandlerError("acquire",t,"error removing streams");throw n.logger.error(i.message),n.logger.error(i.error),i}).then(function(t){try{(t=[].concat(t)).forEach(function(e){this.peerConnection.addTrack?e.getTracks().forEach(function(t){this.peerConnection.addTrack(t,e)},this):this.peerConnection.addStream(e)},this)}catch(t){return e.Utils.Promise.reject(t)}return e.Utils.Promise.resolve()}.bind(this)).catch(function(t){if(t instanceof e.Exceptions.SessionDescriptionHandlerError)throw t;var i=new e.Exceptions.SessionDescriptionHandlerError("acquire",t,"error adding stream");throw n.logger.error(i.message),n.logger.error(i.error),i})}},hasOffer:{writable:!0,value:function(e){var t="have-"+e+"-offer";return this.peerConnection.signalingState===t}},isIceGatheringComplete:{writable:!0,value:function(){return"complete"===this.peerConnection.iceGatheringState||this.iceGatheringTimeout}},resetIceGatheringComplete:{writable:!0,value:function(){this.iceGatheringTimeout=!1,this.iceGatheringTimer&&(e.Timers.clearTimeout(this.iceGatheringTimer),this.iceGatheringTimer=null),this.iceGatheringDeferred&&(this.iceGatheringDeferred.reject(),this.iceGatheringDeferred=null)}},setDirection:{writable:!0,value:function(e){var t=e.match(/a=(sendrecv|sendonly|recvonly|inactive)/);if(null===t)return this.direction=this.C.DIRECTION.NULL,void this.observer.directionChanged();var n=t[1];switch(n){case this.C.DIRECTION.SENDRECV:case this.C.DIRECTION.SENDONLY:case this.C.DIRECTION.RECVONLY:case this.C.DIRECTION.INACTIVE:this.direction=n;break;default:this.direction=this.C.DIRECTION.NULL}this.observer.directionChanged()}},triggerIceGatheringComplete:{writable:!0,value:function(){this.isIceGatheringComplete()&&(this.emit("iceGatheringComplete",this),this.iceGatheringTimer&&(e.Timers.clearTimeout(this.iceGatheringTimer),this.iceGatheringTimer=null),this.iceGatheringDeferred&&(this.iceGatheringDeferred.resolve(),this.iceGatheringDeferred=null))}},waitForIceGatheringComplete:{writable:!0,value:function(){return this.isIceGatheringComplete()?e.Utils.Promise.resolve():(this.isIceGatheringDeferred||(this.iceGatheringDeferred=e.Utils.defer()),this.iceGatheringDeferred.promise)}}}),i}}).call(this,n(28))},function(e,t,n){"use strict";var i=function(e,t){this.session=e||{},this.options=t||{}};i.prototype={trackAdded:function(){this.session.emit("trackAdded")},directionChanged:function(){this.session.emit("directionChanged")}},e.exports=i},function(e,t,n){"use strict";e.exports=function(e){var t,n=[],i=[],r=[];function s(t,n,i){for(var r,s=e.Utils.buildStatusLine(t),o=n.getHeaders("via"),a=o.length,u=0;u<a;u++)s+="Via: "+o[u]+"\r\n";r=n.getHeader("To"),n.to_tag||(r+=";tag="+e.Utils.newTag()),s+="To: "+r+"\r\n",s+="From: "+n.getHeader("From")+"\r\n",s+="Call-ID: "+n.call_id+"\r\n",s+="CSeq: "+n.cseq+" "+n.method+"\r\n",s+="\r\n",i.send(s)}n.push(function(e,t,n){if(!e.ruri||"sip"!==e.ruri.scheme)return s(416,e,n),!1}),n.push(function(e,t,n){if(!e.to_tag&&e.call_id.substr(0,5)===t.configuration.sipjsId)return s(482,e,n),!1}),n.push(function(t,n,i){if(e.Utils.str_utf8_length(t.body)<t.getHeader("content-length"))return s(400,t,i),!1}),n.push(function(t,n,i){var r,o,a=t.from_tag,u=t.call_id,l=t.cseq;if(!t.to_tag)if(t.method===e.C.INVITE){if(r=n.transactions.ist[t.via_branch])return;for(o in n.transactions.ist)if((r=n.transactions.ist[o]).request.from_tag===a&&r.request.call_id===u&&r.request.cseq===l)return s(482,t,i),!1}else{if(r=n.transactions.nist[t.via_branch])return;for(o in n.transactions.nist)if((r=n.transactions.nist[o]).request.from_tag===a&&r.request.call_id===u&&r.request.cseq===l)return s(482,t,i),!1}}),i.push(function(e,t){if(e.getHeaders("via").length>1)return t.getLogger("sip.sanitycheck").warn("More than one Via header field present in the response. Dropping the response"),!1}),i.push(function(e,t){var n=t.configuration.viaHost;if(e.via.host!==n||void 0!==e.via.port)return t.getLogger("sip.sanitycheck").warn("Via sent-by in the response does not match UA Via host value. Dropping the response"),!1}),i.push(function(t,n){if(e.Utils.str_utf8_length(t.body)<t.getHeader("content-length"))return n.getLogger("sip.sanitycheck").warn("Message body length is lower than the value in Content-Length header field. Dropping the response"),!1}),r.push(function(e,t){for(var n=["from","to","call_id","cseq","via"],i=n.length;i--;)if(!e.hasHeader(n[i]))return t.getLogger("sip.sanitycheck").warn("Missing mandatory header field : "+n[i]+". Dropping the response"),!1}),t=function(t,s,o){var a;for(a=r.length;a--;)if(!1===r[a](t,s,o))return!1;if(t instanceof e.IncomingRequest){for(a=n.length;a--;)if(!1===n[a](t,s,o))return!1}else if(t instanceof e.IncomingResponse)for(a=i.length;a--;)if(!1===i[a](t,s,o))return!1;return!0},e.sanityCheck=t}},function(e,t,n){"use strict";var i=n(34);e.exports=function(e){var t;return(t=function(e){this.logger=e.getLogger("sipjs.digestauthentication"),this.username=e.configuration.authorizationUser,this.password=e.configuration.password,this.cnonce=null,this.nc=0,this.ncHex="00000000",this.response=null}).prototype.authenticate=function(t,n){if(this.algorithm=n.algorithm,this.realm=n.realm,this.nonce=n.nonce,this.opaque=n.opaque,this.stale=n.stale,this.algorithm){if("MD5"!==this.algorithm)return this.logger.warn('challenge with Digest algorithm different than "MD5", authentication aborted'),!1}else this.algorithm="MD5";if(!this.realm)return this.logger.warn("challenge without Digest realm, authentication aborted"),!1;if(!this.nonce)return this.logger.warn("challenge without Digest nonce, authentication aborted"),!1;if(n.qop)if(n.qop.indexOf("auth")>-1)this.qop="auth";else{if(!(n.qop.indexOf("auth-int")>-1))return this.logger.warn('challenge without Digest qop different than "auth" or "auth-int", authentication aborted'),!1;this.qop="auth-int"}else this.qop=null;return this.method=t.method,this.uri=t.ruri,this.cnonce=e.createRandomToken(12),this.nc+=1,this.updateNcHex(),4294967296===this.nc&&(this.nc=1,this.ncHex="00000001"),this.calculateResponse(),!0},t.prototype.calculateResponse=function(){var e,t;e=i(this.username+":"+this.realm+":"+this.password),"auth"===this.qop?(t=i(this.method+":"+this.uri),this.response=i(e+":"+this.nonce+":"+this.ncHex+":"+this.cnonce+":auth:"+t)):"auth-int"===this.qop?(t=i(this.method+":"+this.uri+":"+i(this.body?this.body:"")),this.response=i(e+":"+this.nonce+":"+this.ncHex+":"+this.cnonce+":auth-int:"+t)):null===this.qop&&(t=i(this.method+":"+this.uri),this.response=i(e+":"+this.nonce+":"+t))},t.prototype.toString=function(){var e=[];if(!this.response)throw new Error("response field does not exist, cannot generate Authorization header");return e.push("algorithm="+this.algorithm),e.push('username="'+this.username+'"'),e.push('realm="'+this.realm+'"'),e.push('nonce="'+this.nonce+'"'),e.push('uri="'+this.uri+'"'),e.push('response="'+this.response+'"'),this.opaque&&e.push('opaque="'+this.opaque+'"'),this.qop&&(e.push("qop="+this.qop),e.push('cnonce="'+this.cnonce+'"'),e.push("nc="+this.ncHex)),"Digest "+e.join(", ")},t.prototype.updateNcHex=function(){var e=Number(this.nc).toString(16);this.ncHex="00000000".substr(0,8-e.length)+e},t}},function(e,t,n){e.exports=function(e){return function(t){var n=e,i=n.lib,r=i.WordArray,s=i.Hasher,o=n.algo,a=[];!function(){for(var e=0;e<64;e++)a[e]=4294967296*t.abs(t.sin(e+1))|0}();var u=o.MD5=s.extend({_doReset:function(){this._hash=new r.init([1732584193,4023233417,2562383102,271733878])},_doProcessBlock:function(e,t){for(var n=0;n<16;n++){var i=t+n,r=e[i];e[i]=16711935&(r<<8|r>>>24)|4278255360&(r<<24|r>>>8)}var s=this._hash.words,o=e[t+0],u=e[t+1],p=e[t+2],f=e[t+3],m=e[t+4],g=e[t+5],T=e[t+6],v=e[t+7],y=e[t+8],E=e[t+9],b=e[t+10],S=e[t+11],_=e[t+12],C=e[t+13],w=e[t+14],R=e[t+15],A=s[0],I=s[1],N=s[2],x=s[3];I=h(I=h(I=h(I=h(I=d(I=d(I=d(I=d(I=c(I=c(I=c(I=c(I=l(I=l(I=l(I=l(I,N=l(N,x=l(x,A=l(A,I,N,x,o,7,a[0]),I,N,u,12,a[1]),A,I,p,17,a[2]),x,A,f,22,a[3]),N=l(N,x=l(x,A=l(A,I,N,x,m,7,a[4]),I,N,g,12,a[5]),A,I,T,17,a[6]),x,A,v,22,a[7]),N=l(N,x=l(x,A=l(A,I,N,x,y,7,a[8]),I,N,E,12,a[9]),A,I,b,17,a[10]),x,A,S,22,a[11]),N=l(N,x=l(x,A=l(A,I,N,x,_,7,a[12]),I,N,C,12,a[13]),A,I,w,17,a[14]),x,A,R,22,a[15]),N=c(N,x=c(x,A=c(A,I,N,x,u,5,a[16]),I,N,T,9,a[17]),A,I,S,14,a[18]),x,A,o,20,a[19]),N=c(N,x=c(x,A=c(A,I,N,x,g,5,a[20]),I,N,b,9,a[21]),A,I,R,14,a[22]),x,A,m,20,a[23]),N=c(N,x=c(x,A=c(A,I,N,x,E,5,a[24]),I,N,w,9,a[25]),A,I,f,14,a[26]),x,A,y,20,a[27]),N=c(N,x=c(x,A=c(A,I,N,x,C,5,a[28]),I,N,p,9,a[29]),A,I,v,14,a[30]),x,A,_,20,a[31]),N=d(N,x=d(x,A=d(A,I,N,x,g,4,a[32]),I,N,y,11,a[33]),A,I,S,16,a[34]),x,A,w,23,a[35]),N=d(N,x=d(x,A=d(A,I,N,x,u,4,a[36]),I,N,m,11,a[37]),A,I,v,16,a[38]),x,A,b,23,a[39]),N=d(N,x=d(x,A=d(A,I,N,x,C,4,a[40]),I,N,o,11,a[41]),A,I,f,16,a[42]),x,A,T,23,a[43]),N=d(N,x=d(x,A=d(A,I,N,x,E,4,a[44]),I,N,_,11,a[45]),A,I,R,16,a[46]),x,A,p,23,a[47]),N=h(N,x=h(x,A=h(A,I,N,x,o,6,a[48]),I,N,v,10,a[49]),A,I,w,15,a[50]),x,A,g,21,a[51]),N=h(N,x=h(x,A=h(A,I,N,x,_,6,a[52]),I,N,f,10,a[53]),A,I,b,15,a[54]),x,A,u,21,a[55]),N=h(N,x=h(x,A=h(A,I,N,x,y,6,a[56]),I,N,R,10,a[57]),A,I,T,15,a[58]),x,A,C,21,a[59]),N=h(N,x=h(x,A=h(A,I,N,x,m,6,a[60]),I,N,S,10,a[61]),A,I,p,15,a[62]),x,A,E,21,a[63]),s[0]=s[0]+A|0,s[1]=s[1]+I|0,s[2]=s[2]+N|0,s[3]=s[3]+x|0},_doFinalize:function(){var e=this._data,n=e.words,i=8*this._nDataBytes,r=8*e.sigBytes;n[r>>>5]|=128<<24-r%32;var s=t.floor(i/4294967296),o=i;n[15+(r+64>>>9<<4)]=16711935&(s<<8|s>>>24)|4278255360&(s<<24|s>>>8),n[14+(r+64>>>9<<4)]=16711935&(o<<8|o>>>24)|4278255360&(o<<24|o>>>8),e.sigBytes=4*(n.length+1),this._process();for(var a=this._hash,u=a.words,l=0;l<4;l++){var c=u[l];u[l]=16711935&(c<<8|c>>>24)|4278255360&(c<<24|c>>>8)}return a},clone:function(){var e=s.clone.call(this);return e._hash=this._hash.clone(),e}});function l(e,t,n,i,r,s,o){var a=e+(t&n|~t&i)+r+o;return(a<<s|a>>>32-s)+t}function c(e,t,n,i,r,s,o){var a=e+(t&i|n&~i)+r+o;return(a<<s|a>>>32-s)+t}function d(e,t,n,i,r,s,o){var a=e+(t^n^i)+r+o;return(a<<s|a>>>32-s)+t}function h(e,t,n,i,r,s,o){var a=e+(n^(t|~i))+r+o;return(a<<s|a>>>32-s)+t}n.MD5=s._createHelper(u),n.HmacMD5=s._createHmacHelper(u)}(Math),e.MD5}(n(35))},function(e,t,n){e.exports=function(){var e=e||function(e,t){var n=Object.create||function(){function e(){}return function(t){var n;return e.prototype=t,n=new e,e.prototype=null,n}}(),i={},r=i.lib={},s=r.Base={extend:function(e){var t=n(this);return e&&t.mixIn(e),t.hasOwnProperty("init")&&this.init!==t.init||(t.init=function(){t.$super.init.apply(this,arguments)}),t.init.prototype=t,t.$super=this,t},create:function(){var e=this.extend();return e.init.apply(e,arguments),e},init:function(){},mixIn:function(e){for(var t in e)e.hasOwnProperty(t)&&(this[t]=e[t]);e.hasOwnProperty("toString")&&(this.toString=e.toString)},clone:function(){return this.init.prototype.extend(this)}},o=r.WordArray=s.extend({init:function(e,t){e=this.words=e||[],this.sigBytes=void 0!=t?t:4*e.length},toString:function(e){return(e||u).stringify(this)},concat:function(e){var t=this.words,n=e.words,i=this.sigBytes,r=e.sigBytes;if(this.clamp(),i%4)for(var s=0;s<r;s++){var o=n[s>>>2]>>>24-s%4*8&255;t[i+s>>>2]|=o<<24-(i+s)%4*8}else for(var s=0;s<r;s+=4)t[i+s>>>2]=n[s>>>2];return this.sigBytes+=r,this},clamp:function(){var t=this.words,n=this.sigBytes;t[n>>>2]&=4294967295<<32-n%4*8,t.length=e.ceil(n/4)},clone:function(){var e=s.clone.call(this);return e.words=this.words.slice(0),e},random:function(t){for(var n,i=[],r=function(t){var t=t,n=987654321,i=4294967295;return function(){var r=((n=36969*(65535&n)+(n>>16)&i)<<16)+(t=18e3*(65535&t)+(t>>16)&i)&i;return r/=4294967296,(r+=.5)*(e.random()>.5?1:-1)}},s=0;s<t;s+=4){var a=r(4294967296*(n||e.random()));n=987654071*a(),i.push(4294967296*a()|0)}return new o.init(i,t)}}),a=i.enc={},u=a.Hex={stringify:function(e){for(var t=e.words,n=e.sigBytes,i=[],r=0;r<n;r++){var s=t[r>>>2]>>>24-r%4*8&255;i.push((s>>>4).toString(16)),i.push((15&s).toString(16))}return i.join("")},parse:function(e){for(var t=e.length,n=[],i=0;i<t;i+=2)n[i>>>3]|=parseInt(e.substr(i,2),16)<<24-i%8*4;return new o.init(n,t/2)}},l=a.Latin1={stringify:function(e){for(var t=e.words,n=e.sigBytes,i=[],r=0;r<n;r++){var s=t[r>>>2]>>>24-r%4*8&255;i.push(String.fromCharCode(s))}return i.join("")},parse:function(e){for(var t=e.length,n=[],i=0;i<t;i++)n[i>>>2]|=(255&e.charCodeAt(i))<<24-i%4*8;return new o.init(n,t)}},c=a.Utf8={stringify:function(e){try{return decodeURIComponent(escape(l.stringify(e)))}catch(e){throw new Error("Malformed UTF-8 data")}},parse:function(e){return l.parse(unescape(encodeURIComponent(e)))}},d=r.BufferedBlockAlgorithm=s.extend({reset:function(){this._data=new o.init,this._nDataBytes=0},_append:function(e){"string"==typeof e&&(e=c.parse(e)),this._data.concat(e),this._nDataBytes+=e.sigBytes},_process:function(t){var n=this._data,i=n.words,r=n.sigBytes,s=this.blockSize,a=4*s,u=r/a,l=(u=t?e.ceil(u):e.max((0|u)-this._minBufferSize,0))*s,c=e.min(4*l,r);if(l){for(var d=0;d<l;d+=s)this._doProcessBlock(i,d);var h=i.splice(0,l);n.sigBytes-=c}return new o.init(h,c)},clone:function(){var e=s.clone.call(this);return e._data=this._data.clone(),e},_minBufferSize:0}),h=(r.Hasher=d.extend({cfg:s.extend(),init:function(e){this.cfg=this.cfg.extend(e),this.reset()},reset:function(){d.reset.call(this),this._doReset()},update:function(e){return this._append(e),this._process(),this},finalize:function(e){e&&this._append(e);var t=this._doFinalize();return t},blockSize:16,_createHelper:function(e){return function(t,n){return new e.init(n).finalize(t)}},_createHmacHelper:function(e){return function(t,n){return new h.HMAC.init(e,n).finalize(t)}}}),i.algo={});return i}(Math);return e}()},function(e,t,n){"use strict";var i=n(37);e.exports=function(e){return{parse:function(t,n){var r={startRule:n,SIP:e};try{i.parse(t,r)}catch(e){r.data=-1}return r.data}}}},function(e,t,n){"use strict";function i(e,t,n,r){this.message=e,this.expected=t,this.found=n,this.location=r,this.name="SyntaxError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(this,i)}!function(e,t){function n(){this.constructor=e}n.prototype=t.prototype,e.prototype=new n}(i,Error),i.buildMessage=function(e,t){var n={literal:function(e){return'"'+r(e.text)+'"'},class:function(e){var t,n="";for(t=0;t<e.parts.length;t++)n+=e.parts[t]instanceof Array?s(e.parts[t][0])+"-"+s(e.parts[t][1]):s(e.parts[t]);return"["+(e.inverted?"^":"")+n+"]"},any:function(e){return"any character"},end:function(e){return"end of input"},other:function(e){return e.description}};function i(e){return e.charCodeAt(0).toString(16).toUpperCase()}function r(e){return e.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,function(e){return"\\x0"+i(e)}).replace(/[\x10-\x1F\x7F-\x9F]/g,function(e){return"\\x"+i(e)})}function s(e){return e.replace(/\\/g,"\\\\").replace(/\]/g,"\\]").replace(/\^/g,"\\^").replace(/-/g,"\\-").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,function(e){return"\\x0"+i(e)}).replace(/[\x10-\x1F\x7F-\x9F]/g,function(e){return"\\x"+i(e)})}function o(e){return n[e.type](e)}return"Expected "+function(e){var t,n,i=new Array(e.length);for(t=0;t<e.length;t++)i[t]=o(e[t]);if(i.sort(),i.length>0){for(t=1,n=1;t<i.length;t++)i[t-1]!==i[t]&&(i[n]=i[t],n++);i.length=n}switch(i.length){case 1:return i[0];case 2:return i[0]+" or "+i[1];default:return i.slice(0,-1).join(", ")+", or "+i[i.length-1]}}(e)+" but "+function(e){return e?'"'+r(e)+'"':"end of input"}(t)+" found."},e.exports={SyntaxError:i,parse:function(e,t){t=void 0!==t?t:{};var n,r={},s={Contact:119,Name_Addr_Header:156,Record_Route:176,Request_Response:81,SIP_URI:45,Subscription_State:186,Supported:191,Require:182,Via:194,absoluteURI:84,Call_ID:118,Content_Disposition:130,Content_Length:135,Content_Type:136,CSeq:146,displayName:122,Event:149,From:151,host:52,Max_Forwards:154,Min_SE:213,Proxy_Authenticate:157,quoted_string:40,Refer_To:178,Replaces:179,Session_Expires:210,stun_URI:217,To:192,turn_URI:223,uuid:226,WWW_Authenticate:209,challenge:158,sipfrag:230,Referred_By:231},o=119,a=["\r\n",T("\r\n",!1),/^[0-9]/,v([["0","9"]],!1,!1),/^[a-zA-Z]/,v([["a","z"],["A","Z"]],!1,!1),/^[0-9a-fA-F]/,v([["0","9"],["a","f"],["A","F"]],!1,!1),/^[\0-\xFF]/,v([["\0","ÿ"]],!1,!1),/^["]/,v(['"'],!1,!1)," ",T(" ",!1),"\t",T("\t",!1),/^[a-zA-Z0-9]/,v([["a","z"],["A","Z"],["0","9"]],!1,!1),";",T(";",!1),"/",T("/",!1),"?",T("?",!1),":",T(":",!1),"@",T("@",!1),"&",T("&",!1),"=",T("=",!1),"+",T("+",!1),"$",T("$",!1),",",T(",",!1),"-",T("-",!1),"_",T("_",!1),".",T(".",!1),"!",T("!",!1),"~",T("~",!1),"*",T("*",!1),"'",T("'",!1),"(",T("(",!1),")",T(")",!1),"%",T("%",!1),function(){return" "},function(){return":"},/^[!-~]/,v([["!","~"]],!1,!1),/^[\x80-\uFFFF]/,v([["","￿"]],!1,!1),/^[\x80-\xBF]/,v([["","¿"]],!1,!1),/^[a-f]/,v([["a","f"]],!1,!1),"`",T("`",!1),"<",T("<",!1),">",T(">",!1),"\\",T("\\",!1),"[",T("[",!1),"]",T("]",!1),"{",T("{",!1),"}",T("}",!1),function(){return"*"},function(){return"/"},function(){return"="},function(){return"("},function(){return")"},function(){return">"},function(){return"<"},function(){return","},function(){return";"},function(){return":"},function(){return'"'},/^[!-']/,v([["!","'"]],!1,!1),/^[*-[]/,v([["*","["]],!1,!1),/^[\]-~]/,v([["]","~"]],!1,!1),function(e){return e},/^[#-[]/,v([["#","["]],!1,!1),/^[\0-\t]/,v([["\0","\t"]],!1,!1),/^[\x0B-\f]/,v([["\v","\f"]],!1,!1),/^[\x0E-\x7F]/,v([["",""]],!1,!1),function(){t.data.uri=new t.SIP.URI(t.data.scheme,t.data.user,t.data.host,t.data.port),delete t.data.scheme,delete t.data.user,delete t.data.host,delete t.data.host_type,delete t.data.port},function(){t.data.uri=new t.SIP.URI(t.data.scheme,t.data.user,t.data.host,t.data.port,t.data.uri_params,t.data.uri_headers),delete t.data.scheme,delete t.data.user,delete t.data.host,delete t.data.host_type,delete t.data.port,delete t.data.uri_params,"SIP_URI"===t.startRule&&(t.data=t.data.uri)},"sips",T("sips",!0),"sip",T("sip",!0),function(e){t.data.scheme=e},function(){t.data.user=decodeURIComponent(m().slice(0,-1))},function(){t.data.password=m()},function(){return t.data.host=m(),t.data.host},function(){return t.data.host_type="domain",m()},/^[a-zA-Z0-9_\-]/,v([["a","z"],["A","Z"],["0","9"],"_","-"],!1,!1),/^[a-zA-Z0-9\-]/,v([["a","z"],["A","Z"],["0","9"],"-"],!1,!1),function(){return t.data.host_type="IPv6",m()},"::",T("::",!1),function(){return t.data.host_type="IPv6",m()},function(){return t.data.host_type="IPv4",m()},"25",T("25",!1),/^[0-5]/,v([["0","5"]],!1,!1),"2",T("2",!1),/^[0-4]/,v([["0","4"]],!1,!1),"1",T("1",!1),/^[1-9]/,v([["1","9"]],!1,!1),function(e){return e=parseInt(e.join("")),t.data.port=e,e},"transport=",T("transport=",!0),"udp",T("udp",!0),"tcp",T("tcp",!0),"sctp",T("sctp",!0),"tls",T("tls",!0),function(e){t.data.uri_params||(t.data.uri_params={}),t.data.uri_params.transport=e.toLowerCase()},"user=",T("user=",!0),"phone",T("phone",!0),"ip",T("ip",!0),function(e){t.data.uri_params||(t.data.uri_params={}),t.data.uri_params.user=e.toLowerCase()},"method=",T("method=",!0),function(e){t.data.uri_params||(t.data.uri_params={}),t.data.uri_params.method=e},"ttl=",T("ttl=",!0),function(e){t.data.params||(t.data.params={}),t.data.params.ttl=e},"maddr=",T("maddr=",!0),function(e){t.data.uri_params||(t.data.uri_params={}),t.data.uri_params.maddr=e},"lr",T("lr",!0),function(){t.data.uri_params||(t.data.uri_params={}),t.data.uri_params.lr=void 0},function(e,n){t.data.uri_params||(t.data.uri_params={}),n=null===n?void 0:n[1],t.data.uri_params[e.toLowerCase()]=n},function(e,n){e=e.join("").toLowerCase(),n=n.join(""),t.data.uri_headers||(t.data.uri_headers={}),t.data.uri_headers[e]?t.data.uri_headers[e].push(n):t.data.uri_headers[e]=[n]},function(){"Refer_To"===t.startRule&&(t.data.uri=new t.SIP.URI(t.data.scheme,t.data.user,t.data.host,t.data.port,t.data.uri_params,t.data.uri_headers),delete t.data.scheme,delete t.data.user,delete t.data.host,delete t.data.host_type,delete t.data.port,delete t.data.uri_params)},"//",T("//",!1),function(){t.data.scheme=m()},T("SIP",!0),function(){t.data.sip_version=m()},"INVITE",T("INVITE",!1),"ACK",T("ACK",!1),"VXACH",T("VXACH",!1),"OPTIONS",T("OPTIONS",!1),"BYE",T("BYE",!1),"CANCEL",T("CANCEL",!1),"REGISTER",T("REGISTER",!1),"SUBSCRIBE",T("SUBSCRIBE",!1),"NOTIFY",T("NOTIFY",!1),"REFER",T("REFER",!1),"PUBLISH",T("PUBLISH",!1),function(){return t.data.method=m(),t.data.method},function(e){t.data.status_code=parseInt(e.join(""))},function(){t.data.reason_phrase=m()},function(){t.data=m()},function(){var e,n;for(n=t.data.multi_header.length,e=0;e<n;e++)if(null===t.data.multi_header[e].parsed){t.data=null;break}null!==t.data?t.data=t.data.multi_header:t.data=-1},function(){var e;t.data.multi_header||(t.data.multi_header=[]);try{e=new t.SIP.NameAddrHeader(t.data.uri,t.data.displayName,t.data.params),delete t.data.uri,delete t.data.displayName,delete t.data.params}catch(t){e=null}t.data.multi_header.push({position:l,offset:g().start.offset,parsed:e})},function(e){'"'===(e=m().trim())[0]&&(e=e.substring(1,e.length-1)),t.data.displayName=e},"q",T("q",!0),function(e){t.data.params||(t.data.params={}),t.data.params.q=e},"expires",T("expires",!0),function(e){t.data.params||(t.data.params={}),t.data.params.expires=e},function(e){return parseInt(e.join(""))},"0",T("0",!1),function(){return parseFloat(m())},function(e,n){t.data.params||(t.data.params={}),n=null===n?void 0:n[1],t.data.params[e.toLowerCase()]=n},"render",T("render",!0),"session",T("session",!0),"icon",T("icon",!0),"alert",T("alert",!0),function(){"Content_Disposition"===t.startRule&&(t.data.type=m().toLowerCase())},"handling",T("handling",!0),"optional",T("optional",!0),"required",T("required",!0),function(e){t.data=parseInt(e.join(""))},function(){t.data=m()},"text",T("text",!0),"image",T("image",!0),"audio",T("audio",!0),"video",T("video",!0),"application",T("application",!0),"message",T("message",!0),"multipart",T("multipart",!0),"x-",T("x-",!0),function(e){t.data.value=parseInt(e.join(""))},function(e){t.data=e},function(e){t.data.event=e.toLowerCase()},function(){var e=t.data.tag;t.data=new t.SIP.NameAddrHeader(t.data.uri,t.data.displayName,t.data.params),e&&t.data.setParam("tag",e)},"tag",T("tag",!0),function(e){t.data.tag=e},function(e){t.data=parseInt(e.join(""))},function(e){t.data=e},function(){t.data=new t.SIP.NameAddrHeader(t.data.uri,t.data.displayName,t.data.params)},"digest",T("Digest",!0),"realm",T("realm",!0),function(e){t.data.realm=e},"domain",T("domain",!0),"nonce",T("nonce",!0),function(e){t.data.nonce=e},"opaque",T("opaque",!0),function(e){t.data.opaque=e},"stale",T("stale",!0),"true",T("true",!0),function(){t.data.stale=!0},"false",T("false",!0),function(){t.data.stale=!1},"algorithm",T("algorithm",!0),"md5",T("MD5",!0),"md5-sess",T("MD5-sess",!0),function(e){t.data.algorithm=e.toUpperCase()},"qop",T("qop",!0),"auth-int",T("auth-int",!0),"auth",T("auth",!0),function(e){t.data.qop||(t.data.qop=[]),t.data.qop.push(e.toLowerCase())},function(e){t.data.value=parseInt(e.join(""))},function(){var e,n;for(n=t.data.multi_header.length,e=0;e<n;e++)if(null===t.data.multi_header[e].parsed){t.data=null;break}null!==t.data?t.data=t.data.multi_header:t.data=-1},function(){var e;t.data.multi_header||(t.data.multi_header=[]);try{e=new t.SIP.NameAddrHeader(t.data.uri,t.data.displayName,t.data.params),delete t.data.uri,delete t.data.displayName,delete t.data.params}catch(t){e=null}t.data.multi_header.push({position:l,offset:g().start.offset,parsed:e})},function(){t.data=new t.SIP.NameAddrHeader(t.data.uri,t.data.displayName,t.data.params)},function(){t.data.replaces_from_tag&&t.data.replaces_to_tag||(t.data=-1)},function(){t.data={call_id:t.data}},"from-tag",T("from-tag",!0),function(e){t.data.replaces_from_tag=e},"to-tag",T("to-tag",!0),function(e){t.data.replaces_to_tag=e},"early-only",T("early-only",!0),function(){t.data.early_only=!0},function(e,t){return t},function(e,t){return function(e,t){return[e].concat(t)}(e,t)},function(e){"Require"===t.startRule&&(t.data=e||[])},function(e){t.data.value=parseInt(e.join(""))},"active",T("active",!0),"pending",T("pending",!0),"terminated",T("terminated",!0),function(){t.data.state=m()},"reason",T("reason",!0),function(e){void 0!==e&&(t.data.reason=e)},function(e){void 0!==e&&(t.data.expires=e)},"retry_after",T("retry_after",!0),function(e){void 0!==e&&(t.data.retry_after=e)},"deactivated",T("deactivated",!0),"probation",T("probation",!0),"rejected",T("rejected",!0),"timeout",T("timeout",!0),"giveup",T("giveup",!0),"noresource",T("noresource",!0),"invariant",T("invariant",!0),function(e){"Supported"===t.startRule&&(t.data=e||[])},function(){var e=t.data.tag;t.data=new t.SIP.NameAddrHeader(t.data.uri,t.data.displayName,t.data.params),e&&t.data.setParam("tag",e)},"ttl",T("ttl",!0),function(e){t.data.ttl=e},"maddr",T("maddr",!0),function(e){t.data.maddr=e},"received",T("received",!0),function(e){t.data.received=e},"branch",T("branch",!0),function(e){t.data.branch=e},"rport",T("rport",!0),function(){"undefined"!=typeof response_port&&(t.data.rport=response_port.join(""))},function(e){t.data.protocol=e},T("UDP",!0),T("TCP",!0),T("TLS",!0),T("SCTP",!0),function(e){t.data.transport=e},function(){t.data.host=m()},function(e){t.data.port=parseInt(e.join(""))},function(e){return parseInt(e.join(""))},function(e){"Session_Expires"===t.startRule&&(t.data.deltaSeconds=e)},"refresher",T("refresher",!1),"uas",T("uas",!1),"uac",T("uac",!1),function(e){"Session_Expires"===t.startRule&&(t.data.refresher=e)},function(e){"Min_SE"===t.startRule&&(t.data=e)},"stuns",T("stuns",!0),"stun",T("stun",!0),function(e){t.data.scheme=e},function(e){t.data.host=e},"?transport=",T("?transport=",!1),"turns",T("turns",!0),"turn",T("turn",!0),function(){t.data.transport=transport},function(){t.data=m()},"Referred-By",T("Referred-By",!1),"b",T("b",!1),"cid",T("cid",!1)],u=[_('2 ""6 7!'),_('4"""5!7#'),_('4$""5!7%'),_('4&""5!7\''),_(";'.# &;("),_('4(""5!7)'),_('4*""5!7+'),_('2,""6,7-'),_('2.""6.7/'),_('40""5!71'),_('22""6273. &24""6475.} &26""6677.q &28""6879.e &2:""6:7;.Y &2<""6<7=.M &2>""6>7?.A &2@""6@7A.5 &2B""6B7C.) &2D""6D7E'),_(";).# &;,"),_('2F""6F7G.} &2H""6H7I.q &2J""6J7K.e &2L""6L7M.Y &2N""6N7O.M &2P""6P7Q.A &2R""6R7S.5 &2T""6T7U.) &2V""6V7W'),_('%%2X""6X7Y/5#;#/,$;#/#$+#)(#\'#("\'#&\'#/"!&,)'),_('%%$;$0#*;$&/,#; /#$+")("\'#&\'#." &"/=#$;$/&#0#*;$&&&#/\'$8":Z" )("\'#&\'#'),_(';.." &"'),_("%$;'.# &;(0)*;'.# &;(&/?#28\"\"6879/0$;//'$8#:[# )(#'#(\"'#&'#"),_('%%$;2/&#0#*;2&&&#/g#$%$;.0#*;.&/,#;2/#$+")("\'#&\'#0=*%$;.0#*;.&/,#;2/#$+")("\'#&\'#&/#$+")("\'#&\'#/"!&,)'),_('4\\""5!7].# &;3'),_('4^""5!7_'),_('4`""5!7a'),_(';!.) &4b""5!7c'),_('%$;). &2F""6F7G. &2J""6J7K.} &2L""6L7M.q &2X""6X7Y.e &2P""6P7Q.Y &2H""6H7I.M &2@""6@7A.A &2d""6d7e.5 &2R""6R7S.) &2N""6N7O/#0*;). &2F""6F7G. &2J""6J7K.} &2L""6L7M.q &2X""6X7Y.e &2P""6P7Q.Y &2H""6H7I.M &2@""6@7A.A &2d""6d7e.5 &2R""6R7S.) &2N""6N7O&&&#/"!&,)'),_('%$;). &2F""6F7G.} &2L""6L7M.q &2X""6X7Y.e &2P""6P7Q.Y &2H""6H7I.M &2@""6@7A.A &2d""6d7e.5 &2R""6R7S.) &2N""6N7O/#0*;). &2F""6F7G.} &2L""6L7M.q &2X""6X7Y.e &2P""6P7Q.Y &2H""6H7I.M &2@""6@7A.A &2d""6d7e.5 &2R""6R7S.) &2N""6N7O&&&#/"!&,)'),_('2T""6T7U.ã &2V""6V7W.× &2f""6f7g.Ë &2h""6h7i.¿ &2:""6:7;.³ &2D""6D7E.§ &22""6273. &28""6879. &2j""6j7k. &;&.} &24""6475.q &2l""6l7m.e &2n""6n7o.Y &26""6677.M &2>""6>7?.A &2p""6p7q.5 &2r""6r7s.) &;\'.# &;('),_('%$;).ī &2F""6F7G.ğ &2J""6J7K.ē &2L""6L7M.ć &2X""6X7Y.û &2P""6P7Q.ï &2H""6H7I.ã &2@""6@7A.× &2d""6d7e.Ë &2R""6R7S.¿ &2N""6N7O.³ &2T""6T7U.§ &2V""6V7W. &2f""6f7g. &2h""6h7i. &28""6879.w &2j""6j7k.k &;&.e &24""6475.Y &2l""6l7m.M &2n""6n7o.A &26""6677.5 &2p""6p7q.) &2r""6r7s/Ĵ#0ı*;).ī &2F""6F7G.ğ &2J""6J7K.ē &2L""6L7M.ć &2X""6X7Y.û &2P""6P7Q.ï &2H""6H7I.ã &2@""6@7A.× &2d""6d7e.Ë &2R""6R7S.¿ &2N""6N7O.³ &2T""6T7U.§ &2V""6V7W. &2f""6f7g. &2h""6h7i. &28""6879.w &2j""6j7k.k &;&.e &24""6475.Y &2l""6l7m.M &2n""6n7o.A &26""6677.5 &2p""6p7q.) &2r""6r7s&&&#/"!&,)'),_("%;//?#2P\"\"6P7Q/0$;//'$8#:t# )(#'#(\"'#&'#"),_("%;//?#24\"\"6475/0$;//'$8#:u# )(#'#(\"'#&'#"),_("%;//?#2>\"\"6>7?/0$;//'$8#:v# )(#'#(\"'#&'#"),_("%;//?#2T\"\"6T7U/0$;//'$8#:w# )(#'#(\"'#&'#"),_("%;//?#2V\"\"6V7W/0$;//'$8#:x# )(#'#(\"'#&'#"),_('%2h""6h7i/0#;//\'$8":y" )("\'#&\'#'),_('%;//6#2f""6f7g/\'$8":z" )("\'#&\'#'),_("%;//?#2D\"\"6D7E/0$;//'$8#:{# )(#'#(\"'#&'#"),_("%;//?#22\"\"6273/0$;//'$8#:|# )(#'#(\"'#&'#"),_("%;//?#28\"\"6879/0$;//'$8#:}# )(#'#(\"'#&'#"),_("%;//0#;&/'$8\":~\" )(\"'#&'#"),_("%;&/0#;//'$8\":~\" )(\"'#&'#"),_("%;=/T#$;G.) &;K.# &;F0/*;G.) &;K.# &;F&/,$;>/#$+#)(#'#(\"'#&'#"),_('4""5!7.A &4""5!7.5 &4""5!7.) &;3.# &;.'),_("%%;//Q#;&/H$$;J.# &;K0)*;J.# &;K&/,$;&/#$+$)($'#(#'#(\"'#&'#/\"!&,)"),_("%;//]#;&/T$%$;J.# &;K0)*;J.# &;K&/\"!&,)/1$;&/($8$:$!!)($'#(#'#(\"'#&'#"),_(';..G &2L""6L7M.; &4""5!7./ &4""5!7.# &;3'),_('%2j""6j7k/J#4""5!7.5 &4""5!7.) &4""5!7/#$+")("\'#&\'#'),_("%;N/M#28\"\"6879/>$;O.\" &\"/0$;S/'$8$:$ )($'#(#'#(\"'#&'#"),_("%;N/d#28\"\"6879/U$;O.\" &\"/G$;S/>$;_/5$;l.\" &\"/'$8&:& )(&'#(%'#($'#(#'#(\"'#&'#"),_('%3""5$7.) &3""5#7/\' 8!:!! )'),_('%;P/]#%28""6879/,#;R/#$+")("\'#&\'#." &"/6$2:""6:7;/\'$8#:# )(#\'#("\'#&\'#'),_("$;+.) &;-.# &;Q/2#0/*;+.) &;-.# &;Q&&&#"),_('2<""6<7=.q &2>""6>7?.e &2@""6@7A.Y &2B""6B7C.M &2D""6D7E.A &22""6273.5 &26""6677.) &24""6475'),_('%$;+._ &;-.Y &2<""6<7=.M &2>""6>7?.A &2@""6@7A.5 &2B""6B7C.) &2D""6D7E0e*;+._ &;-.Y &2<""6<7=.M &2>""6>7?.A &2@""6@7A.5 &2B""6B7C.) &2D""6D7E&/& 8!:! )'),_('%;T/J#%28""6879/,#;^/#$+")("\'#&\'#." &"/#$+")("\'#&\'#'),_("%;U.) &;\\.# &;X/& 8!:! )"),_('%$%;V/2#2J""6J7K/#$+")("\'#&\'#0<*%;V/2#2J""6J7K/#$+")("\'#&\'#&/D#;W/;$2J""6J7K." &"/\'$8#:# )(#\'#("\'#&\'#'),_('$4""5!7/,#0)*4""5!7&&&#'),_('%4$""5!7%/?#$4""5!70)*4""5!7&/#$+")("\'#&\'#'),_('%2l""6l7m/?#;Y/6$2n""6n7o/\'$8#:# )(#\'#("\'#&\'#'),_('%%;Z/³#28""6879/¤$;Z/$28""6879/$;Z/$28""6879/t$;Z/k$28""6879/\\$;Z/S$28""6879/D$;Z/;$28""6879/,$;[/#$+-)(-\'#(,\'#(+\'#(*\'#()\'#((\'#(\'\'#(&\'#(%\'#($\'#(#\'#("\'#&\'#.ސ &%2""67/¤#;Z/$28""6879/$;Z/$28""6879/t$;Z/k$28""6879/\\$;Z/S$28""6879/D$;Z/;$28""6879/,$;[/#$+,)(,\'#(+\'#(*\'#()\'#((\'#(\'\'#(&\'#(%\'#($\'#(#\'#("\'#&\'#.۹ &%2""67/#;Z/$28""6879/t$;Z/k$28""6879/\\$;Z/S$28""6879/D$;Z/;$28""6879/,$;[/#$+*)(*\'#()\'#((\'#(\'\'#(&\'#(%\'#($\'#(#\'#("\'#&\'#.ٺ &%2""67/t#;Z/k$28""6879/\\$;Z/S$28""6879/D$;Z/;$28""6879/,$;[/#$+()((\'#(\'\'#(&\'#(%\'#($\'#(#\'#("\'#&\'#.ؓ &%2""67/\\#;Z/S$28""6879/D$;Z/;$28""6879/,$;[/#$+&)(&\'#(%\'#($\'#(#\'#("\'#&\'#.ׄ &%2""67/D#;Z/;$28""6879/,$;[/#$+$)($\'#(#\'#("\'#&\'#.֍ &%2""67/,#;[/#$+")("\'#&\'#.ծ &%2""67/,#;Z/#$+")("\'#&\'#.Տ &%;Z/#2""67/$;Z/$28""6879/t$;Z/k$28""6879/\\$;Z/S$28""6879/D$;Z/;$28""6879/,$;[/#$++)(+\'#(*\'#()\'#((\'#(\'\'#(&\'#(%\'#($\'#(#\'#("\'#&\'#.Ӈ &%;Z/ª#%28""6879/,#;Z/#$+")("\'#&\'#." &"/$2""67/t$;Z/k$28""6879/\\$;Z/S$28""6879/D$;Z/;$28""6879/,$;[/#$+*)(*\'#()\'#((\'#(\'\'#(&\'#(%\'#($\'#(#\'#("\'#&\'#.а &%;Z/¹#%28""6879/,#;Z/#$+")("\'#&\'#." &"/$%28""6879/,#;Z/#$+")("\'#&\'#." &"/k$2""67/\\$;Z/S$28""6879/D$;Z/;$28""6879/,$;[/#$+))()\'#((\'#(\'\'#(&\'#(%\'#($\'#(#\'#("\'#&\'#.Ί &%;Z/È#%28""6879/,#;Z/#$+")("\'#&\'#." &"/¡$%28""6879/,#;Z/#$+")("\'#&\'#." &"/z$%28""6879/,#;Z/#$+")("\'#&\'#." &"/S$2""67/D$;Z/;$28""6879/,$;[/#$+()((\'#(\'\'#(&\'#(%\'#($\'#(#\'#("\'#&\'#.˕ &%;Z/×#%28""6879/,#;Z/#$+")("\'#&\'#." &"/°$%28""6879/,#;Z/#$+")("\'#&\'#." &"/$%28""6879/,#;Z/#$+")("\'#&\'#." &"/b$%28""6879/,#;Z/#$+")("\'#&\'#." &"/;$2""67/,$;[/#$+\')(\'\'#(&\'#(%\'#($\'#(#\'#("\'#&\'#.ȑ &%;Z/þ#%28""6879/,#;Z/#$+")("\'#&\'#." &"/×$%28""6879/,#;Z/#$+")("\'#&\'#." &"/°$%28""6879/,#;Z/#$+")("\'#&\'#." &"/$%28""6879/,#;Z/#$+")("\'#&\'#." &"/b$%28""6879/,#;Z/#$+")("\'#&\'#." &"/;$2""67/,$;Z/#$+()((\'#(\'\'#(&\'#(%\'#($\'#(#\'#("\'#&\'#.Ħ &%;Z/Ĝ#%28""6879/,#;Z/#$+")("\'#&\'#." &"/õ$%28""6879/,#;Z/#$+")("\'#&\'#." &"/Î$%28""6879/,#;Z/#$+")("\'#&\'#." &"/§$%28""6879/,#;Z/#$+")("\'#&\'#." &"/$%28""6879/,#;Z/#$+")("\'#&\'#." &"/Y$%28""6879/,#;Z/#$+")("\'#&\'#." &"/2$2""67/#$+()((\'#(\'\'#(&\'#(%\'#($\'#(#\'#("\'#&\'#/& 8!: ! )'),_('%;#/M#;#." &"/?$;#." &"/1$;#." &"/#$+$)($\'#(#\'#("\'#&\'#'),_("%;Z/;#28\"\"6879/,$;Z/#$+#)(#'#(\"'#&'#.# &;\\"),_("%;]/o#2J\"\"6J7K/`$;]/W$2J\"\"6J7K/H$;]/?$2J\"\"6J7K/0$;]/'$8':¡' )(''#(&'#(%'#($'#(#'#(\"'#&'#"),_('%2¢""6¢7£/2#4¤""5!7¥/#$+")("\'#&\'#. &%2¦""6¦7§/;#4¨""5!7©/,$;!/#$+#)(#\'#("\'#&\'#.j &%2ª""6ª7«/5#;!/,$;!/#$+#)(#\'#("\'#&\'#.B &%4¬""5!7­/,#;!/#$+")("\'#&\'#.# &;!'),_('%%;!." &"/[#;!." &"/M$;!." &"/?$;!." &"/1$;!." &"/#$+%)(%\'#($\'#(#\'#("\'#&\'#/\' 8!:®!! )'),_('$%22""6273/,#;`/#$+")("\'#&\'#0<*%22""6273/,#;`/#$+")("\'#&\'#&'),_(";a.A &;b.; &;c.5 &;d./ &;e.) &;f.# &;g"),_('%3¯""5*7°/a#3±""5#7².G &3³""5#7´.; &3µ""5$7¶./ &3·""5#7¸.# &;6/($8":¹"! )("\'#&\'#'),_('%3º""5%7»/I#3¼""5%7½./ &3¾""5"7¿.# &;6/($8":À"! )("\'#&\'#'),_('%3Á""5\'7Â/1#;/($8":Ã"! )("\'#&\'#'),_('%3Ä""5$7Å/1#;ð/($8":Æ"! )("\'#&\'#'),_('%3Ç""5&7È/1#;T/($8":É"! )("\'#&\'#'),_('%3Ê""5"7Ë/N#%2>""6>7?/,#;6/#$+")("\'#&\'#." &"/\'$8":Ì" )("\'#&\'#'),_('%;h/P#%2>""6>7?/,#;i/#$+")("\'#&\'#." &"/)$8":Í""! )("\'#&\'#'),_('%$;j/&#0#*;j&&&#/"!&,)'),_('%$;j/&#0#*;j&&&#/"!&,)'),_(";k.) &;+.# &;-"),_('2l""6l7m.e &2n""6n7o.Y &24""6475.M &28""6879.A &2<""6<7=.5 &2@""6@7A.) &2B""6B7C'),_('%26""6677/n#;m/e$$%2<""6<7=/,#;m/#$+")("\'#&\'#0<*%2<""6<7=/,#;m/#$+")("\'#&\'#&/#$+#)(#\'#("\'#&\'#'),_('%;n/A#2>""6>7?/2$;o/)$8#:Î#"" )(#\'#("\'#&\'#'),_("$;p.) &;+.# &;-/2#0/*;p.) &;+.# &;-&&&#"),_("$;p.) &;+.# &;-0/*;p.) &;+.# &;-&"),_('2l""6l7m.e &2n""6n7o.Y &24""6475.M &26""6677.A &28""6879.5 &2@""6@7A.) &2B""6B7C'),_(";.# &;r"),_("%;/G#;'/>$;s/5$;'/,$;/#$+%)(%'#($'#(#'#(\"'#&'#"),_(";M.# &;t"),_("%;/E#28\"\"6879/6$;u.# &;x/'$8#:Ï# )(#'#(\"'#&'#"),_('%;v.# &;w/J#%26""6677/,#;/#$+")("\'#&\'#." &"/#$+")("\'#&\'#'),_('%2Ð""6Ð7Ñ/:#;/1$;w." &"/#$+#)(#\'#("\'#&\'#'),_('%24""6475/,#;{/#$+")("\'#&\'#'),_("%;z/3#$;y0#*;y&/#$+\")(\"'#&'#"),_(";*.) &;+.# &;-"),_(';+. &;-. &22""6273.} &26""6677.q &28""6879.e &2:""6:7;.Y &2<""6<7=.M &2>""6>7?.A &2@""6@7A.5 &2B""6B7C.) &2D""6D7E'),_('%;|/e#$%24""6475/,#;|/#$+")("\'#&\'#0<*%24""6475/,#;|/#$+")("\'#&\'#&/#$+")("\'#&\'#'),_('%$;~0#*;~&/e#$%22""6273/,#;}/#$+")("\'#&\'#0<*%22""6273/,#;}/#$+")("\'#&\'#&/#$+")("\'#&\'#'),_("$;~0#*;~&"),_(';+.w &;-.q &28""6879.e &2:""6:7;.Y &2<""6<7=.M &2>""6>7?.A &2@""6@7A.5 &2B""6B7C.) &2D""6D7E'),_('%%;"/#$;".G &;!.A &2@""6@7A.5 &2F""6F7G.) &2J""6J7K0M*;".G &;!.A &2@""6@7A.5 &2F""6F7G.) &2J""6J7K&/#$+")("\'#&\'#/& 8!:Ò! )'),_(";.# &;"),_('%%;O/2#2:""6:7;/#$+")("\'#&\'#." &"/,#;S/#$+")("\'#&\'#." &"'),_('$;+. &;-.} &2B""6B7C.q &2D""6D7E.e &22""6273.Y &28""6879.M &2:""6:7;.A &2<""6<7=.5 &2>""6>7?.) &2@""6@7A/#0*;+. &;-.} &2B""6B7C.q &2D""6D7E.e &22""6273.Y &28""6879.M &2:""6:7;.A &2<""6<7=.5 &2>""6>7?.) &2@""6@7A&&&#'),_("$;y0#*;y&"),_('%3""5#7Ó/q#24""6475/b$$;!/&#0#*;!&&&#/L$2J""6J7K/=$$;!/&#0#*;!&&&#/\'$8%:Ô% )(%\'#($\'#(#\'#("\'#&\'#'),_('2Õ""6Õ7Ö'),_('2×""6×7Ø'),_('2Ù""6Ù7Ú'),_('2Û""6Û7Ü'),_('2Ý""6Ý7Þ'),_('2ß""6ß7à'),_('2á""6á7â'),_('2ã""6ã7ä'),_('2å""6å7æ'),_('2ç""6ç7è'),_('2é""6é7ê'),_("%;.Y &;.S &;.M &;.G &;.A &;.; &;.5 &;./ &;.) &;.# &;6/& 8!:ë! )"),_("%;/G#;'/>$;/5$;'/,$;/#$+%)(%'#($'#(#'#(\"'#&'#"),_("%;/' 8!:ì!! )"),_("%;!/5#;!/,$;!/#$+#)(#'#(\"'#&'#"),_("%$;*.A &;+.; &;-.5 &;3./ &;4.) &;'.# &;(0G*;*.A &;+.; &;-.5 &;3./ &;4.) &;'.# &;(&/& 8!:í! )"),_("%;¶/Y#$%;A/,#;¶/#$+\")(\"'#&'#06*%;A/,#;¶/#$+\")(\"'#&'#&/#$+\")(\"'#&'#"),_('%;9/N#%2:""6:7;/,#;9/#$+")("\'#&\'#." &"/\'$8":î" )("\'#&\'#'),_("%;:.c &%;/Y#$%;A/,#;/#$+\")(\"'#&'#06*%;A/,#;/#$+\")(\"'#&'#&/#$+\")(\"'#&'#/& 8!:ï! )"),_("%;L.# &;/]#$%;B/,#;/#$+\")(\"'#&'#06*%;B/,#;/#$+\")(\"'#&'#&/'$8\":ð\" )(\"'#&'#"),_("%;.\" &\"/>#;@/5$;M/,$;?/#$+$)($'#(#'#(\"'#&'#"),_("%%;6/Y#$%;./,#;6/#$+\")(\"'#&'#06*%;./,#;6/#$+\")(\"'#&'#&/#$+\")(\"'#&'#.# &;H/' 8!:ñ!! )"),_(";.) &;.# &; "),_("%3ò\"\"5!7ó/:#;</1$;/($8#:ô#! )(#'#(\"'#&'#"),_("%3õ\"\"5'7ö/:#;</1$;/($8#:÷#! )(#'#(\"'#&'#"),_("%$;!/&#0#*;!&&&#/' 8!:ø!! )"),_('%2ù""6ù7ú/o#%2J""6J7K/M#;!." &"/?$;!." &"/1$;!." &"/#$+$)($\'#(#\'#("\'#&\'#." &"/\'$8":û" )("\'#&\'#'),_('%;6/J#%;</,#;¡/#$+")("\'#&\'#." &"/)$8":ü""! )("\'#&\'#'),_(";6.) &;T.# &;H"),_("%;£/Y#$%;B/,#;¤/#$+\")(\"'#&'#06*%;B/,#;¤/#$+\")(\"'#&'#&/#$+\")(\"'#&'#"),_('%3ý""5&7þ.G &3ÿ""5\'7Ā.; &3ā""5$7Ă./ &3ă""5%7Ą.# &;6/& 8!:ą! )'),_(";¥.# &; "),_('%3Ć""5(7ć/M#;</D$3Ĉ""5(7ĉ./ &3Ċ""5(7ċ.# &;6/#$+#)(#\'#("\'#&\'#'),_("%;6/Y#$%;A/,#;6/#$+\")(\"'#&'#06*%;A/,#;6/#$+\")(\"'#&'#&/#$+\")(\"'#&'#"),_("%$;!/&#0#*;!&&&#/' 8!:Č!! )"),_("%;©/& 8!:č! )"),_("%;ª/k#;;/b$;¯/Y$$%;B/,#;°/#$+\")(\"'#&'#06*%;B/,#;°/#$+\")(\"'#&'#&/#$+$)($'#(#'#(\"'#&'#"),_(";«.# &;¬"),_('3Ď""5$7ď.S &3Đ""5%7đ.G &3Ē""5%7ē.; &3Ĕ""5%7ĕ./ &3Ė""5+7ė.# &;­'),_('3Ę""5\'7ę./ &3Ě""5)7ě.# &;­'),_(";6.# &;®"),_('%3Ĝ""5"7ĝ/,#;6/#$+")("\'#&\'#'),_(";­.# &;6"),_("%;6/5#;</,$;±/#$+#)(#'#(\"'#&'#"),_(";6.# &;H"),_("%;³/5#;./,$;/#$+#)(#'#(\"'#&'#"),_("%$;!/&#0#*;!&&&#/' 8!:Ğ!! )"),_("%;/' 8!:ğ!! )"),_('%;¶/^#$%;B/,#; /#$+")("\'#&\'#06*%;B/,#; /#$+")("\'#&\'#&/($8":Ġ"!!)("\'#&\'#'),_('%%;7/e#$%2J""6J7K/,#;7/#$+")("\'#&\'#0<*%2J""6J7K/,#;7/#$+")("\'#&\'#&/#$+")("\'#&\'#/"!&,)'),_("%;L.# &;/]#$%;B/,#;¸/#$+\")(\"'#&'#06*%;B/,#;¸/#$+\")(\"'#&'#&/'$8\":ġ\" )(\"'#&'#"),_(";¹.# &; "),_("%3Ģ\"\"5#7ģ/:#;</1$;6/($8#:Ĥ#! )(#'#(\"'#&'#"),_("%$;!/&#0#*;!&&&#/' 8!:ĥ!! )"),_("%;/' 8!:Ħ!! )"),_("%$;0#*;&/x#;@/o$;M/f$;?/]$$%;B/,#; /#$+\")(\"'#&'#06*%;B/,#; /#$+\")(\"'#&'#&/'$8%:ħ% )(%'#($'#(#'#(\"'#&'#"),_(";¾"),_("%3Ĩ\"\"5&7ĩ/k#;./b$;Á/Y$$%;A/,#;Á/#$+\")(\"'#&'#06*%;A/,#;Á/#$+\")(\"'#&'#&/#$+$)($'#(#'#(\"'#&'#.# &;¿"),_("%;6/k#;./b$;À/Y$$%;A/,#;À/#$+\")(\"'#&'#06*%;A/,#;À/#$+\")(\"'#&'#&/#$+$)($'#(#'#(\"'#&'#"),_("%;6/;#;</2$;6.# &;H/#$+#)(#'#(\"'#&'#"),_(";Â.G &;Ä.A &;Æ.; &;È.5 &;É./ &;Ê.) &;Ë.# &;À"),_("%3Ī\"\"5%7ī/5#;</,$;Ã/#$+#)(#'#(\"'#&'#"),_("%;I/' 8!:Ĭ!! )"),_("%3ĭ\"\"5&7Į/#;</$;D/$;Å/|$$%$;'/&#0#*;'&&&#/,#;Å/#$+\")(\"'#&'#0C*%$;'/&#0#*;'&&&#/,#;Å/#$+\")(\"'#&'#&/,$;E/#$+&)(&'#(%'#($'#(#'#(\"'#&'#"),_(";t.# &;w"),_("%3į\"\"5%7İ/5#;</,$;Ç/#$+#)(#'#(\"'#&'#"),_("%;I/' 8!:ı!! )"),_("%3Ĳ\"\"5&7ĳ/:#;</1$;I/($8#:Ĵ#! )(#'#(\"'#&'#"),_('%3ĵ""5%7Ķ/]#;</T$%3ķ""5$7ĸ/& 8!:Ĺ! ).4 &%3ĺ""5%7Ļ/& 8!:ļ! )/#$+#)(#\'#("\'#&\'#'),_('%3Ľ""5)7ľ/R#;</I$3Ŀ""5#7ŀ./ &3Ł""5(7ł.# &;6/($8#:Ń#! )(#\'#("\'#&\'#'),_('%3ń""5#7Ņ/#;</$;D/$%;Ì/e#$%2D""6D7E/,#;Ì/#$+")("\'#&\'#0<*%2D""6D7E/,#;Ì/#$+")("\'#&\'#&/#$+")("\'#&\'#/,$;E/#$+%)(%\'#($\'#(#\'#("\'#&\'#'),_('%3ņ""5(7Ň./ &3ň""5$7ŉ.# &;6/\' 8!:Ŋ!! )'),_("%;6/Y#$%;A/,#;6/#$+\")(\"'#&'#06*%;A/,#;6/#$+\")(\"'#&'#&/#$+\")(\"'#&'#"),_("%;Ï/G#;./>$;Ï/5$;./,$;/#$+%)(%'#($'#(#'#(\"'#&'#"),_("%$;!/&#0#*;!&&&#/' 8!:ŋ!! )"),_("%;Ñ/]#$%;A/,#;Ñ/#$+\")(\"'#&'#06*%;A/,#;Ñ/#$+\")(\"'#&'#&/'$8\":Ō\" )(\"'#&'#"),_("%;/]#$%;B/,#; /#$+\")(\"'#&'#06*%;B/,#; /#$+\")(\"'#&'#&/'$8\":ō\" )(\"'#&'#"),_('%;L.O &;.I &%;@." &"/:#;t/1$;?." &"/#$+#)(#\'#("\'#&\'#/]#$%;B/,#; /#$+")("\'#&\'#06*%;B/,#; /#$+")("\'#&\'#&/\'$8":Ŏ" )("\'#&\'#'),_("%;Ô/]#$%;B/,#;Õ/#$+\")(\"'#&'#06*%;B/,#;Õ/#$+\")(\"'#&'#&/'$8\":ŏ\" )(\"'#&'#"),_("%;/& 8!:Ő! )"),_('%3ő""5(7Œ/:#;</1$;6/($8#:œ#! )(#\'#("\'#&\'#.g &%3Ŕ""5&7ŕ/:#;</1$;6/($8#:Ŗ#! )(#\'#("\'#&\'#.: &%3ŗ""5*7Ř/& 8!:ř! ).# &; '),_('%%;6/k#$%;A/2#;6/)$8":Ś""$ )("\'#&\'#0<*%;A/2#;6/)$8":Ś""$ )("\'#&\'#&/)$8":ś""! )("\'#&\'#." &"/\' 8!:Ŝ!! )'),_("%;Ø/Y#$%;A/,#;Ø/#$+\")(\"'#&'#06*%;A/,#;Ø/#$+\")(\"'#&'#&/#$+\")(\"'#&'#"),_("%;/Y#$%;B/,#; /#$+\")(\"'#&'#06*%;B/,#; /#$+\")(\"'#&'#&/#$+\")(\"'#&'#"),_("%$;!/&#0#*;!&&&#/' 8!:ŝ!! )"),_("%;Û/Y#$%;B/,#;Ü/#$+\")(\"'#&'#06*%;B/,#;Ü/#$+\")(\"'#&'#&/#$+\")(\"'#&'#"),_('%3Ş""5&7ş.; &3Š""5\'7š./ &3Ţ""5*7ţ.# &;6/& 8!:Ť! )'),_("%3ť\"\"5&7Ŧ/:#;</1$;Ý/($8#:ŧ#! )(#'#(\"'#&'#.} &%3õ\"\"5'7ö/:#;</1$;/($8#:Ũ#! )(#'#(\"'#&'#.P &%3ũ\"\"5+7Ū/:#;</1$;/($8#:ū#! )(#'#(\"'#&'#.# &; "),_('3Ŭ""5+7ŭ.k &3Ů""5)7ů._ &3Ű""5(7ű.S &3Ų""5\'7ų.G &3Ŵ""5&7ŵ.; &3Ŷ""5*7ŷ./ &3Ÿ""5)7Ź.# &;6'),_(';1." &"'),_('%%;6/k#$%;A/2#;6/)$8":Ś""$ )("\'#&\'#0<*%;A/2#;6/)$8":Ś""$ )("\'#&\'#&/)$8":ś""! )("\'#&\'#." &"/\' 8!:ź!! )'),_("%;L.# &;/]#$%;B/,#;á/#$+\")(\"'#&'#06*%;B/,#;á/#$+\")(\"'#&'#&/'$8\":Ż\" )(\"'#&'#"),_(";¹.# &; "),_("%;ã/Y#$%;A/,#;ã/#$+\")(\"'#&'#06*%;A/,#;ã/#$+\")(\"'#&'#&/#$+\")(\"'#&'#"),_("%;ê/k#;./b$;í/Y$$%;B/,#;ä/#$+\")(\"'#&'#06*%;B/,#;ä/#$+\")(\"'#&'#&/#$+$)($'#(#'#(\"'#&'#"),_(";å.; &;æ.5 &;ç./ &;è.) &;é.# &; "),_("%3ż\"\"5#7Ž/:#;</1$;ð/($8#:ž#! )(#'#(\"'#&'#"),_("%3ſ\"\"5%7ƀ/:#;</1$;T/($8#:Ɓ#! )(#'#(\"'#&'#"),_("%3Ƃ\"\"5(7ƃ/F#;</=$;\\.) &;Y.# &;X/($8#:Ƅ#! )(#'#(\"'#&'#"),_("%3ƅ\"\"5&7Ɔ/:#;</1$;6/($8#:Ƈ#! )(#'#(\"'#&'#"),_('%3ƈ""5%7Ɖ/O#%;</3#$;!0#*;!&/#$+")("\'#&\'#." &"/\'$8":Ɗ" )("\'#&\'#'),_("%;ë/G#;;/>$;6/5$;;/,$;ì/#$+%)(%'#($'#(#'#(\"'#&'#"),_('%3""5#7Ó.# &;6/\' 8!:Ƌ!! )'),_('%3±""5#7ƌ.G &3³""5#7ƍ.; &3·""5#7Ǝ./ &3µ""5$7Ə.# &;6/\' 8!:Ɛ!! )'),_('%;î/D#%;C/,#;ï/#$+")("\'#&\'#." &"/#$+")("\'#&\'#'),_("%;U.) &;\\.# &;X/& 8!:Ƒ! )"),_('%%;!." &"/[#;!." &"/M$;!." &"/?$;!." &"/1$;!." &"/#$+%)(%\'#($\'#(#\'#("\'#&\'#/\' 8!:ƒ!! )'),_('%%;!/?#;!." &"/1$;!." &"/#$+#)(#\'#("\'#&\'#/\' 8!:Ɠ!! )'),_(";¾"),_('%;/^#$%;B/,#;ó/#$+")("\'#&\'#06*%;B/,#;ó/#$+")("\'#&\'#&/($8":Ɣ"!!)("\'#&\'#'),_(";ô.# &; "),_('%2ƕ""6ƕ7Ɩ/L#;</C$2Ɨ""6Ɨ7Ƙ.) &2ƙ""6ƙ7ƚ/($8#:ƛ#! )(#\'#("\'#&\'#'),_('%;/^#$%;B/,#; /#$+")("\'#&\'#06*%;B/,#; /#$+")("\'#&\'#&/($8":Ɯ"!!)("\'#&\'#'),_("%;6/5#;0/,$;÷/#$+#)(#'#(\"'#&'#"),_("$;2.) &;4.# &;.0/*;2.) &;4.# &;.&"),_("$;%0#*;%&"),_("%;ú/;#28\"\"6879/,$;û/#$+#)(#'#(\"'#&'#"),_('%3Ɲ""5%7ƞ.) &3Ɵ""5$7Ơ/\' 8!:ơ!! )'),_('%;ü/J#%28""6879/,#;^/#$+")("\'#&\'#." &"/#$+")("\'#&\'#'),_("%;\\.) &;X.# &;/' 8!:Ƣ!! )"),_(';".S &;!.M &2F""6F7G.A &2J""6J7K.5 &2H""6H7I.) &2N""6N7O'),_('2L""6L7M. &2B""6B7C. &2<""6<7=.} &2R""6R7S.q &2T""6T7U.e &2V""6V7W.Y &2P""6P7Q.M &2@""6@7A.A &2D""6D7E.5 &22""6273.) &2>""6>7?'),_('%;Ā/b#28""6879/S$;û/J$%2ƣ""6ƣ7Ƥ/,#;ì/#$+")("\'#&\'#." &"/#$+$)($\'#(#\'#("\'#&\'#'),_('%3ƥ""5%7Ʀ.) &3Ƨ""5$7ƨ/\' 8!:ơ!! )'),_('%;ì/O#3±""5#7².6 &3³""5#7´.* &$;+0#*;+&/\'$8":Ʃ" )("\'#&\'#'),_("%;Ą/#2F\"\"6F7G/x$;ă/o$2F\"\"6F7G/`$;ă/W$2F\"\"6F7G/H$;ă/?$2F\"\"6F7G/0$;ą/'$8):ƪ) )()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),_("%;#/>#;#/5$;#/,$;#/#$+$)($'#(#'#(\"'#&'#"),_("%;ă/,#;ă/#$+\")(\"'#&'#"),_("%;ă/5#;ă/,$;ă/#$+#)(#'#(\"'#&'#"),_("%;/U#;'/L$;/C$;'/:$;/1$; .\" &\"/#$+&)(&'#(%'#($'#(#'#(\"'#&'#"),_('%2ƫ""6ƫ7Ƭ.) &2ƭ""6ƭ7Ʈ/w#;0/n$;Ĉ/e$$%;B/2#;ĉ.# &; /#$+")("\'#&\'#0<*%;B/2#;ĉ.# &; /#$+")("\'#&\'#&/#$+$)($\'#(#\'#("\'#&\'#'),_(";.# &;L"),_("%2Ư\"\"6Ư7ư/5#;</,$;Ċ/#$+#)(#'#(\"'#&'#"),_("%;D/S#;,/J$2:\"\"6:7;/;$;,.# &;T/,$;E/#$+%)(%'#($'#(#'#(\"'#&'#")],l=0,c=0,d=[{line:1,column:1}],h=0,p=[],f=0;if("startRule"in t){if(!(t.startRule in s))throw new Error("Can't start parsing from rule \""+t.startRule+'".');o=s[t.startRule]}function m(){return e.substring(c,l)}function g(){return E(c,l)}function T(e,t){return{type:"literal",text:e,ignoreCase:t}}function v(e,t,n){return{type:"class",parts:e,inverted:t,ignoreCase:n}}function y(t){var n,i=d[t];if(i)return i;for(n=t-1;!d[n];)n--;for(i={line:(i=d[n]).line,column:i.column};n<t;)10===e.charCodeAt(n)?(i.line++,i.column=1):i.column++,n++;return d[t]=i,i}function E(e,t){var n=y(e),i=y(t);return{start:{offset:e,line:n.line,column:n.column},end:{offset:t,line:i.line,column:i.column}}}function b(e){l<h||(l>h&&(h=l,p=[]),p.push(e))}function S(e,t,n){return new i(i.buildMessage(e,t),e,t,n)}function _(e){var t,n=new Array(e.length);for(t=0;t<e.length;t++)n[t]=e.charCodeAt(t)-32;return n}if(t.data={},(n=function t(n){for(var i,s,o=u[n],d=0,h=[],p=o.length,m=[],g=[];;){for(;d<p;)switch(o[d]){case 0:g.push(a[o[d+1]]),d+=2;break;case 1:g.push(void 0),d++;break;case 2:g.push(null),d++;break;case 3:g.push(r),d++;break;case 4:g.push([]),d++;break;case 5:g.push(l),d++;break;case 6:g.pop(),d++;break;case 7:l=g.pop(),d++;break;case 8:g.length-=o[d+1],d+=2;break;case 9:g.splice(-2,1),d++;break;case 10:g[g.length-2].push(g.pop()),d++;break;case 11:g.push(g.splice(g.length-o[d+1],o[d+1])),d+=2;break;case 12:g.push(e.substring(g.pop(),l)),d++;break;case 13:m.push(p),h.push(d+3+o[d+1]+o[d+2]),g[g.length-1]?(p=d+3+o[d+1],d+=3):(p=d+3+o[d+1]+o[d+2],d+=3+o[d+1]);break;case 14:m.push(p),h.push(d+3+o[d+1]+o[d+2]),g[g.length-1]===r?(p=d+3+o[d+1],d+=3):(p=d+3+o[d+1]+o[d+2],d+=3+o[d+1]);break;case 15:m.push(p),h.push(d+3+o[d+1]+o[d+2]),g[g.length-1]!==r?(p=d+3+o[d+1],d+=3):(p=d+3+o[d+1]+o[d+2],d+=3+o[d+1]);break;case 16:g[g.length-1]!==r?(m.push(p),h.push(d),p=d+2+o[d+1],d+=2):d+=2+o[d+1];break;case 17:m.push(p),h.push(d+3+o[d+1]+o[d+2]),e.length>l?(p=d+3+o[d+1],d+=3):(p=d+3+o[d+1]+o[d+2],d+=3+o[d+1]);break;case 18:m.push(p),h.push(d+4+o[d+2]+o[d+3]),e.substr(l,a[o[d+1]].length)===a[o[d+1]]?(p=d+4+o[d+2],d+=4):(p=d+4+o[d+2]+o[d+3],d+=4+o[d+2]);break;case 19:m.push(p),h.push(d+4+o[d+2]+o[d+3]),e.substr(l,a[o[d+1]].length).toLowerCase()===a[o[d+1]]?(p=d+4+o[d+2],d+=4):(p=d+4+o[d+2]+o[d+3],d+=4+o[d+2]);break;case 20:m.push(p),h.push(d+4+o[d+2]+o[d+3]),a[o[d+1]].test(e.charAt(l))?(p=d+4+o[d+2],d+=4):(p=d+4+o[d+2]+o[d+3],d+=4+o[d+2]);break;case 21:g.push(e.substr(l,o[d+1])),l+=o[d+1],d+=2;break;case 22:g.push(a[o[d+1]]),l+=a[o[d+1]].length,d+=2;break;case 23:g.push(r),0===f&&b(a[o[d+1]]),d+=2;break;case 24:c=g[g.length-1-o[d+1]],d+=2;break;case 25:c=l,d++;break;case 26:for(i=o.slice(d+4,d+4+o[d+3]),s=0;s<o[d+3];s++)i[s]=g[g.length-1-i[s]];g.splice(g.length-o[d+2],o[d+2],a[o[d+1]].apply(null,i)),d+=4+o[d+3];break;case 27:g.push(t(o[d+1])),d+=2;break;case 28:f++,d++;break;case 29:f--,d++;break;default:throw new Error("Invalid opcode: "+o[d]+".")}if(!(m.length>0))break;p=m.pop(),d=h.pop()}return g[0]}(o))!==r&&l===e.length)return n;throw n!==r&&l<e.length&&b({type:"end"}),S(p,h<e.length?e.charAt(h):null,h<e.length?E(h,h+1):E(h,h))}}},function(e,t,n){"use strict";e.exports=function(e){function t(e,t){var n,i,r=[],s=e.split(/\r\n/);for(n=0;n<s.length;){var o=s[n];if(/^m=(?:audio|video)/.test(o))i={index:n,stripped:[]},r.push(i);else if(i){var a=/^a=rtpmap:(\d+) ([^/]+)\//.exec(o);if(a&&t===a[2]){s.splice(n,1),i.stripped.push(a[1]);continue}}n++}for(n=0;n<r.length;n++){for(var u=s[r[n].index].split(" "),l=3;l<u.length;)-1===r[n].stripped.indexOf(u[l])?l++:u.splice(l,1);s[r[n].index]=u.join(" ")}return s.join("\r\n")}return{stripTcpCandidates:function(t){return t.sdp=t.sdp.replace(/^a=candidate:\d+ \d+ tcp .*?\r\n/gim,""),e.Utils.Promise.resolve(t)},stripTelephoneEvent:function(n){return n.sdp=t(n.sdp,"telephone-event"),e.Utils.Promise.resolve(n)},cleanJitsiSdpImageattr:function(t){return t.sdp=t.sdp.replace(/^(a=imageattr:.*?)(x|y)=\[0-/gm,"$1$2=[1:"),e.Utils.Promise.resolve(t)},stripG722:function(n){return n.sdp=t(n.sdp,"G722"),e.Utils.Promise.resolve(n)},stripRtpPayload:function(n){return function(i){return i.sdp=t(i.sdp,n),e.Utils.Promise.resolve(i)}},stripVideo:function(t){return t.sdp=function(e,t){var n=new RegExp("m="+t+".*$","gm"),i=new RegExp("^a=group:.*$","gm");if(n.test(e)){var r,s=(e=e.split(/^m=/gm).filter(function(e){return e.substr(0,t.length)!==t||((r=e.match(/^a=mid:.*$/gm))&&(r=r[0].match(/:.+$/g)[0].substr(1)),!1)}).join("m=")).match(i);if(s&&1===s.length){s=s[0];var o=new RegExp(" *"+r+"[^ ]*","g");s=s.replace(o,""),e=e.split(i).join(s)}}return e}(t.sdp,"video"),e.Utils.Promise.resolve(t)},addMidLines:function(t){var n=t.sdp;if(-1===n.search(/^a=mid.*$/gm)){var i=n.match(/^m=.*$/gm);n=n.split(/^m=.*$/gm),i.forEach(function(e,t){i[t]=e+"\na=mid:"+t}),n.forEach(function(e,t){i[t]&&(n[t]=e+i[t])}),n=n.join(""),t.sdp=n}return e.Utils.Promise.resolve(t)}}}},function(e,t,n){"use strict";(function(t){e.exports=function(e){var n={STATUS_NULL:0,STATUS_NEW:1,STATUS_CONNECTING:2,STATUS_CONNECTED:3,STATUS_COMPLETED:4},i=function(i){if(i.media.remote.video?this.video=!0:this.video=!1,i.media.remote.audio?this.audio=!0:this.audio=!1,!this.audio&&!this.video)throw new Error("At least one remote audio or video element is required for Simple.");this.options=i;var r=t.navigator.userAgent.toLowerCase(),s=!1,o=!1;r.indexOf("safari")>-1&&r.indexOf("chrome")<0?s=!0:r.indexOf("firefox")>-1&&r.indexOf("chrome")<0&&(o=!0);var a={};return s&&(a.modifiers=[e.Web.Modifiers.stripG722]),o&&(a.alwaysAcquireMediaFirst=!0),this.options.ua.uri||(this.anonymous=!0),this.ua=new e.UA({uri:this.options.ua.uri,authorizationUser:this.options.ua.authorizationUser,password:this.options.ua.password,displayName:this.options.ua.displayName,userAgentString:this.options.ua.userAgentString,register:!0,sessionDescriptionHandlerFactoryOptions:a,transportOptions:{traceSip:this.options.ua.traceSip,wsServers:this.options.ua.wsServers}}),this.state=n.STATUS_NULL,this.logger=this.ua.getLogger("sip.simple"),this.ua.on("registered",function(){this.emit("registered",this.ua)}.bind(this)),this.ua.on("unregistered",function(){this.emit("unregistered",this.ua)}.bind(this)),this.ua.on("failed",function(){this.emit("unregistered",this.ua)}.bind(this)),this.ua.on("invite",function(e){if(this.state!==n.STATUS_NULL&&this.state!==n.STATUS_COMPLETED)return this.logger.warn("Rejecting incoming call. Simple only supports 1 call at a time"),void e.reject();this.session=e,this.setupSession(),this.emit("ringing",this.session)}.bind(this)),this.ua.on("message",function(e){this.emit("message",e)}.bind(this)),this};return i.prototype=Object.create(e.EventEmitter.prototype),i.C=n,i.prototype.call=function(e){if(this.ua&&this.checkRegistration()){if(this.state===n.STATUS_NULL||this.state===n.STATUS_COMPLETED)return this.options.media.remote.audio&&(this.options.media.remote.audio.autoplay=!0),this.options.media.remote.video&&(this.options.media.remote.video.autoplay=!0),this.options.media.local&&this.options.media.local.video&&(this.options.media.local.video.autoplay=!0,this.options.media.local.video.volume=0),this.session=this.ua.invite(e,{sessionDescriptionHandlerOptions:{constraints:{audio:this.audio,video:this.video}}}),this.setupSession(),this.session;this.logger.warn("Cannot make more than a single call with Simple")}else this.logger.warn("A registered UA is required for calling")},i.prototype.answer=function(){if(this.state===n.STATUS_NEW||this.state===n.STATUS_CONNECTING)return this.options.media.remote.audio&&(this.options.media.remote.audio.autoplay=!0),this.options.media.remote.video&&(this.options.media.remote.video.autoplay=!0),this.session.accept({sessionDescriptionHandlerOptions:{constraints:{audio:this.audio,video:this.video}}});this.logger.warn("No call to answer")},i.prototype.reject=function(){if(this.state===n.STATUS_NEW||this.state===n.STATUS_CONNECTING)return this.session.reject();this.logger.warn("Call is already answered")},i.prototype.hangup=function(){if(this.state===n.STATUS_CONNECTED||this.state===n.STATUS_CONNECTING||this.state===n.STATUS_NEW)return this.state!==n.STATUS_CONNECTED?this.session.cancel():this.session.bye();this.logger.warn("No active call to hang up on")},i.prototype.hold=function(){if(this.state===n.STATUS_CONNECTED&&!this.session.local_hold)return this.mute(),this.logger.log("Placing session on hold"),this.session.hold();this.logger.warn("Cannot put call on hold")},i.prototype.unhold=function(){if(this.state===n.STATUS_CONNECTED&&this.session.local_hold)return this.unmute(),this.logger.log("Placing call off hold"),this.session.unhold();this.logger.warn("Cannot unhold a call that is not on hold")},i.prototype.mute=function(){this.state===n.STATUS_CONNECTED?(this.logger.log("Muting Audio"),this.toggleMute(!0),this.emit("mute",this)):this.logger.warn("An acitve call is required to mute audio")},i.prototype.unmute=function(){this.state===n.STATUS_CONNECTED?(this.logger.log("Unmuting Audio"),this.toggleMute(!1),this.emit("unmute",this)):this.logger.warn("An active call is required to unmute audio")},i.prototype.sendDTMF=function(e){this.state===n.STATUS_CONNECTED?(this.logger.log("Sending DTMF tone: "+e),this.session.dtmf(e)):this.logger.warn("An active call is required to send a DTMF tone")},i.prototype.message=function(e,t){this.ua&&this.checkRegistration()?e&&t?this.ua.message(e,t):this.logger.warn("A destination and message are required to send a message"):this.logger.warn("A registered UA is required to send a message")},i.prototype.checkRegistration=function(){return this.anonymous||this.ua&&this.ua.isRegistered()},i.prototype.setupRemoteMedia=function(){var e,n=this.session.sessionDescriptionHandler.peerConnection;n.getReceivers?(e=new t.window.MediaStream,n.getReceivers().forEach(function(t){var n=t.track;n&&e.addTrack(n)})):e=n.getRemoteStreams()[0],this.video?(this.options.media.remote.video.srcObject=e,this.options.media.remote.video.play().catch(function(){this.logger.log("play was rejected")}.bind(this))):this.audio&&(this.options.media.remote.audio.srcObject=e,this.options.media.remote.audio.play().catch(function(){this.logger.log("play was rejected")}.bind(this)))},i.prototype.setupLocalMedia=function(){if(this.video&&this.options.media.local&&this.options.media.local.video){var e,n=this.session.sessionDescriptionHandler.peerConnection;n.getSenders?(e=new t.window.MediaStream,n.getSenders().forEach(function(t){var n=t.track;n&&"video"===n.kind&&e.addTrack(n)})):e=n.getLocalStreams()[0],this.options.media.local.video.srcObject=e,this.options.media.local.video.volume=0,this.options.media.local.video.play()}},i.prototype.cleanupMedia=function(){this.video&&(this.options.media.remote.video.srcObject=null,this.options.media.remote.video.pause(),this.options.media.local&&this.options.media.local.video&&(this.options.media.local.video.srcObject=null,this.options.media.local.video.pause())),this.audio&&(this.options.media.remote.audio.srcObject=null,this.options.media.remote.audio.pause())},i.prototype.setupSession=function(){this.state=n.STATUS_NEW,this.emit("new",this.session),this.session.on("progress",this.onProgress.bind(this)),this.session.on("accepted",this.onAccepted.bind(this)),this.session.on("rejected",this.onEnded.bind(this)),this.session.on("failed",this.onFailed.bind(this)),this.session.on("terminated",this.onEnded.bind(this))},i.prototype.destroyMedia=function(){this.session.sessionDescriptionHandler.close()},i.prototype.toggleMute=function(e){var t=this.session.sessionDescriptionHandler.peerConnection;t.getSenders?t.getSenders().forEach(function(t){t.track&&(t.track.enabled=!e)}):t.getLocalStreams().forEach(function(t){t.getAudioTracks().forEach(function(t){t.enabled=!e}),t.getVideoTracks().forEach(function(t){t.enabled=!e})})},i.prototype.onAccepted=function(){this.state=n.STATUS_CONNECTED,this.emit("connected",this.session),this.setupLocalMedia(),this.setupRemoteMedia(),this.session.sessionDescriptionHandler.on("addTrack",function(){this.logger.log("A track has been added, triggering new remoteMedia setup"),this.setupRemoteMedia()}.bind(this)),this.session.sessionDescriptionHandler.on("addStream",function(){this.logger.log("A stream has been added, trigger new remoteMedia setup"),this.setupRemoteMedia()}.bind(this)),this.session.on("hold",function(){this.emit("hold",this.session)}.bind(this)),this.session.on("unhold",function(){this.emit("unhold",this.session)}.bind(this)),this.session.on("dtmf",function(e){this.emit("dtmf",e)}.bind(this)),this.session.on("bye",this.onEnded.bind(this))},i.prototype.onProgress=function(){this.state=n.STATUS_CONNECTING,this.emit("connecting",this.session)},i.prototype.onFailed=function(){this.onEnded()},i.prototype.onEnded=function(){this.state=n.STATUS_COMPLETED,this.emit("ended",this.session),this.cleanupMedia()},i}}).call(this,n(28))},function(e,t,n){"use strict";(function(t){var i=t.window||t;function r(e,t){if(null!=e){var n=t.charAt(0).toUpperCase()+t.slice(1),i=[t,"webkit"+n,"moz"+n];for(var r in i){var s=e[i[r]];if(s)return s.bind(e)}}}e.exports={WebSocket:i.WebSocket,Transport:n(10),open:i.open,Promise:i.Promise,timers:i,console:i.console||{debug:function(){},log:function(){},warn:function(){},error:function(){}},addEventListener:r(i,"addEventListener"),removeEventListener:r(i,"removeEventListener")}}).call(this,n(28))}])})},function(e,t,n){"use strict";
/** @license React v16.6.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var i=n(2),r="function"==typeof Symbol&&Symbol.for,s=r?Symbol.for("react.element"):60103,o=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,u=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,d=r?Symbol.for("react.context"):60110,h=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,f=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.memo"):60115,g=r?Symbol.for("react.lazy"):60116,T="function"==typeof Symbol&&Symbol.iterator;function v(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,i=0;i<t;i++)n+="&args[]="+encodeURIComponent(arguments[i+1]);!function(e,t,n,i,r,s,o,a){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,i,r,s,o,a],l=0;(e=Error(t.replace(/%s/g,function(){return u[l++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var y={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},E={};function b(e,t,n){this.props=e,this.context=t,this.refs=E,this.updater=n||y}function S(){}function _(e,t,n){this.props=e,this.context=t,this.refs=E,this.updater=n||y}b.prototype.isReactComponent={},b.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&v("85"),this.updater.enqueueSetState(this,e,t,"setState")},b.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},S.prototype=b.prototype;var C=_.prototype=new S;C.constructor=_,i(C,b.prototype),C.isPureReactComponent=!0;var w={current:null,currentDispatcher:null},R=Object.prototype.hasOwnProperty,A={key:!0,ref:!0,__self:!0,__source:!0};function I(e,t,n){var i=void 0,r={},o=null,a=null;if(null!=t)for(i in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(o=""+t.key),t)R.call(t,i)&&!A.hasOwnProperty(i)&&(r[i]=t[i]);var u=arguments.length-2;if(1===u)r.children=n;else if(1<u){for(var l=Array(u),c=0;c<u;c++)l[c]=arguments[c+2];r.children=l}if(e&&e.defaultProps)for(i in u=e.defaultProps)void 0===r[i]&&(r[i]=u[i]);return{$$typeof:s,type:e,key:o,ref:a,props:r,_owner:w.current}}function N(e){return"object"==typeof e&&null!==e&&e.$$typeof===s}var x=/\/+/g,D=[];function O(e,t,n,i){if(D.length){var r=D.pop();return r.result=e,r.keyPrefix=t,r.func=n,r.context=i,r.count=0,r}return{result:e,keyPrefix:t,func:n,context:i,count:0}}function k(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>D.length&&D.push(e)}function U(e,t,n){return null==e?0:function e(t,n,i,r){var a=typeof t;"undefined"!==a&&"boolean"!==a||(t=null);var u=!1;if(null===t)u=!0;else switch(a){case"string":case"number":u=!0;break;case"object":switch(t.$$typeof){case s:case o:u=!0}}if(u)return i(r,t,""===n?"."+P(t,0):n),1;if(u=0,n=""===n?".":n+":",Array.isArray(t))for(var l=0;l<t.length;l++){var c=n+P(a=t[l],l);u+=e(a,c,i,r)}else if(c=null===t||"object"!=typeof t?null:"function"==typeof(c=T&&t[T]||t["@@iterator"])?c:null,"function"==typeof c)for(t=c.call(t),l=0;!(a=t.next()).done;)u+=e(a=a.value,c=n+P(a,l++),i,r);else"object"===a&&v("31","[object Object]"==(i=""+t)?"object with keys {"+Object.keys(t).join(", ")+"}":i,"");return u}(e,"",t,n)}function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function $(e,t){e.func.call(e.context,t,e.count++)}function H(e,t,n){var i=e.result,r=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?M(e,i,n,function(e){return e}):null!=e&&(N(e)&&(e=function(e,t){return{$$typeof:s,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,r+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(x,"$&/")+"/")+n)),i.push(e))}function M(e,t,n,i,r){var s="";null!=n&&(s=(""+n).replace(x,"$&/")+"/"),U(e,H,t=O(t,s,i,r)),k(t)}var q={Children:{map:function(e,t,n){if(null==e)return e;var i=[];return M(e,i,null,t,n),i},forEach:function(e,t,n){if(null==e)return e;U(e,$,t=O(null,null,t,n)),k(t)},count:function(e){return U(e,function(){return null},null)},toArray:function(e){var t=[];return M(e,t,null,function(e){return e}),t},only:function(e){return N(e)||v("143"),e}},createRef:function(){return{current:null}},Component:b,PureComponent:_,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:d,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,Provider:null,Consumer:null}).Provider={$$typeof:c,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:p,render:e}},lazy:function(e){return{$$typeof:g,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:m,type:e,compare:void 0===t?null:t}},Fragment:a,StrictMode:u,unstable_ConcurrentMode:h,Suspense:f,unstable_Profiler:l,createElement:I,cloneElement:function(e,t,n){(null===e||void 0===e)&&v("267",e);var r=void 0,o=i({},e.props),a=e.key,u=e.ref,l=e._owner;if(null!=t){void 0!==t.ref&&(u=t.ref,l=w.current),void 0!==t.key&&(a=""+t.key);var c=void 0;for(r in e.type&&e.type.defaultProps&&(c=e.type.defaultProps),t)R.call(t,r)&&!A.hasOwnProperty(r)&&(o[r]=void 0===t[r]&&void 0!==c?c[r]:t[r])}if(1===(r=arguments.length-2))o.children=n;else if(1<r){c=Array(r);for(var d=0;d<r;d++)c[d]=arguments[d+2];o.children=c}return{$$typeof:s,type:e.type,key:a,ref:u,props:o,_owner:l}},createFactory:function(e){var t=I.bind(null,e);return t.type=e,t},isValidElement:N,version:"16.6.0",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:w,assign:i}},L={default:q},F=L&&q||L;e.exports=F.default||F},function(e,t,n){"use strict";
/** @license React v16.6.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var i=n(0),r=n(2),s=n(6);function o(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,i=0;i<t;i++)n+="&args[]="+encodeURIComponent(arguments[i+1]);!function(e,t,n,i,r,s,o,a){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,i,r,s,o,a],l=0;(e=Error(t.replace(/%s/g,function(){return u[l++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}i||o("227");var a=!1,u=null,l=!1,c=null,d={onError:function(e){a=!0,u=e}};function h(e,t,n,i,r,s,o,l,c){a=!1,u=null,function(e,t,n,i,r,s,o,a,u){var l=Array.prototype.slice.call(arguments,3);try{t.apply(n,l)}catch(e){this.onError(e)}}.apply(d,arguments)}var p=null,f={};function m(){if(p)for(var e in f){var t=f[e],n=p.indexOf(e);if(-1<n||o("96",e),!T[n])for(var i in t.extractEvents||o("97",e),T[n]=t,n=t.eventTypes){var r=void 0,s=n[i],a=t,u=i;v.hasOwnProperty(u)&&o("99",u),v[u]=s;var l=s.phasedRegistrationNames;if(l){for(r in l)l.hasOwnProperty(r)&&g(l[r],a,u);r=!0}else s.registrationName?(g(s.registrationName,a,u),r=!0):r=!1;r||o("98",i,e)}}}function g(e,t,n){y[e]&&o("100",e),y[e]=t,E[e]=t.eventTypes[n].dependencies}var T=[],v={},y={},E={},b=null,S=null,_=null;function C(e,t,n,i){t=e.type||"unknown-event",e.currentTarget=_(i),function(e,t,n,i,r,s,d,p,f){if(h.apply(this,arguments),a){if(a){var m=u;a=!1,u=null}else o("198"),m=void 0;l||(l=!0,c=m)}}(t,n,void 0,e),e.currentTarget=null}function w(e,t){return null==t&&o("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function R(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var A=null;function I(e,t){if(e){var n=e._dispatchListeners,i=e._dispatchInstances;if(Array.isArray(n))for(var r=0;r<n.length&&!e.isPropagationStopped();r++)C(e,t,n[r],i[r]);else n&&C(e,t,n,i);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function N(e){return I(e,!0)}function x(e){return I(e,!1)}var D={injectEventPluginOrder:function(e){p&&o("101"),p=Array.prototype.slice.call(e),m()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var i=e[t];f.hasOwnProperty(t)&&f[t]===i||(f[t]&&o("102",t),f[t]=i,n=!0)}n&&m()}};function O(e,t){var n=e.stateNode;if(!n)return null;var i=b(n);if(!i)return null;n=i[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(i=!i.disabled)||(i=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!i;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&o("231",t,typeof n),n)}function k(e,t){if(null!==e&&(A=w(A,e)),e=A,A=null,e&&(R(e,t?N:x),A&&o("95"),l))throw t=c,l=!1,c=null,t}var U=Math.random().toString(36).slice(2),P="__reactInternalInstance$"+U,$="__reactEventHandlers$"+U;function H(e){if(e[P])return e[P];for(;!e[P];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[P]).tag||6===e.tag?e:null}function M(e){return!(e=e[P])||5!==e.tag&&6!==e.tag?null:e}function q(e){if(5===e.tag||6===e.tag)return e.stateNode;o("33")}function L(e){return e[$]||null}function F(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function j(e,t,n){(t=O(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=w(n._dispatchListeners,t),n._dispatchInstances=w(n._dispatchInstances,e))}function B(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=F(t);for(t=n.length;0<t--;)j(n[t],"captured",e);for(t=0;t<n.length;t++)j(n[t],"bubbled",e)}}function G(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=O(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=w(n._dispatchListeners,t),n._dispatchInstances=w(n._dispatchInstances,e))}function W(e){e&&e.dispatchConfig.registrationName&&G(e._targetInst,null,e)}function z(e){R(e,B)}var V=!("undefined"==typeof window||!window.document||!window.document.createElement);function K(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Y={animationend:K("Animation","AnimationEnd"),animationiteration:K("Animation","AnimationIteration"),animationstart:K("Animation","AnimationStart"),transitionend:K("Transition","TransitionEnd")},Z={},J={};function Q(e){if(Z[e])return Z[e];if(!Y[e])return e;var t,n=Y[e];for(t in n)if(n.hasOwnProperty(t)&&t in J)return Z[e]=n[t];return e}V&&(J=document.createElement("div").style,"AnimationEvent"in window||(delete Y.animationend.animation,delete Y.animationiteration.animation,delete Y.animationstart.animation),"TransitionEvent"in window||delete Y.transitionend.transition);var X=Q("animationend"),ee=Q("animationiteration"),te=Q("animationstart"),ne=Q("transitionend"),ie="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),re=null,se=null,oe=null;function ae(){if(oe)return oe;var e,t,n=se,i=n.length,r="value"in re?re.value:re.textContent,s=r.length;for(e=0;e<i&&n[e]===r[e];e++);var o=i-e;for(t=1;t<=o&&n[i-t]===r[s-t];t++);return oe=r.slice(e,1<t?1-t:void 0)}function ue(){return!0}function le(){return!1}function ce(e,t,n,i){for(var r in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(r)&&((t=e[r])?this[r]=t(n):"target"===r?this.target=i:this[r]=n[r]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?ue:le,this.isPropagationStopped=le,this}function de(e,t,n,i){if(this.eventPool.length){var r=this.eventPool.pop();return this.call(r,e,t,n,i),r}return new this(e,t,n,i)}function he(e){e instanceof this||o("279"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function pe(e){e.eventPool=[],e.getPooled=de,e.release=he}r(ce.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ue)},persist:function(){this.isPersistent=ue},isPersistent:le,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=le,this._dispatchInstances=this._dispatchListeners=null}}),ce.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},ce.extend=function(e){function t(){}function n(){return i.apply(this,arguments)}var i=this;t.prototype=i.prototype;var s=new t;return r(s,n.prototype),n.prototype=s,n.prototype.constructor=n,n.Interface=r({},i.Interface,e),n.extend=i.extend,pe(n),n},pe(ce);var fe=ce.extend({data:null}),me=ce.extend({data:null}),ge=[9,13,27,32],Te=V&&"CompositionEvent"in window,ve=null;V&&"documentMode"in document&&(ve=document.documentMode);var ye=V&&"TextEvent"in window&&!ve,Ee=V&&(!Te||ve&&8<ve&&11>=ve),be=String.fromCharCode(32),Se={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},_e=!1;function Ce(e,t){switch(e){case"keyup":return-1!==ge.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function we(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Re=!1;var Ae={eventTypes:Se,extractEvents:function(e,t,n,i){var r=void 0,s=void 0;if(Te)e:{switch(e){case"compositionstart":r=Se.compositionStart;break e;case"compositionend":r=Se.compositionEnd;break e;case"compositionupdate":r=Se.compositionUpdate;break e}r=void 0}else Re?Ce(e,n)&&(r=Se.compositionEnd):"keydown"===e&&229===n.keyCode&&(r=Se.compositionStart);return r?(Ee&&"ko"!==n.locale&&(Re||r!==Se.compositionStart?r===Se.compositionEnd&&Re&&(s=ae()):(se="value"in(re=i)?re.value:re.textContent,Re=!0)),r=fe.getPooled(r,t,n,i),s?r.data=s:null!==(s=we(n))&&(r.data=s),z(r),s=r):s=null,(e=ye?function(e,t){switch(e){case"compositionend":return we(t);case"keypress":return 32!==t.which?null:(_e=!0,be);case"textInput":return(e=t.data)===be&&_e?null:e;default:return null}}(e,n):function(e,t){if(Re)return"compositionend"===e||!Te&&Ce(e,t)?(e=ae(),oe=se=re=null,Re=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Ee&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=me.getPooled(Se.beforeInput,t,n,i)).data=e,z(t)):t=null,null===s?t:null===t?s:[s,t]}},Ie=null,Ne=null,xe=null;function De(e){if(e=S(e)){"function"!=typeof Ie&&o("280");var t=b(e.stateNode);Ie(e.stateNode,e.type,t)}}function Oe(e){Ne?xe?xe.push(e):xe=[e]:Ne=e}function ke(){if(Ne){var e=Ne,t=xe;if(xe=Ne=null,De(e),t)for(e=0;e<t.length;e++)De(t[e])}}function Ue(e,t){return e(t)}function Pe(e,t,n){return e(t,n)}function $e(){}var He=!1;function Me(e,t){if(He)return e(t);He=!0;try{return Ue(e,t)}finally{He=!1,(null!==Ne||null!==xe)&&($e(),ke())}}var qe={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Le(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!qe[e.type]:"textarea"===t}function Fe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function je(e){if(!V)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}function Be(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Ge(e){e._valueTracker||(e._valueTracker=function(e){var t=Be(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),i=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var r=n.get,s=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return r.call(this)},set:function(e){i=""+e,s.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return i},setValue:function(e){i=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function We(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),i="";return e&&(i=Be(e)?e.checked?"true":"false":e.value),(e=i)!==n&&(t.setValue(e),!0)}var ze=i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,Ve=/^(.*)[\\\/]/,Ke="function"==typeof Symbol&&Symbol.for,Ye=Ke?Symbol.for("react.element"):60103,Ze=Ke?Symbol.for("react.portal"):60106,Je=Ke?Symbol.for("react.fragment"):60107,Qe=Ke?Symbol.for("react.strict_mode"):60108,Xe=Ke?Symbol.for("react.profiler"):60114,et=Ke?Symbol.for("react.provider"):60109,tt=Ke?Symbol.for("react.context"):60110,nt=Ke?Symbol.for("react.concurrent_mode"):60111,it=Ke?Symbol.for("react.forward_ref"):60112,rt=Ke?Symbol.for("react.suspense"):60113,st=Ke?Symbol.for("react.memo"):60115,ot=Ke?Symbol.for("react.lazy"):60116,at="function"==typeof Symbol&&Symbol.iterator;function ut(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=at&&e[at]||e["@@iterator"])?e:null}function lt(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case nt:return"ConcurrentMode";case Je:return"Fragment";case Ze:return"Portal";case Xe:return"Profiler";case Qe:return"StrictMode";case rt:return"Suspense"}if("object"==typeof e)switch(e.$$typeof){case tt:return"Context.Consumer";case et:return"Context.Provider";case it:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case st:return lt(e.type);case ot:if(e=1===e._status?e._result:null)return lt(e)}return null}function ct(e){var t="";do{e:switch(e.tag){case 2:case 16:case 0:case 1:case 5:case 8:var n=e._debugOwner,i=e._debugSource,r=lt(e.type),s=null;n&&(s=lt(n.type)),n=r,r="",i?r=" (at "+i.fileName.replace(Ve,"")+":"+i.lineNumber+")":s&&(r=" (created by "+s+")"),s="\n    in "+(n||"Unknown")+r;break e;default:s=""}t+=s,e=e.return}while(e);return t}var dt=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,ht=Object.prototype.hasOwnProperty,pt={},ft={};function mt(e,t,n,i,r){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=i,this.attributeNamespace=r,this.mustUseProperty=n,this.propertyName=e,this.type=t}var gt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){gt[e]=new mt(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];gt[t]=new mt(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){gt[e]=new mt(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){gt[e]=new mt(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){gt[e]=new mt(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){gt[e]=new mt(e,3,!0,e,null)}),["capture","download"].forEach(function(e){gt[e]=new mt(e,4,!1,e,null)}),["cols","rows","size","span"].forEach(function(e){gt[e]=new mt(e,6,!1,e,null)}),["rowSpan","start"].forEach(function(e){gt[e]=new mt(e,5,!1,e.toLowerCase(),null)});var Tt=/[\-:]([a-z])/g;function vt(e){return e[1].toUpperCase()}function yt(e,t,n,i){var r=gt.hasOwnProperty(t)?gt[t]:null;(null!==r?0===r.type:!i&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,i){if(null===t||void 0===t||function(e,t,n,i){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!i&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,i))return!0;if(i)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,r,i)&&(n=null),i||null===r?function(e){return!!ht.call(ft,e)||!ht.call(pt,e)&&(dt.test(e)?ft[e]=!0:(pt[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):r.mustUseProperty?e[r.propertyName]=null===n?3!==r.type&&"":n:(t=r.attributeName,i=r.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(r=r.type)||4===r&&!0===n?"":""+n,i?e.setAttributeNS(i,t,n):e.setAttribute(t,n))))}function Et(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function bt(e,t){var n=t.checked;return r({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function St(e,t){var n=null==t.defaultValue?"":t.defaultValue,i=null!=t.checked?t.checked:t.defaultChecked;n=Et(null!=t.value?t.value:n),e._wrapperState={initialChecked:i,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function _t(e,t){null!=(t=t.checked)&&yt(e,"checked",t,!1)}function Ct(e,t){_t(e,t);var n=Et(t.value),i=t.type;if(null!=n)"number"===i?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===i||"reset"===i)return void e.removeAttribute("value");t.hasOwnProperty("value")?Rt(e,t.type,n):t.hasOwnProperty("defaultValue")&&Rt(e,t.type,Et(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function wt(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var i=t.type;if(!("submit"!==i&&"reset"!==i||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Rt(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(Tt,vt);gt[t]=new mt(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(Tt,vt);gt[t]=new mt(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(Tt,vt);gt[t]=new mt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),gt.tabIndex=new mt("tabIndex",1,!1,"tabindex",null);var At={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function It(e,t,n){return(e=ce.getPooled(At.change,e,t,n)).type="change",Oe(n),z(e),e}var Nt=null,xt=null;function Dt(e){k(e,!1)}function Ot(e){if(We(q(e)))return e}function kt(e,t){if("change"===e)return t}var Ut=!1;function Pt(){Nt&&(Nt.detachEvent("onpropertychange",$t),xt=Nt=null)}function $t(e){"value"===e.propertyName&&Ot(xt)&&Me(Dt,e=It(xt,e,Fe(e)))}function Ht(e,t,n){"focus"===e?(Pt(),xt=n,(Nt=t).attachEvent("onpropertychange",$t)):"blur"===e&&Pt()}function Mt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Ot(xt)}function qt(e,t){if("click"===e)return Ot(t)}function Lt(e,t){if("input"===e||"change"===e)return Ot(t)}V&&(Ut=je("input")&&(!document.documentMode||9<document.documentMode));var Ft={eventTypes:At,_isInputEventSupported:Ut,extractEvents:function(e,t,n,i){var r=t?q(t):window,s=void 0,o=void 0,a=r.nodeName&&r.nodeName.toLowerCase();if("select"===a||"input"===a&&"file"===r.type?s=kt:Le(r)?Ut?s=Lt:(s=Mt,o=Ht):(a=r.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===r.type||"radio"===r.type)&&(s=qt),s&&(s=s(e,t)))return It(s,n,i);o&&o(e,r,t),"blur"===e&&(e=r._wrapperState)&&e.controlled&&"number"===r.type&&Rt(r,"number",r.value)}},jt=ce.extend({view:null,detail:null}),Bt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Gt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Bt[e])&&!!t[e]}function Wt(){return Gt}var zt=0,Vt=0,Kt=!1,Yt=!1,Zt=jt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Wt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=zt;return zt=e.screenX,Kt?"mousemove"===e.type?e.screenX-t:0:(Kt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Vt;return Vt=e.screenY,Yt?"mousemove"===e.type?e.screenY-t:0:(Yt=!0,0)}}),Jt=Zt.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Qt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Xt={eventTypes:Qt,extractEvents:function(e,t,n,i){var r="mouseover"===e||"pointerover"===e,s="mouseout"===e||"pointerout"===e;if(r&&(n.relatedTarget||n.fromElement)||!s&&!r)return null;if(r=i.window===i?i:(r=i.ownerDocument)?r.defaultView||r.parentWindow:window,s?(s=t,t=(t=n.relatedTarget||n.toElement)?H(t):null):s=null,s===t)return null;var o=void 0,a=void 0,u=void 0,l=void 0;"mouseout"===e||"mouseover"===e?(o=Zt,a=Qt.mouseLeave,u=Qt.mouseEnter,l="mouse"):"pointerout"!==e&&"pointerover"!==e||(o=Jt,a=Qt.pointerLeave,u=Qt.pointerEnter,l="pointer");var c=null==s?r:q(s);if(r=null==t?r:q(t),(e=o.getPooled(a,s,n,i)).type=l+"leave",e.target=c,e.relatedTarget=r,(n=o.getPooled(u,t,n,i)).type=l+"enter",n.target=r,n.relatedTarget=c,i=t,s&&i)e:{for(r=i,l=0,o=t=s;o;o=F(o))l++;for(o=0,u=r;u;u=F(u))o++;for(;0<l-o;)t=F(t),l--;for(;0<o-l;)r=F(r),o--;for(;l--;){if(t===r||t===r.alternate)break e;t=F(t),r=F(r)}t=null}else t=null;for(r=t,t=[];s&&s!==r&&(null===(l=s.alternate)||l!==r);)t.push(s),s=F(s);for(s=[];i&&i!==r&&(null===(l=i.alternate)||l!==r);)s.push(i),i=F(i);for(i=0;i<t.length;i++)G(t[i],"bubbled",e);for(i=s.length;0<i--;)G(s[i],"captured",n);return[e,n]}},en=Object.prototype.hasOwnProperty;function tn(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function nn(e,t){if(tn(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),i=Object.keys(t);if(n.length!==i.length)return!1;for(i=0;i<n.length;i++)if(!en.call(t,n[i])||!tn(e[n[i]],t[n[i]]))return!1;return!0}function rn(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function sn(e){2!==rn(e)&&o("188")}function on(e){if(!(e=function(e){var t=e.alternate;if(!t)return 3===(t=rn(e))&&o("188"),1===t?null:e;for(var n=e,i=t;;){var r=n.return,s=r?r.alternate:null;if(!r||!s)break;if(r.child===s.child){for(var a=r.child;a;){if(a===n)return sn(r),e;if(a===i)return sn(r),t;a=a.sibling}o("188")}if(n.return!==i.return)n=r,i=s;else{a=!1;for(var u=r.child;u;){if(u===n){a=!0,n=r,i=s;break}if(u===i){a=!0,i=r,n=s;break}u=u.sibling}if(!a){for(u=s.child;u;){if(u===n){a=!0,n=s,i=r;break}if(u===i){a=!0,i=s,n=r;break}u=u.sibling}a||o("189")}}n.alternate!==i&&o("190")}return 3!==n.tag&&o("188"),n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var an=ce.extend({animationName:null,elapsedTime:null,pseudoElement:null}),un=ce.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),ln=jt.extend({relatedTarget:null});function cn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var dn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},hn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},pn=jt.extend({key:function(e){if(e.key){var t=dn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=cn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?hn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Wt,charCode:function(e){return"keypress"===e.type?cn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?cn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),fn=Zt.extend({dataTransfer:null}),mn=jt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Wt}),gn=ce.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),Tn=Zt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),vn=[["abort","abort"],[X,"animationEnd"],[ee,"animationIteration"],[te,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[ne,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],yn={},En={};function bn(e,t){var n=e[0],i="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:i,captured:i+"Capture"},dependencies:[n],isInteractive:t},yn[e]=t,En[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["auxclick","auxClick"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(e){bn(e,!0)}),vn.forEach(function(e){bn(e,!1)});var Sn={eventTypes:yn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=En[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,i){var r=En[e];if(!r)return null;switch(e){case"keypress":if(0===cn(n))return null;case"keydown":case"keyup":e=pn;break;case"blur":case"focus":e=ln;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Zt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=fn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=mn;break;case X:case ee:case te:e=an;break;case ne:e=gn;break;case"scroll":e=jt;break;case"wheel":e=Tn;break;case"copy":case"cut":case"paste":e=un;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Jt;break;default:e=ce}return z(t=e.getPooled(r,t,n,i)),t}},_n=Sn.isInteractiveTopLevelEventType,Cn=[];function wn(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var i;for(i=n;i.return;)i=i.return;if(!(i=3!==i.tag?null:i.stateNode.containerInfo))break;e.ancestors.push(n),n=H(i)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var r=Fe(e.nativeEvent);i=e.topLevelType;for(var s=e.nativeEvent,o=null,a=0;a<T.length;a++){var u=T[a];u&&(u=u.extractEvents(i,t,s,r))&&(o=w(o,u))}k(o,!1)}}var Rn=!0;function An(e,t){if(!t)return null;var n=(_n(e)?Nn:xn).bind(null,e);t.addEventListener(e,n,!1)}function In(e,t){if(!t)return null;var n=(_n(e)?Nn:xn).bind(null,e);t.addEventListener(e,n,!0)}function Nn(e,t){Pe(xn,e,t)}function xn(e,t){if(Rn){var n=Fe(t);if(null===(n=H(n))||"number"!=typeof n.tag||2===rn(n)||(n=null),Cn.length){var i=Cn.pop();i.topLevelType=e,i.nativeEvent=t,i.targetInst=n,e=i}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{Me(wn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>Cn.length&&Cn.push(e)}}}var Dn={},On=0,kn="_reactListenersID"+(""+Math.random()).slice(2);function Un(e){return Object.prototype.hasOwnProperty.call(e,kn)||(e[kn]=On++,Dn[e[kn]]={}),Dn[e[kn]]}function Pn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function $n(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Hn(e,t){var n,i=$n(e);for(e=0;i;){if(3===i.nodeType){if(n=e+i.textContent.length,e<=t&&n>=t)return{node:i,offset:t-e};e=n}e:{for(;i;){if(i.nextSibling){i=i.nextSibling;break e}i=i.parentNode}i=void 0}i=$n(i)}}function Mn(){for(var e=window,t=Pn();t instanceof e.HTMLIFrameElement;){try{e=t.contentDocument.defaultView}catch(e){break}t=Pn(e.document)}return t}function qn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var Ln=V&&"documentMode"in document&&11>=document.documentMode,Fn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},jn=null,Bn=null,Gn=null,Wn=!1;function zn(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Wn||null==jn||jn!==Pn(n)?null:("selectionStart"in(n=jn)&&qn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Gn&&nn(Gn,n)?null:(Gn=n,(e=ce.getPooled(Fn.select,Bn,e,t)).type="select",e.target=jn,z(e),e))}var Vn={eventTypes:Fn,extractEvents:function(e,t,n,i){var r,s=i.window===i?i.document:9===i.nodeType?i:i.ownerDocument;if(!(r=!s)){e:{s=Un(s),r=E.onSelect;for(var o=0;o<r.length;o++){var a=r[o];if(!s.hasOwnProperty(a)||!s[a]){s=!1;break e}}s=!0}r=!s}if(r)return null;switch(s=t?q(t):window,e){case"focus":(Le(s)||"true"===s.contentEditable)&&(jn=s,Bn=t,Gn=null);break;case"blur":Gn=Bn=jn=null;break;case"mousedown":Wn=!0;break;case"contextmenu":case"mouseup":case"dragend":return Wn=!1,zn(n,i);case"selectionchange":if(Ln)break;case"keydown":case"keyup":return zn(n,i)}return null}};function Kn(e,t){return e=r({children:void 0},t),(t=function(e){var t="";return i.Children.forEach(e,function(e){null!=e&&(t+=e)}),t}(t.children))&&(e.children=t),e}function Yn(e,t,n,i){if(e=e.options,t){t={};for(var r=0;r<n.length;r++)t["$"+n[r]]=!0;for(n=0;n<e.length;n++)r=t.hasOwnProperty("$"+e[n].value),e[n].selected!==r&&(e[n].selected=r),r&&i&&(e[n].defaultSelected=!0)}else{for(n=""+Et(n),t=null,r=0;r<e.length;r++){if(e[r].value===n)return e[r].selected=!0,void(i&&(e[r].defaultSelected=!0));null!==t||e[r].disabled||(t=e[r])}null!==t&&(t.selected=!0)}}function Zn(e,t){return null!=t.dangerouslySetInnerHTML&&o("91"),r({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Jn(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&o("92"),Array.isArray(t)&&(1>=t.length||o("93"),t=t[0]),n=t),null==n&&(n="")),e._wrapperState={initialValue:Et(n)}}function Qn(e,t){var n=Et(t.value),i=Et(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=i&&(e.defaultValue=""+i)}function Xn(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}D.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),b=L,S=M,_=q,D.injectEventPluginsByName({SimpleEventPlugin:Sn,EnterLeaveEventPlugin:Xt,ChangeEventPlugin:Ft,SelectEventPlugin:Vn,BeforeInputEventPlugin:Ae});var ei={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function ti(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ni(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?ti(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ii=void 0,ri=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,i,r){MSApp.execUnsafeLocalFunction(function(){return e(t,n)})}:e}(function(e,t){if(e.namespaceURI!==ei.svg||"innerHTML"in e)e.innerHTML=t;else{for((ii=ii||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=ii.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function si(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var oi={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ai=["Webkit","ms","Moz","O"];function ui(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var i=0===n.indexOf("--"),r=n,s=t[n];r=null==s||"boolean"==typeof s||""===s?"":i||"number"!=typeof s||0===s||oi.hasOwnProperty(r)&&oi[r]?(""+s).trim():s+"px","float"===n&&(n="cssFloat"),i?e.setProperty(n,r):e[n]=r}}Object.keys(oi).forEach(function(e){ai.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),oi[t]=oi[e]})});var li=r({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ci(e,t){t&&(li[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&o("137",e,""),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&o("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||o("61")),null!=t.style&&"object"!=typeof t.style&&o("62",""))}function di(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function hi(e,t){var n=Un(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=E[t];for(var i=0;i<t.length;i++){var r=t[i];if(!n.hasOwnProperty(r)||!n[r]){switch(r){case"scroll":In("scroll",e);break;case"focus":case"blur":In("focus",e),In("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":je(r)&&In(r,e);break;case"invalid":case"submit":case"reset":break;default:-1===ie.indexOf(r)&&An(r,e)}n[r]=!0}}}function pi(){}var fi=null,mi=null;function gi(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Ti(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var vi=setTimeout,yi=clearTimeout;function Ei(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function bi(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var Si=[],_i=-1;function Ci(e){0>_i||(e.current=Si[_i],Si[_i]=null,_i--)}function wi(e,t){Si[++_i]=e.current,e.current=t}var Ri={},Ai={current:Ri},Ii={current:!1},Ni=Ri;function xi(e,t){var n=e.type.contextTypes;if(!n)return Ri;var i=e.stateNode;if(i&&i.__reactInternalMemoizedUnmaskedChildContext===t)return i.__reactInternalMemoizedMaskedChildContext;var r,s={};for(r in n)s[r]=t[r];return i&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=s),s}function Di(e){return null!==(e=e.childContextTypes)&&void 0!==e}function Oi(e){Ci(Ii),Ci(Ai)}function ki(e){Ci(Ii),Ci(Ai)}function Ui(e,t,n){Ai.current!==Ri&&o("168"),wi(Ai,t),wi(Ii,n)}function Pi(e,t,n){var i=e.stateNode;if(e=t.childContextTypes,"function"!=typeof i.getChildContext)return n;for(var s in i=i.getChildContext())s in e||o("108",lt(t)||"Unknown",s);return r({},n,i)}function $i(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||Ri,Ni=Ai.current,wi(Ai,t),wi(Ii,Ii.current),!0}function Hi(e,t,n){var i=e.stateNode;i||o("169"),n?(t=Pi(e,t,Ni),i.__reactInternalMemoizedMergedChildContext=t,Ci(Ii),Ci(Ai),wi(Ai,t)):Ci(Ii),wi(Ii,n)}var Mi=null,qi=null;function Li(e){return function(t){try{return e(t)}catch(e){}}}function Fi(e,t,n,i){return new function(e,t,n,i){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.firstContextDependency=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=i,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}(e,t,n,i)}function ji(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Bi(e,t){var n=e.alternate;return null===n?((n=Fi(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,n.firstContextDependency=e.firstContextDependency,n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Gi(e,t,n,i,r,s){var a=2;if(i=e,"function"==typeof e)ji(e)&&(a=1);else if("string"==typeof e)a=5;else e:switch(e){case Je:return Wi(n.children,r,s,t);case nt:return zi(n,3|r,s,t);case Qe:return zi(n,2|r,s,t);case Xe:return(e=Fi(12,n,t,4|r)).elementType=Xe,e.type=Xe,e.expirationTime=s,e;case rt:return(e=Fi(13,n,t,r)).elementType=rt,e.type=rt,e.expirationTime=s,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case et:a=10;break e;case tt:a=9;break e;case it:a=11;break e;case st:a=14;break e;case ot:a=16,i=null;break e}o("130",null==e?e:typeof e,"")}return(t=Fi(a,n,t,r)).elementType=e,t.type=i,t.expirationTime=s,t}function Wi(e,t,n,i){return(e=Fi(7,e,i,t)).expirationTime=n,e}function zi(e,t,n,i){return e=Fi(8,e,i,t),t=0==(1&t)?Qe:nt,e.elementType=t,e.type=t,e.expirationTime=n,e}function Vi(e,t,n){return(e=Fi(6,e,null,t)).expirationTime=n,e}function Ki(e,t,n){return(t=Fi(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Yi(e,t){e.didError=!1;var n=e.earliestPendingTime;0===n?e.earliestPendingTime=e.latestPendingTime=t:n>t?e.earliestPendingTime=t:e.latestPendingTime<t&&(e.latestPendingTime=t),Qi(t,e)}function Zi(e,t){e.didError=!1;var n=e.latestPingedTime;0!==n&&n<=t&&(e.latestPingedTime=0),n=e.earliestPendingTime;var i=e.latestPendingTime;n===t?e.earliestPendingTime=i===t?e.latestPendingTime=0:i:i===t&&(e.latestPendingTime=n),n=e.earliestSuspendedTime,i=e.latestSuspendedTime,0===n?e.earliestSuspendedTime=e.latestSuspendedTime=t:n>t?e.earliestSuspendedTime=t:i<t&&(e.latestSuspendedTime=t),Qi(t,e)}function Ji(e,t){var n=e.earliestPendingTime;return e=e.earliestSuspendedTime,(0===t||0!==n&&n<t)&&(t=n),(0===t||0!==e&&e<t)&&(t=e),t}function Qi(e,t){var n=t.earliestSuspendedTime,i=t.latestSuspendedTime,r=t.earliestPendingTime,s=t.latestPingedTime;0===(r=0!==r?r:s)&&(0===e||i>e)&&(r=i),0!==(e=r)&&0!==n&&n<e&&(e=n),t.nextExpirationTimeToWorkOn=r,t.expirationTime=e}var Xi=!1;function er(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function tr(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function nr(e){return{expirationTime:e,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function ir(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function rr(e,t){var n=e.alternate;if(null===n){var i=e.updateQueue,r=null;null===i&&(i=e.updateQueue=er(e.memoizedState))}else i=e.updateQueue,r=n.updateQueue,null===i?null===r?(i=e.updateQueue=er(e.memoizedState),r=n.updateQueue=er(n.memoizedState)):i=e.updateQueue=tr(r):null===r&&(r=n.updateQueue=tr(i));null===r||i===r?ir(i,t):null===i.lastUpdate||null===r.lastUpdate?(ir(i,t),ir(r,t)):(ir(i,t),r.lastUpdate=t)}function sr(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=er(e.memoizedState):or(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function or(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=tr(t)),t}function ar(e,t,n,i,s,o){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(o,i,s):e;case 3:e.effectTag=-1025&e.effectTag|64;case 0:if(null===(s="function"==typeof(e=n.payload)?e.call(o,i,s):e)||void 0===s)break;return r({},i,s);case 2:Xi=!0}return i}function ur(e,t,n,i,r){Xi=!1;for(var s=(t=or(e,t)).baseState,o=null,a=0,u=t.firstUpdate,l=s;null!==u;){var c=u.expirationTime;c>r?(null===o&&(o=u,s=l),(0===a||a>c)&&(a=c)):(l=ar(e,0,u,l,n,i),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=u:(t.lastEffect.nextEffect=u,t.lastEffect=u))),u=u.next}for(c=null,u=t.firstCapturedUpdate;null!==u;){var d=u.expirationTime;d>r?(null===c&&(c=u,null===o&&(s=l)),(0===a||a>d)&&(a=d)):(l=ar(e,0,u,l,n,i),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=u:(t.lastCapturedEffect.nextEffect=u,t.lastCapturedEffect=u))),u=u.next}null===o&&(t.lastUpdate=null),null===c?t.lastCapturedUpdate=null:e.effectTag|=32,null===o&&null===c&&(s=l),t.baseState=s,t.firstUpdate=o,t.firstCapturedUpdate=c,e.expirationTime=a,e.memoizedState=l}function lr(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),cr(t.firstEffect,n),t.firstEffect=t.lastEffect=null,cr(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function cr(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var i=t;"function"!=typeof n&&o("191",n),n.call(i)}e=e.nextEffect}}function dr(e,t){return{value:e,source:t,stack:ct(t)}}var hr={current:null},pr=null,fr=null,mr=null;function gr(e,t){var n=e.type._context;wi(hr,n._currentValue),n._currentValue=t}function Tr(e){var t=hr.current;Ci(hr),e.type._context._currentValue=t}function vr(e){pr=e,mr=fr=null,e.firstContextDependency=null}function yr(e,t){return mr!==e&&!1!==t&&0!==t&&("number"==typeof t&&1073741823!==t||(mr=e,t=1073741823),t={context:e,observedBits:t,next:null},null===fr?(null===pr&&o("293"),pr.firstContextDependency=fr=t):fr=fr.next=t),e._currentValue}var Er={},br={current:Er},Sr={current:Er},_r={current:Er};function Cr(e){return e===Er&&o("174"),e}function wr(e,t){wi(_r,t),wi(Sr,e),wi(br,Er);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ni(null,"");break;default:t=ni(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}Ci(br),wi(br,t)}function Rr(e){Ci(br),Ci(Sr),Ci(_r)}function Ar(e){Cr(_r.current);var t=Cr(br.current),n=ni(t,e.type);t!==n&&(wi(Sr,e),wi(br,n))}function Ir(e){Sr.current===e&&(Ci(br),Ci(Sr))}var Nr=ze.ReactCurrentOwner,xr=(new i.Component).refs;function Dr(e,t,n,i){n=null===(n=n(i,t=e.memoizedState))||void 0===n?t:r({},t,n),e.memoizedState=n,null!==(i=e.updateQueue)&&0===e.expirationTime&&(i.baseState=n)}var Or={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===rn(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var i=_o(),r=nr(i=Ws(i,e));r.payload=t,void 0!==n&&null!==n&&(r.callback=n),rr(e,r),Ks(e,i)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var i=_o(),r=nr(i=Ws(i,e));r.tag=1,r.payload=t,void 0!==n&&null!==n&&(r.callback=n),rr(e,r),Ks(e,i)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=_o(),i=nr(n=Ws(n,e));i.tag=2,void 0!==t&&null!==t&&(i.callback=t),rr(e,i),Ks(e,n)}};function kr(e,t,n,i,r,s,o){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(i,s,o):!t.prototype||!t.prototype.isPureReactComponent||(!nn(n,i)||!nn(r,s))}function Ur(e,t,n){var i=!1,r=Ri,s=t.contextType;return"object"==typeof s&&null!==s?s=Nr.currentDispatcher.readContext(s):(r=Di(t)?Ni:Ai.current,s=(i=null!==(i=t.contextTypes)&&void 0!==i)?xi(e,r):Ri),t=new t(n,s),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Or,e.stateNode=t,t._reactInternalFiber=e,i&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=r,e.__reactInternalMemoizedMaskedChildContext=s),t}function Pr(e,t,n,i){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,i),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,i),t.state!==e&&Or.enqueueReplaceState(t,t.state,null)}function $r(e,t,n,i){var r=e.stateNode;r.props=n,r.state=e.memoizedState,r.refs=xr;var s=t.contextType;"object"==typeof s&&null!==s?r.context=Nr.currentDispatcher.readContext(s):(s=Di(t)?Ni:Ai.current,r.context=xi(e,s)),null!==(s=e.updateQueue)&&(ur(e,s,n,r,i),r.state=e.memoizedState),"function"==typeof(s=t.getDerivedStateFromProps)&&(Dr(e,t,s,n),r.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof r.getSnapshotBeforeUpdate||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||(t=r.state,"function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount(),t!==r.state&&Or.enqueueReplaceState(r,r.state,null),null!==(s=e.updateQueue)&&(ur(e,s,n,r,i),r.state=e.memoizedState)),"function"==typeof r.componentDidMount&&(e.effectTag|=4)}var Hr=Array.isArray;function Mr(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){var i=void 0;(n=n._owner)&&(1!==n.tag&&o("289"),i=n.stateNode),i||o("147",e);var r=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===r?t.ref:((t=function(e){var t=i.refs;t===xr&&(t=i.refs={}),null===e?delete t[r]:t[r]=e})._stringRef=r,t)}"string"!=typeof e&&o("284"),n._owner||o("290",e)}return e}function qr(e,t){"textarea"!==e.type&&o("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function Lr(e){function t(t,n){if(e){var i=t.lastEffect;null!==i?(i.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,i){if(!e)return null;for(;null!==i;)t(n,i),i=i.sibling;return null}function i(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function r(e,t,n){return(e=Bi(e,t)).index=0,e.sibling=null,e}function s(t,n,i){return t.index=i,e?null!==(i=t.alternate)?(i=i.index)<n?(t.effectTag=2,n):i:(t.effectTag=2,n):n}function a(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,i){return null===t||6!==t.tag?((t=Vi(n,e.mode,i)).return=e,t):((t=r(t,n)).return=e,t)}function l(e,t,n,i){return null!==t&&t.elementType===n.type?((i=r(t,n.props)).ref=Mr(e,t,n),i.return=e,i):((i=Gi(n.type,n.key,n.props,null,e.mode,i)).ref=Mr(e,t,n),i.return=e,i)}function c(e,t,n,i){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ki(n,e.mode,i)).return=e,t):((t=r(t,n.children||[])).return=e,t)}function d(e,t,n,i,s){return null===t||7!==t.tag?((t=Wi(n,e.mode,i,s)).return=e,t):((t=r(t,n)).return=e,t)}function h(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Vi(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Ye:return(n=Gi(t.type,t.key,t.props,null,e.mode,n)).ref=Mr(e,null,t),n.return=e,n;case Ze:return(t=Ki(t,e.mode,n)).return=e,t}if(Hr(t)||ut(t))return(t=Wi(t,e.mode,n,null)).return=e,t;qr(e,t)}return null}function p(e,t,n,i){var r=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==r?null:u(e,t,""+n,i);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Ye:return n.key===r?n.type===Je?d(e,t,n.props.children,i,r):l(e,t,n,i):null;case Ze:return n.key===r?c(e,t,n,i):null}if(Hr(n)||ut(n))return null!==r?null:d(e,t,n,i,null);qr(e,n)}return null}function f(e,t,n,i,r){if("string"==typeof i||"number"==typeof i)return u(t,e=e.get(n)||null,""+i,r);if("object"==typeof i&&null!==i){switch(i.$$typeof){case Ye:return e=e.get(null===i.key?n:i.key)||null,i.type===Je?d(t,e,i.props.children,r,i.key):l(t,e,i,r);case Ze:return c(t,e=e.get(null===i.key?n:i.key)||null,i,r)}if(Hr(i)||ut(i))return d(t,e=e.get(n)||null,i,r,null);qr(t,i)}return null}function m(r,o,a,u){for(var l=null,c=null,d=o,m=o=0,g=null;null!==d&&m<a.length;m++){d.index>m?(g=d,d=null):g=d.sibling;var T=p(r,d,a[m],u);if(null===T){null===d&&(d=g);break}e&&d&&null===T.alternate&&t(r,d),o=s(T,o,m),null===c?l=T:c.sibling=T,c=T,d=g}if(m===a.length)return n(r,d),l;if(null===d){for(;m<a.length;m++)(d=h(r,a[m],u))&&(o=s(d,o,m),null===c?l=d:c.sibling=d,c=d);return l}for(d=i(r,d);m<a.length;m++)(g=f(d,r,m,a[m],u))&&(e&&null!==g.alternate&&d.delete(null===g.key?m:g.key),o=s(g,o,m),null===c?l=g:c.sibling=g,c=g);return e&&d.forEach(function(e){return t(r,e)}),l}function g(r,a,u,l){var c=ut(u);"function"!=typeof c&&o("150"),null==(u=c.call(u))&&o("151");for(var d=c=null,m=a,g=a=0,T=null,v=u.next();null!==m&&!v.done;g++,v=u.next()){m.index>g?(T=m,m=null):T=m.sibling;var y=p(r,m,v.value,l);if(null===y){m||(m=T);break}e&&m&&null===y.alternate&&t(r,m),a=s(y,a,g),null===d?c=y:d.sibling=y,d=y,m=T}if(v.done)return n(r,m),c;if(null===m){for(;!v.done;g++,v=u.next())null!==(v=h(r,v.value,l))&&(a=s(v,a,g),null===d?c=v:d.sibling=v,d=v);return c}for(m=i(r,m);!v.done;g++,v=u.next())null!==(v=f(m,r,g,v.value,l))&&(e&&null!==v.alternate&&m.delete(null===v.key?g:v.key),a=s(v,a,g),null===d?c=v:d.sibling=v,d=v);return e&&m.forEach(function(e){return t(r,e)}),c}return function(e,i,s,u){var l="object"==typeof s&&null!==s&&s.type===Je&&null===s.key;l&&(s=s.props.children);var c="object"==typeof s&&null!==s;if(c)switch(s.$$typeof){case Ye:e:{for(c=s.key,l=i;null!==l;){if(l.key===c){if(7===l.tag?s.type===Je:l.elementType===s.type){n(e,l.sibling),(i=r(l,s.type===Je?s.props.children:s.props)).ref=Mr(e,l,s),i.return=e,e=i;break e}n(e,l);break}t(e,l),l=l.sibling}s.type===Je?((i=Wi(s.props.children,e.mode,u,s.key)).return=e,e=i):((u=Gi(s.type,s.key,s.props,null,e.mode,u)).ref=Mr(e,i,s),u.return=e,e=u)}return a(e);case Ze:e:{for(l=s.key;null!==i;){if(i.key===l){if(4===i.tag&&i.stateNode.containerInfo===s.containerInfo&&i.stateNode.implementation===s.implementation){n(e,i.sibling),(i=r(i,s.children||[])).return=e,e=i;break e}n(e,i);break}t(e,i),i=i.sibling}(i=Ki(s,e.mode,u)).return=e,e=i}return a(e)}if("string"==typeof s||"number"==typeof s)return s=""+s,null!==i&&6===i.tag?(n(e,i.sibling),(i=r(i,s)).return=e,e=i):(n(e,i),(i=Vi(s,e.mode,u)).return=e,e=i),a(e);if(Hr(s))return m(e,i,s,u);if(ut(s))return g(e,i,s,u);if(c&&qr(e,s),void 0===s&&!l)switch(e.tag){case 1:case 0:o("152",(u=e.type).displayName||u.name||"Component")}return n(e,i)}}var Fr=Lr(!0),jr=Lr(!1),Br=null,Gr=null,Wr=!1;function zr(e,t){var n=Fi(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Vr(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function Kr(e){if(Wr){var t=Gr;if(t){var n=t;if(!Vr(e,t)){if(!(t=Ei(n))||!Vr(e,t))return e.effectTag|=2,Wr=!1,void(Br=e);zr(Br,n)}Br=e,Gr=bi(t)}else e.effectTag|=2,Wr=!1,Br=e}}function Yr(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;Br=e}function Zr(e){if(e!==Br)return!1;if(!Wr)return Yr(e),Wr=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Ti(t,e.memoizedProps))for(t=Gr;t;)zr(e,t),t=Ei(t);return Yr(e),Gr=Br?Ei(e.stateNode):null,!0}function Jr(){Gr=Br=null,Wr=!1}var Qr=ze.ReactCurrentOwner;function Xr(e,t,n,i){t.child=null===e?jr(t,null,n,i):Fr(t,e.child,n,i)}function es(e,t,n,i,r){n=n.render;var s=t.ref;return Ii.current||t.memoizedProps!==i||s!==(null!==e?e.ref:null)?(Xr(e,t,i=n(i,s),r),t.child):cs(e,t,r)}function ts(e,t,n,i,r,s){if(null===e){var o=n.type;return"function"!=typeof o||ji(o)||void 0!==o.defaultProps||null!==n.compare?((e=Gi(n.type,null,i,null,t.mode,s)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,ns(e,t,o,i,r,s))}return o=e.child,(0===r||r>s)&&(r=o.memoizedProps,(n=null!==(n=n.compare)?n:nn)(r,i)&&e.ref===t.ref)?cs(e,t,s):((e=Bi(o,i)).ref=t.ref,e.return=t,t.child=e)}function ns(e,t,n,i,r,s){return null!==e&&(0===r||r>s)&&nn(e.memoizedProps,i)&&e.ref===t.ref?cs(e,t,s):rs(e,t,n,i,s)}function is(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function rs(e,t,n,i,r){var s=Di(n)?Ni:Ai.current;return s=xi(t,s),vr(t),n=n(i,s),t.effectTag|=1,Xr(e,t,n,r),t.child}function ss(e,t,n,i,r){if(Di(n)){var s=!0;$i(t)}else s=!1;if(vr(t),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),Ur(t,n,i),$r(t,n,i,r),i=!0;else if(null===e){var o=t.stateNode,a=t.memoizedProps;o.props=a;var u=o.context,l=n.contextType;"object"==typeof l&&null!==l?l=Nr.currentDispatcher.readContext(l):l=xi(t,l=Di(n)?Ni:Ai.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof o.getSnapshotBeforeUpdate;d||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(a!==i||u!==l)&&Pr(t,o,i,l),Xi=!1;var h=t.memoizedState;u=o.state=h;var p=t.updateQueue;null!==p&&(ur(t,p,i,o,r),u=t.memoizedState),a!==i||h!==u||Ii.current||Xi?("function"==typeof c&&(Dr(t,n,c,i),u=t.memoizedState),(a=Xi||kr(t,n,a,i,h,u,l))?(d||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||("function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount()),"function"==typeof o.componentDidMount&&(t.effectTag|=4)):("function"==typeof o.componentDidMount&&(t.effectTag|=4),t.memoizedProps=i,t.memoizedState=u),o.props=i,o.state=u,o.context=l,i=a):("function"==typeof o.componentDidMount&&(t.effectTag|=4),i=!1)}else o=t.stateNode,a=t.memoizedProps,o.props=a,u=o.context,"object"==typeof(l=n.contextType)&&null!==l?l=Nr.currentDispatcher.readContext(l):l=xi(t,l=Di(n)?Ni:Ai.current),(d="function"==typeof(c=n.getDerivedStateFromProps)||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(a!==i||u!==l)&&Pr(t,o,i,l),Xi=!1,u=t.memoizedState,h=o.state=u,null!==(p=t.updateQueue)&&(ur(t,p,i,o,r),h=t.memoizedState),a!==i||u!==h||Ii.current||Xi?("function"==typeof c&&(Dr(t,n,c,i),h=t.memoizedState),(c=Xi||kr(t,n,a,i,u,h,l))?(d||"function"!=typeof o.UNSAFE_componentWillUpdate&&"function"!=typeof o.componentWillUpdate||("function"==typeof o.componentWillUpdate&&o.componentWillUpdate(i,h,l),"function"==typeof o.UNSAFE_componentWillUpdate&&o.UNSAFE_componentWillUpdate(i,h,l)),"function"==typeof o.componentDidUpdate&&(t.effectTag|=4),"function"==typeof o.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof o.componentDidUpdate||a===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof o.getSnapshotBeforeUpdate||a===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),t.memoizedProps=i,t.memoizedState=h),o.props=i,o.state=h,o.context=l,i=c):("function"!=typeof o.componentDidUpdate||a===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof o.getSnapshotBeforeUpdate||a===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),i=!1);return os(e,t,n,i,s,r)}function os(e,t,n,i,r,s){is(e,t);var o=0!=(64&t.effectTag);if(!i&&!o)return r&&Hi(t,n,!1),cs(e,t,s);i=t.stateNode,Qr.current=t;var a=o&&"function"!=typeof n.getDerivedStateFromError?null:i.render();return t.effectTag|=1,null!==e&&o?(t.child=Fr(t,e.child,null,s),t.child=Fr(t,null,a,s)):Xr(e,t,a,s),t.memoizedState=i.state,r&&Hi(t,n,!0),t.child}function as(e){var t=e.stateNode;t.pendingContext?Ui(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Ui(0,t.context,!1),wr(e,t.containerInfo)}function us(e,t){if(e&&e.defaultProps)for(var n in t=r({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}function ls(e,t,n){var i=t.mode,r=t.pendingProps,s=t.memoizedState;null!==s&&(s.alreadyCaptured?null!==e&&s===e.memoizedState?s={alreadyCaptured:!0,didTimeout:!0,timedOutAt:s.timedOutAt}:(s.alreadyCaptured=!0,s.didTimeout=!0):s=null);var o=null!==s&&s.didTimeout;if(null===e)o?(o=r.fallback,r=Wi(null,i,0,null),i=Wi(o,i,n,null),r.sibling=i,(n=r).return=i.return=t):n=i=jr(t,null,r.children,n);else{var a=e.memoizedState;null!==a&&a.didTimeout?(e=(i=e.child).sibling,o?(n=r.fallback,(i=Bi(i,i.pendingProps)).effectTag|=2,(r=i.sibling=Bi(e,n,e.expirationTime)).effectTag|=2,n=i,i.childExpirationTime=0,i=r,n.return=i.return=t):(o=e.child,i=Fr(t,i.child,r.children,n),Fr(t,o,null,n),n=i)):(e=e.child,o?(o=r.fallback,(r=Wi(null,i,0,null)).effectTag|=2,r.child=e,e.return=r,(i=r.sibling=Wi(o,i,n,null)).effectTag|=2,n=r,r.childExpirationTime=0,n.return=i.return=t):i=n=Fr(t,e,r.children,n))}return t.memoizedState=s,t.child=n,i}function cs(e,t,n){null!==e&&(t.firstContextDependency=e.firstContextDependency);var i=t.childExpirationTime;if(0===i||i>n)return null;if(null!==e&&t.child!==e.child&&o("153"),null!==t.child){for(n=Bi(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Bi(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function ds(e,t,n){var i=t.expirationTime;if(null!==e&&e.memoizedProps===t.pendingProps&&!Ii.current&&(0===i||i>n)){switch(t.tag){case 3:as(t),Jr();break;case 5:Ar(t);break;case 1:Di(t.type)&&$i(t);break;case 4:wr(t,t.stateNode.containerInfo);break;case 10:gr(t,t.memoizedProps.value);break;case 13:if(null!==(i=t.memoizedState)&&i.didTimeout)return 0!==(i=t.child.childExpirationTime)&&i<=n?ls(e,t,n):null!==(t=cs(e,t,n))?t.sibling:null}return cs(e,t,n)}switch(t.expirationTime=0,t.tag){case 2:i=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps;var r=xi(t,Ai.current);if(vr(t),r=i(e,r),t.effectTag|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof){if(t.tag=1,Di(i)){var s=!0;$i(t)}else s=!1;t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null;var a=i.getDerivedStateFromProps;"function"==typeof a&&Dr(t,i,a,e),r.updater=Or,t.stateNode=r,r._reactInternalFiber=t,$r(t,i,e,n),t=os(null,t,i,!0,s,n)}else t.tag=0,Xr(null,t,r,n),t=t.child;return t;case 16:switch(r=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),s=t.pendingProps,e=function(e){var t=e._result;switch(e._status){case 1:return t;case 2:case 0:throw t;default:throw e._status=0,(t=(t=e._ctor)()).then(function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)},function(t){0===e._status&&(e._status=2,e._result=t)}),e._result=t,t}}(r),t.type=e,r=t.tag=function(e){if("function"==typeof e)return ji(e)?1:0;if(void 0!==e&&null!==e){if((e=e.$$typeof)===it)return 11;if(e===st)return 14}return 2}(e),s=us(e,s),a=void 0,r){case 0:a=rs(null,t,e,s,n);break;case 1:a=ss(null,t,e,s,n);break;case 11:a=es(null,t,e,s,n);break;case 14:a=ts(null,t,e,us(e.type,s),i,n);break;default:o("283",e)}return a;case 0:return i=t.type,r=t.pendingProps,rs(e,t,i,r=t.elementType===i?r:us(i,r),n);case 1:return i=t.type,r=t.pendingProps,ss(e,t,i,r=t.elementType===i?r:us(i,r),n);case 3:return as(t),null===(i=t.updateQueue)&&o("282"),r=null!==(r=t.memoizedState)?r.element:null,ur(t,i,t.pendingProps,null,n),(i=t.memoizedState.element)===r?(Jr(),t=cs(e,t,n)):(r=t.stateNode,(r=(null===e||null===e.child)&&r.hydrate)&&(Gr=bi(t.stateNode.containerInfo),Br=t,r=Wr=!0),r?(t.effectTag|=2,t.child=jr(t,null,i,n)):(Xr(e,t,i,n),Jr()),t=t.child),t;case 5:return Ar(t),null===e&&Kr(t),i=t.type,r=t.pendingProps,s=null!==e?e.memoizedProps:null,a=r.children,Ti(i,r)?a=null:null!==s&&Ti(i,s)&&(t.effectTag|=16),is(e,t),1073741823!==n&&1&t.mode&&r.hidden?(t.expirationTime=1073741823,t=null):(Xr(e,t,a,n),t=t.child),t;case 6:return null===e&&Kr(t),null;case 13:return ls(e,t,n);case 4:return wr(t,t.stateNode.containerInfo),i=t.pendingProps,null===e?t.child=Fr(t,null,i,n):Xr(e,t,i,n),t.child;case 11:return i=t.type,r=t.pendingProps,es(e,t,i,r=t.elementType===i?r:us(i,r),n);case 7:return Xr(e,t,t.pendingProps,n),t.child;case 8:case 12:return Xr(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(i=t.type._context,r=t.pendingProps,a=t.memoizedProps,gr(t,s=r.value),null!==a){var u=a.value;if(0===(s=u===s&&(0!==u||1/u==1/s)||u!=u&&s!=s?0:0|("function"==typeof i._calculateChangedBits?i._calculateChangedBits(u,s):1073741823))){if(a.children===r.children&&!Ii.current){t=cs(e,t,n);break e}}else for(null!==(a=t.child)&&(a.return=t);null!==a;){if(null!==(u=a.firstContextDependency))do{if(u.context===i&&0!=(u.observedBits&s)){if(1===a.tag){var l=nr(n);l.tag=2,rr(a,l)}(0===a.expirationTime||a.expirationTime>n)&&(a.expirationTime=n),null!==(l=a.alternate)&&(0===l.expirationTime||l.expirationTime>n)&&(l.expirationTime=n);for(var c=a.return;null!==c;){if(l=c.alternate,0===c.childExpirationTime||c.childExpirationTime>n)c.childExpirationTime=n,null!==l&&(0===l.childExpirationTime||l.childExpirationTime>n)&&(l.childExpirationTime=n);else{if(null===l||!(0===l.childExpirationTime||l.childExpirationTime>n))break;l.childExpirationTime=n}c=c.return}}l=a.child,u=u.next}while(null!==u);else l=10===a.tag&&a.type===t.type?null:a.child;if(null!==l)l.return=a;else for(l=a;null!==l;){if(l===t){l=null;break}if(null!==(a=l.sibling)){a.return=l.return,l=a;break}l=l.return}a=l}}Xr(e,t,r.children,n),t=t.child}return t;case 9:return r=t.type,i=(s=t.pendingProps).children,vr(t),i=i(r=yr(r,s.unstable_observedBits)),t.effectTag|=1,Xr(e,t,i,n),t.child;case 14:return ts(e,t,r=t.type,s=us(r.type,t.pendingProps),i,n);case 15:return ns(e,t,t.type,t.pendingProps,i,n);case 17:return i=t.type,r=t.pendingProps,r=t.elementType===i?r:us(i,r),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,Di(i)?(e=!0,$i(t)):e=!1,vr(t),Ur(t,i,r),$r(t,i,r,n),os(null,t,i,!0,e,n);default:o("156")}}function hs(e){e.effectTag|=4}var ps=void 0,fs=void 0,ms=void 0,gs=void 0;function Ts(e,t){var n=t.source,i=t.stack;null===i&&null!==n&&(i=ct(n)),null!==n&&lt(n.type),t=t.value,null!==e&&1===e.tag&&lt(e.type);try{console.error(t)}catch(e){setTimeout(function(){throw e})}}function vs(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Gs(e,t)}else t.current=null}function ys(e){switch("function"==typeof qi&&qi(e),e.tag){case 1:vs(e);var t=e.stateNode;if("function"==typeof t.componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Gs(e,t)}break;case 5:vs(e);break;case 4:Ss(e)}}function Es(e){return 5===e.tag||3===e.tag||4===e.tag}function bs(e){e:{for(var t=e.return;null!==t;){if(Es(t)){var n=t;break e}t=t.return}o("160"),n=void 0}var i=t=void 0;switch(n.tag){case 5:t=n.stateNode,i=!1;break;case 3:case 4:t=n.stateNode.containerInfo,i=!0;break;default:o("161")}16&n.effectTag&&(si(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||Es(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var r=e;;){if(5===r.tag||6===r.tag)if(n)if(i){var s=t,a=r.stateNode,u=n;8===s.nodeType?s.parentNode.insertBefore(a,u):s.insertBefore(a,u)}else t.insertBefore(r.stateNode,n);else i?(a=t,u=r.stateNode,8===a.nodeType?(s=a.parentNode).insertBefore(u,a):(s=a).appendChild(u),null!==(a=a._reactRootContainer)&&void 0!==a||null!==s.onclick||(s.onclick=pi)):t.appendChild(r.stateNode);else if(4!==r.tag&&null!==r.child){r.child.return=r,r=r.child;continue}if(r===e)break;for(;null===r.sibling;){if(null===r.return||r.return===e)return;r=r.return}r.sibling.return=r.return,r=r.sibling}}function Ss(e){for(var t=e,n=!1,i=void 0,r=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&o("160"),n.tag){case 5:i=n.stateNode,r=!1;break e;case 3:case 4:i=n.stateNode.containerInfo,r=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag){e:for(var s=t,a=s;;)if(ys(a),null!==a.child&&4!==a.tag)a.child.return=a,a=a.child;else{if(a===s)break;for(;null===a.sibling;){if(null===a.return||a.return===s)break e;a=a.return}a.sibling.return=a.return,a=a.sibling}r?(s=i,a=t.stateNode,8===s.nodeType?s.parentNode.removeChild(a):s.removeChild(a)):i.removeChild(t.stateNode)}else if(4===t.tag?(i=t.stateNode.containerInfo,r=!0):ys(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function _s(e,t){switch(t.tag){case 1:break;case 5:var n=t.stateNode;if(null!=n){var i=t.memoizedProps,r=null!==e?e.memoizedProps:i;e=t.type;var s=t.updateQueue;if(t.updateQueue=null,null!==s){for(n[$]=i,"input"===e&&"radio"===i.type&&null!=i.name&&_t(n,i),di(e,r),t=di(e,i),r=0;r<s.length;r+=2){var a=s[r],u=s[r+1];"style"===a?ui(n,u):"dangerouslySetInnerHTML"===a?ri(n,u):"children"===a?si(n,u):yt(n,a,u,t)}switch(e){case"input":Ct(n,i);break;case"textarea":Qn(n,i);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!i.multiple,null!=(s=i.value)?Yn(n,!!i.multiple,s,!1):e!==!!i.multiple&&(null!=i.defaultValue?Yn(n,!!i.multiple,i.defaultValue,!0):Yn(n,!!i.multiple,i.multiple?[]:"",!1))}}}break;case 6:null===t.stateNode&&o("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 12:case 13:case 17:break;default:o("163")}}function Cs(e,t,n){(n=nr(n)).tag=3,n.payload={element:null};var i=t.value;return n.callback=function(){Oo(i),Ts(e,t)},n}function ws(e,t,n){(n=nr(n)).tag=3;var i=e.type.getDerivedStateFromError;if("function"==typeof i){var r=t.value;n.payload=function(){return i(r)}}var s=e.stateNode;return null!==s&&"function"==typeof s.componentDidCatch&&(n.callback=function(){"function"!=typeof i&&(null===qs?qs=new Set([this]):qs.add(this));var n=t.value,r=t.stack;Ts(e,t),this.componentDidCatch(n,{componentStack:null!==r?r:""})}),n}function Rs(e){switch(e.tag){case 1:Di(e.type)&&Oi();var t=e.effectTag;return 1024&t?(e.effectTag=-1025&t|64,e):null;case 3:return Rr(),ki(),0!=(64&(t=e.effectTag))&&o("285"),e.effectTag=-1025&t|64,e;case 5:return Ir(e),null;case 13:if(1024&(t=e.effectTag)){e.effectTag=-1025&t|64,t=null!==(t=e.alternate)?t.memoizedState:null;var n=e.memoizedState;return null===n?n={alreadyCaptured:!0,didTimeout:!1,timedOutAt:0}:t===n?n={alreadyCaptured:!0,didTimeout:n.didTimeout,timedOutAt:n.timedOutAt}:n.alreadyCaptured=!0,e.memoizedState=n,e}return null;case 4:return Rr(),null;case 10:return Tr(e),null;default:return null}}ps=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},fs=function(){},ms=function(e,t,n,i,s){var o=e.memoizedProps;if(o!==i){var a=t.stateNode;switch(Cr(br.current),e=null,n){case"input":o=bt(a,o),i=bt(a,i),e=[];break;case"option":o=Kn(a,o),i=Kn(a,i),e=[];break;case"select":o=r({},o,{value:void 0}),i=r({},i,{value:void 0}),e=[];break;case"textarea":o=Zn(a,o),i=Zn(a,i),e=[];break;default:"function"!=typeof o.onClick&&"function"==typeof i.onClick&&(a.onclick=pi)}ci(n,i),a=n=void 0;var u=null;for(n in o)if(!i.hasOwnProperty(n)&&o.hasOwnProperty(n)&&null!=o[n])if("style"===n){var l=o[n];for(a in l)l.hasOwnProperty(a)&&(u||(u={}),u[a]="")}else"dangerouslySetInnerHTML"!==n&&"children"!==n&&"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&"autoFocus"!==n&&(y.hasOwnProperty(n)?e||(e=[]):(e=e||[]).push(n,null));for(n in i){var c=i[n];if(l=null!=o?o[n]:void 0,i.hasOwnProperty(n)&&c!==l&&(null!=c||null!=l))if("style"===n)if(l){for(a in l)!l.hasOwnProperty(a)||c&&c.hasOwnProperty(a)||(u||(u={}),u[a]="");for(a in c)c.hasOwnProperty(a)&&l[a]!==c[a]&&(u||(u={}),u[a]=c[a])}else u||(e||(e=[]),e.push(n,u)),u=c;else"dangerouslySetInnerHTML"===n?(c=c?c.__html:void 0,l=l?l.__html:void 0,null!=c&&l!==c&&(e=e||[]).push(n,""+c)):"children"===n?l===c||"string"!=typeof c&&"number"!=typeof c||(e=e||[]).push(n,""+c):"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&(y.hasOwnProperty(n)?(null!=c&&hi(s,n),e||l===c||(e=[])):(e=e||[]).push(n,c))}u&&(e=e||[]).push("style",u),s=e,(t.updateQueue=s)&&hs(t)}},gs=function(e,t,n,i){n!==i&&hs(t)};var As={readContext:yr},Is=ze.ReactCurrentOwner,Ns=0,xs=0,Ds=!1,Os=null,ks=null,Us=0,Ps=-1,$s=!1,Hs=null,Ms=!1,qs=null;function Ls(){if(null!==Os)for(var e=Os.return;null!==e;){var t=e;switch(t.tag){case 1:var n=t.type.childContextTypes;null!==n&&void 0!==n&&Oi();break;case 3:Rr(),ki();break;case 5:Ir(t);break;case 4:Rr();break;case 10:Tr(t)}e=e.return}ks=null,Us=0,Ps=-1,$s=!1,Os=null}function Fs(e){for(;;){var t=e.alternate,n=e.return,i=e.sibling;if(0==(512&e.effectTag)){var s=t,a=(t=e).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:Di(t.type)&&Oi();break;case 3:Rr(),ki(),(a=t.stateNode).pendingContext&&(a.context=a.pendingContext,a.pendingContext=null),null!==s&&null!==s.child||(Zr(t),t.effectTag&=-3),fs(t);break;case 5:Ir(t);var u=Cr(_r.current),l=t.type;if(null!==s&&null!=t.stateNode)ms(s,t,l,a,u),s.ref!==t.ref&&(t.effectTag|=128);else if(a){var c=Cr(br.current);if(Zr(t)){s=(a=t).stateNode;var d=a.type,h=a.memoizedProps,p=u;switch(s[P]=a,s[$]=h,l=void 0,u=d){case"iframe":case"object":An("load",s);break;case"video":case"audio":for(d=0;d<ie.length;d++)An(ie[d],s);break;case"source":An("error",s);break;case"img":case"image":case"link":An("error",s),An("load",s);break;case"form":An("reset",s),An("submit",s);break;case"details":An("toggle",s);break;case"input":St(s,h),An("invalid",s),hi(p,"onChange");break;case"select":s._wrapperState={wasMultiple:!!h.multiple},An("invalid",s),hi(p,"onChange");break;case"textarea":Jn(s,h),An("invalid",s),hi(p,"onChange")}for(l in ci(u,h),d=null,h)h.hasOwnProperty(l)&&(c=h[l],"children"===l?"string"==typeof c?s.textContent!==c&&(d=["children",c]):"number"==typeof c&&s.textContent!==""+c&&(d=["children",""+c]):y.hasOwnProperty(l)&&null!=c&&hi(p,l));switch(u){case"input":Ge(s),wt(s,h,!0);break;case"textarea":Ge(s),Xn(s);break;case"select":case"option":break;default:"function"==typeof h.onClick&&(s.onclick=pi)}l=d,a.updateQueue=l,(a=null!==l)&&hs(t)}else{h=t,s=l,p=a,d=9===u.nodeType?u:u.ownerDocument,c===ei.html&&(c=ti(s)),c===ei.html?"script"===s?((s=d.createElement("div")).innerHTML="<script><\/script>",d=s.removeChild(s.firstChild)):"string"==typeof p.is?d=d.createElement(s,{is:p.is}):(d=d.createElement(s),"select"===s&&p.multiple&&(d.multiple=!0)):d=d.createElementNS(c,s),(s=d)[P]=h,s[$]=a,ps(s,t,!1,!1),p=s;var f=u,m=di(d=l,h=a);switch(d){case"iframe":case"object":An("load",p),u=h;break;case"video":case"audio":for(u=0;u<ie.length;u++)An(ie[u],p);u=h;break;case"source":An("error",p),u=h;break;case"img":case"image":case"link":An("error",p),An("load",p),u=h;break;case"form":An("reset",p),An("submit",p),u=h;break;case"details":An("toggle",p),u=h;break;case"input":St(p,h),u=bt(p,h),An("invalid",p),hi(f,"onChange");break;case"option":u=Kn(p,h);break;case"select":p._wrapperState={wasMultiple:!!h.multiple},u=r({},h,{value:void 0}),An("invalid",p),hi(f,"onChange");break;case"textarea":Jn(p,h),u=Zn(p,h),An("invalid",p),hi(f,"onChange");break;default:u=h}ci(d,u),c=void 0;var g=d,T=p,v=u;for(c in v)if(v.hasOwnProperty(c)){var E=v[c];"style"===c?ui(T,E):"dangerouslySetInnerHTML"===c?null!=(E=E?E.__html:void 0)&&ri(T,E):"children"===c?"string"==typeof E?("textarea"!==g||""!==E)&&si(T,E):"number"==typeof E&&si(T,""+E):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(y.hasOwnProperty(c)?null!=E&&hi(f,c):null!=E&&yt(T,c,E,m))}switch(d){case"input":Ge(p),wt(p,h,!1);break;case"textarea":Ge(p),Xn(p);break;case"option":null!=h.value&&p.setAttribute("value",""+Et(h.value));break;case"select":(u=p).multiple=!!h.multiple,null!=(p=h.value)?Yn(u,!!h.multiple,p,!1):null!=h.defaultValue&&Yn(u,!!h.multiple,h.defaultValue,!0);break;default:"function"==typeof u.onClick&&(p.onclick=pi)}(a=gi(l,a))&&hs(t),t.stateNode=s}null!==t.ref&&(t.effectTag|=128)}else null===t.stateNode&&o("166");break;case 6:s&&null!=t.stateNode?gs(s,t,s.memoizedProps,a):("string"!=typeof a&&(null===t.stateNode&&o("166")),s=Cr(_r.current),Cr(br.current),Zr(t)?(l=(a=t).stateNode,s=a.memoizedProps,l[P]=a,(a=l.nodeValue!==s)&&hs(t)):(l=t,(a=(9===s.nodeType?s:s.ownerDocument).createTextNode(a))[P]=t,l.stateNode=a));break;case 11:break;case 13:a=t.memoizedState,l=null!==s?s.memoizedState:null,(null!==a&&a.didTimeout)!==(null!==l&&l.didTimeout)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:Rr(),fs(t);break;case 10:Tr(t);break;case 9:case 14:break;case 17:Di(t.type)&&Oi();break;default:o("156")}if(Os=null,t=e,1073741823===Us||1073741823!==t.childExpirationTime){for(a=0,l=t.child;null!==l;)s=l.expirationTime,u=l.childExpirationTime,(0===a||0!==s&&s<a)&&(a=s),(0===a||0!==u&&u<a)&&(a=u),l=l.sibling;t.childExpirationTime=a}null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e))}else{if(null!==(e=Rs(e)))return e.effectTag&=511,e;null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512)}if(null!==i)return i;if(null===n)break;e=n}return null}function js(e){var t=ds(e.alternate,e,Us);return e.memoizedProps=e.pendingProps,null===t&&(t=Fs(e)),Is.current=null,t}function Bs(e,t,n){Ds&&o("243"),Ds=!0,Is.currentDispatcher=As;var i=e.nextExpirationTimeToWorkOn;i===Us&&e===ks&&null!==Os||(Ls(),Us=i,Os=Bi((ks=e).current,null),e.pendingCommitExpirationTime=0);for(var r=!1;;){try{if(t)for(;null!==Os&&!Do();)Os=js(Os);else for(;null!==Os;)Os=js(Os)}catch(t){if(null===Os)r=!0,Oo(t);else{null===Os&&o("271");var s=Os,a=s.return;if(null!==a){e:{var u=e,l=a,c=s,d=t;if(a=Us,c.effectTag|=512,c.firstEffect=c.lastEffect=null,null!==d&&"object"==typeof d&&"function"==typeof d.then){var h=d;d=l;var p=-1,f=-1;do{if(13===d.tag){var m=d.alternate;if(null!==m&&(null!==(m=m.memoizedState)&&m.didTimeout)){f=10*(m.timedOutAt-2);break}"number"==typeof(m=d.pendingProps.maxDuration)&&(0>=m?p=0:(-1===p||m<p)&&(p=m))}d=d.return}while(null!==d);d=l;do{if((m=13===d.tag)&&(void 0===d.memoizedProps.fallback?m=!1:m=null===(m=d.memoizedState)||!m.didTimeout),m){if(l=zs.bind(null,u,d,c,0==(1&d.mode)?1:a),h.then(l,l),0==(1&d.mode)){d.effectTag|=32,Xr(c.alternate,c,null,a),c.effectTag&=-513,1===c.tag&&(c.effectTag&=-421,null===c.alternate&&(c.tag=17));break e}-1===p?u=1073741823:(-1===f&&(f=10*(Ji(u,a)-2)-5e3),u=f+p),0<=u&&Ps<u&&(Ps=u),d.effectTag|=1024,d.expirationTime=a;break e}d=d.return}while(null!==d);d=Error("An update was suspended, but no placeholder UI was provided.")}$s=!0,d=dr(d,c),u=l;do{switch(u.tag){case 3:c=d,u.effectTag|=1024,u.expirationTime=a,sr(u,a=Cs(u,c,a));break e;case 1:if(c=d,l=u.type,h=u.stateNode,0==(64&u.effectTag)&&("function"==typeof l.getDerivedStateFromError||null!==h&&"function"==typeof h.componentDidCatch&&(null===qs||!qs.has(h)))){u.effectTag|=1024,u.expirationTime=a,sr(u,a=ws(u,c,a));break e}}u=u.return}while(null!==u)}Os=Fs(s);continue}r=!0,Oo(t)}}break}if(Ds=!1,mr=fr=pr=Is.currentDispatcher=null,r)ks=null,e.finishedWork=null;else if(null!==Os)e.finishedWork=null;else{if(null===(t=e.current.alternate)&&o("281"),ks=null,$s){if(r=e.latestPendingTime,s=e.latestSuspendedTime,a=e.latestPingedTime,0!==r&&r>i||0!==s&&s>i||0!==a&&a>i)return Zi(e,i),void So(e,t,i,e.expirationTime,-1);if(!e.didError&&!n)return e.didError=!0,i=e.nextExpirationTimeToWorkOn=i,n=e.expirationTime=1,void So(e,t,i,n,-1)}n||-1===Ps?(e.pendingCommitExpirationTime=i,e.finishedWork=t):(Zi(e,i),(n=10*(Ji(e,i)-2))<Ps&&(Ps=n),n=10*(_o()-2),n=Ps-n,So(e,t,i,e.expirationTime,0>n?0:n))}}function Gs(e,t){var n;e:{for(Ds&&!Ms&&o("263"),n=e.return;null!==n;){switch(n.tag){case 1:var i=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof i.componentDidCatch&&(null===qs||!qs.has(i))){rr(n,e=ws(n,e=dr(t,e),1)),Ks(n,1),n=void 0;break e}break;case 3:rr(n,e=Cs(n,e=dr(t,e),1)),Ks(n,1),n=void 0;break e}n=n.return}3===e.tag&&(rr(e,n=Cs(e,n=dr(t,e),1)),Ks(e,1)),n=void 0}return n}function Ws(e,t){return 0!==xs?e=xs:Ds?e=Ms?1:Us:1&t.mode?(e=co?2+10*(1+((e-2+15)/10|0)):2+25*(1+((e-2+500)/25|0)),null!==ks&&e===Us&&(e+=1)):e=1,co&&e>io&&(io=e),e}function zs(e,t,n,i){var r=e.earliestSuspendedTime,s=e.latestSuspendedTime;if(0!==r&&i>=r&&i<=s){s=r=i,e.didError=!1;var o=e.latestPingedTime;(0===o||o<s)&&(e.latestPingedTime=s),Qi(s,e)}else Yi(e,r=Ws(r=_o(),t));0!=(1&t.mode)&&e===ks&&Us===i&&(ks=null),Vs(t,r),0==(1&t.mode)&&(Vs(n,r),1===n.tag&&null!==n.stateNode&&((t=nr(r)).tag=2,rr(n,t))),0!==(n=e.expirationTime)&&Co(e,n)}function Vs(e,t){(0===e.expirationTime||e.expirationTime>t)&&(e.expirationTime=t);var n=e.alternate;null!==n&&(0===n.expirationTime||n.expirationTime>t)&&(n.expirationTime=t);var i=e.return,r=null;if(null===i&&3===e.tag)r=e.stateNode;else for(;null!==i;){if(n=i.alternate,(0===i.childExpirationTime||i.childExpirationTime>t)&&(i.childExpirationTime=t),null!==n&&(0===n.childExpirationTime||n.childExpirationTime>t)&&(n.childExpirationTime=t),null===i.return&&3===i.tag){r=i.stateNode;break}i=i.return}return null===r?null:r}function Ks(e,t){null!==(e=Vs(e,t))&&(!Ds&&0!==Us&&t<Us&&Ls(),Yi(e,t),Ds&&!Ms&&ks===e||Co(e,e.expirationTime),To>go&&(To=0,o("185")))}function Ys(e,t,n,i,r){var s=xs;xs=1;try{return e(t,n,i,r)}finally{xs=s}}var Zs=null,Js=null,Qs=0,Xs=void 0,eo=!1,to=null,no=0,io=0,ro=!1,so=!1,oo=null,ao=null,uo=!1,lo=!1,co=!1,ho=null,po=s.unstable_now(),fo=2+(po/10|0),mo=fo,go=50,To=0,vo=null,yo=1;function Eo(){fo=2+((s.unstable_now()-po)/10|0)}function bo(e,t){if(0!==Qs){if(t>Qs)return;null!==Xs&&s.unstable_cancelCallback(Xs)}Qs=t,e=s.unstable_now()-po,Xs=s.unstable_scheduleCallback(Ro,{timeout:10*(t-2)-e})}function So(e,t,n,i,r){e.expirationTime=i,0!==r||Do()?0<r&&(e.timeoutHandle=vi(function(e,t,n){e.pendingCommitExpirationTime=n,e.finishedWork=t,Eo(),mo=fo,Io(e,n)}.bind(null,e,t,n),r)):(e.pendingCommitExpirationTime=n,e.finishedWork=t)}function _o(){return eo?mo:(wo(),0!==no&&1073741823!==no||(Eo(),mo=fo),mo)}function Co(e,t){if(null===e.nextScheduledRoot)e.expirationTime=t,null===Js?(Zs=Js=e,e.nextScheduledRoot=e):(Js=Js.nextScheduledRoot=e).nextScheduledRoot=Zs;else{var n=e.expirationTime;(0===n||t<n)&&(e.expirationTime=t)}eo||(uo?lo&&(to=e,no=1,No(e,1,!0)):1===t?Ao(1,null):bo(e,t))}function wo(){var e=0,t=null;if(null!==Js)for(var n=Js,i=Zs;null!==i;){var r=i.expirationTime;if(0===r){if((null===n||null===Js)&&o("244"),i===i.nextScheduledRoot){Zs=Js=i.nextScheduledRoot=null;break}if(i===Zs)Zs=r=i.nextScheduledRoot,Js.nextScheduledRoot=r,i.nextScheduledRoot=null;else{if(i===Js){(Js=n).nextScheduledRoot=Zs,i.nextScheduledRoot=null;break}n.nextScheduledRoot=i.nextScheduledRoot,i.nextScheduledRoot=null}i=n.nextScheduledRoot}else{if((0===e||r<e)&&(e=r,t=i),i===Js)break;if(1===e)break;n=i,i=i.nextScheduledRoot}}to=t,no=e}function Ro(e){if(e.didTimeout&&null!==Zs){Eo();var t=Zs;do{var n=t.expirationTime;0!==n&&fo>=n&&(t.nextExpirationTimeToWorkOn=fo),t=t.nextScheduledRoot}while(t!==Zs)}Ao(0,e)}function Ao(e,t){if(ao=t,wo(),null!==ao)for(Eo(),mo=fo;null!==to&&0!==no&&(0===e||e>=no)&&(!ro||fo>=no);)No(to,no,fo>=no),wo(),Eo(),mo=fo;else for(;null!==to&&0!==no&&(0===e||e>=no);)No(to,no,!0),wo();if(null!==ao&&(Qs=0,Xs=null),0!==no&&bo(to,no),ao=null,ro=!1,To=0,vo=null,null!==ho)for(e=ho,ho=null,t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){so||(so=!0,oo=e)}}if(so)throw e=oo,oo=null,so=!1,e}function Io(e,t){eo&&o("253"),to=e,no=t,No(e,t,!0),Ao(1,null)}function No(e,t,n){if(eo&&o("245"),eo=!0,null===ao||n){var i=e.finishedWork;null!==i?xo(e,i,t):(e.finishedWork=null,-1!==(i=e.timeoutHandle)&&(e.timeoutHandle=-1,yi(i)),Bs(e,!1,n),null!==(i=e.finishedWork)&&xo(e,i,t))}else null!==(i=e.finishedWork)?xo(e,i,t):(e.finishedWork=null,-1!==(i=e.timeoutHandle)&&(e.timeoutHandle=-1,yi(i)),Bs(e,!0,n),null!==(i=e.finishedWork)&&(Do()?e.finishedWork=i:xo(e,i,t)));eo=!1}function xo(e,t,n){var i=e.firstBatch;if(null!==i&&i._expirationTime<=n&&(null===ho?ho=[i]:ho.push(i),i._defer))return e.finishedWork=t,void(e.expirationTime=0);e.finishedWork=null,e===vo?To++:(vo=e,To=0),Ms=Ds=!0,e.current===t&&o("177");var r=e.pendingCommitExpirationTime;0===r&&o("261"),e.pendingCommitExpirationTime=0;var s=t.expirationTime,a=t.childExpirationTime,u=0===s||0!==a&&a<s?a:s;if(e.didError=!1,0===u)e.earliestPendingTime=0,e.latestPendingTime=0,e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0;else{var l=e.latestPendingTime;0!==l&&(l<u?e.earliestPendingTime=e.latestPendingTime=0:e.earliestPendingTime<u&&(e.earliestPendingTime=e.latestPendingTime));var c=e.earliestSuspendedTime;0===c?Yi(e,u):u>e.latestSuspendedTime?(e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0,Yi(e,u)):u<c&&Yi(e,u)}if(Qi(0,e),Is.current=null,1<t.effectTag)if(null!==t.lastEffect){t.lastEffect.nextEffect=t;var d=t.firstEffect}else d=t;else d=t.firstEffect;fi=Rn;var h=Mn();if(qn(h)){if("selectionStart"in h)var p={start:h.selectionStart,end:h.selectionEnd};else e:{var f=h.ownerDocument,m=f&&f.defaultView||window,g=m.getSelection&&m.getSelection();if(g&&0!==g.rangeCount){var T=g.anchorNode,v=g.anchorOffset,y=g.focusNode,E=g.focusOffset;try{T.nodeType,y.nodeType}catch(e){p=null;break e}var b=0,S=-1,_=-1,C=0,w=0,R=h,A=null;t:for(;;){for(var I;R!==T||0!==v&&3!==R.nodeType||(S=b+v),R!==y||0!==E&&3!==R.nodeType||(_=b+E),3===R.nodeType&&(b+=R.nodeValue.length),null!==(I=R.firstChild);)A=R,R=I;for(;;){if(R===h)break t;if(A===T&&++C===v&&(S=b),A===y&&++w===E&&(_=b),null!==(I=R.nextSibling))break;A=(R=A).parentNode}R=I}p=-1===S||-1===_?null:{start:S,end:_}}else p=null}var N=p||{start:0,end:0}}else N=null;for(mi={focusedElem:h,selectionRange:N},Rn=!1,Hs=d;null!==Hs;){var x=!1,D=void 0;try{for(;null!==Hs;){if(256&Hs.effectTag){var O=Hs.alternate;e:{var k=Hs;switch(k.tag){case 1:if(256&k.effectTag&&null!==O){var U=O.memoizedProps,P=O.memoizedState,$=k.stateNode;$.props=k.memoizedProps,$.state=k.memoizedState;var H=$.getSnapshotBeforeUpdate(U,P);$.__reactInternalSnapshotBeforeUpdate=H}break e;case 3:case 5:case 6:case 4:case 17:break e;default:o("163")}}}Hs=Hs.nextEffect}}catch(e){x=!0,D=e}x&&(null===Hs&&o("178"),Gs(Hs,D),null!==Hs&&(Hs=Hs.nextEffect))}for(Hs=d;null!==Hs;){var M=!1,q=void 0;try{for(;null!==Hs;){var L=Hs.effectTag;if(16&L&&si(Hs.stateNode,""),128&L){var F=Hs.alternate;if(null!==F){var j=F.ref;null!==j&&("function"==typeof j?j(null):j.current=null)}}switch(14&L){case 2:bs(Hs),Hs.effectTag&=-3;break;case 6:bs(Hs),Hs.effectTag&=-3,_s(Hs.alternate,Hs);break;case 4:_s(Hs.alternate,Hs);break;case 8:var B=Hs;Ss(B);var G=B;G.return=null,G.child=null,G.alternate&&(G.alternate.child=null,G.alternate.return=null)}Hs=Hs.nextEffect}}catch(e){M=!0,q=e}M&&(null===Hs&&o("178"),Gs(Hs,q),null!==Hs&&(Hs=Hs.nextEffect))}var W=mi,z=Mn(),V=W.focusedElem,K=W.selectionRange;if(z!==V&&V&&V.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(V.ownerDocument.documentElement,V)){if(null!==K&&qn(V)){var Y=K.start,Z=K.end;if(void 0===Z&&(Z=Y),"selectionStart"in V)V.selectionStart=Y,V.selectionEnd=Math.min(Z,V.value.length);else{var J=V.ownerDocument||document,Q=(J&&J.defaultView||window).getSelection(),X=V.textContent.length,ee=Math.min(K.start,X),te=void 0===K.end?ee:Math.min(K.end,X);if(!Q.extend&&ee>te){var ne=te;te=ee,ee=ne}var ie=Hn(V,ee),re=Hn(V,te);if(ie&&re&&(1!==Q.rangeCount||Q.anchorNode!==ie.node||Q.anchorOffset!==ie.offset||Q.focusNode!==re.node||Q.focusOffset!==re.offset)){var se=J.createRange();se.setStart(ie.node,ie.offset),Q.removeAllRanges(),ee>te?(Q.addRange(se),Q.extend(re.node,re.offset)):(se.setEnd(re.node,re.offset),Q.addRange(se))}}}for(var oe=[],ae=V;ae=ae.parentNode;)1===ae.nodeType&&oe.push({element:ae,left:ae.scrollLeft,top:ae.scrollTop});"function"==typeof V.focus&&V.focus();for(var ue=0;ue<oe.length;ue++){var le=oe[ue];le.element.scrollLeft=le.left,le.element.scrollTop=le.top}}for(mi=null,Rn=!!fi,fi=null,e.current=t,Hs=d;null!==Hs;){var ce=!1,de=void 0;try{for(;null!==Hs;){var he=Hs.effectTag;if(36&he){var pe=void 0,fe=Hs.alternate,me=Hs;switch(me.tag){case 1:var ge=me.stateNode;if(4&me.effectTag)if(null===fe)ge.props=me.memoizedProps,ge.state=me.memoizedState,ge.componentDidMount();else{var Te=fe.memoizedProps,ve=fe.memoizedState;ge.props=me.memoizedProps,ge.state=me.memoizedState,ge.componentDidUpdate(Te,ve,ge.__reactInternalSnapshotBeforeUpdate)}var ye=me.updateQueue;null!==ye&&(ge.props=me.memoizedProps,ge.state=me.memoizedState,lr(0,ye,ge));break;case 3:var Ee=me.updateQueue;if(null!==Ee){var be=null;if(null!==me.child)switch(me.child.tag){case 5:be=me.child.stateNode;break;case 1:be=me.child.stateNode}lr(0,Ee,be)}break;case 5:var Se=me.stateNode;null===fe&&4&me.effectTag&&gi(me.type,me.memoizedProps)&&Se.focus();break;case 6:case 4:case 12:break;case 13:if(32&me.effectTag){me.memoizedState={alreadyCaptured:!0,didTimeout:!1,timedOutAt:0},Ks(me,1);break}var _e=null!==fe?fe.memoizedState:null,Ce=me.memoizedState,we=null!==_e&&_e.didTimeout,Re=me;if(null===Ce?pe=!1:(pe=Ce.didTimeout)&&(Re=me.child,Ce.alreadyCaptured=!1,0===Ce.timedOutAt&&(Ce.timedOutAt=_o())),pe!==we&&null!==Re)e:for(var Ae=Re,Ie=pe,Ne=Ae;;){if(5===Ne.tag){var xe=Ne.stateNode;if(Ie)xe.style.display="none";else{var De=Ne.stateNode,Oe=Ne.memoizedProps.style,ke=void 0!==Oe&&null!==Oe&&Oe.hasOwnProperty("display")?Oe.display:null;De.style.display=ke}}else if(6===Ne.tag)Ne.stateNode.nodeValue=Ie?"":Ne.memoizedProps;else if(null!==Ne.child){Ne.child.return=Ne,Ne=Ne.child;continue}if(Ne===Ae)break e;for(;null===Ne.sibling;){if(null===Ne.return||Ne.return===Ae)break e;Ne=Ne.return}Ne.sibling.return=Ne.return,Ne=Ne.sibling}break;case 17:break;default:o("163")}}if(128&he){var Ue=Hs.ref;if(null!==Ue){var Pe=Hs.stateNode;switch(Hs.tag){case 5:var $e=Pe;break;default:$e=Pe}"function"==typeof Ue?Ue($e):Ue.current=$e}}var He=Hs.nextEffect;Hs.nextEffect=null,Hs=He}}catch(e){ce=!0,de=e}ce&&(null===Hs&&o("178"),Gs(Hs,de),null!==Hs&&(Hs=Hs.nextEffect))}Ds=Ms=!1,"function"==typeof Mi&&Mi(t.stateNode);var Me=t.expirationTime,qe=t.childExpirationTime,Le=0===Me||0!==qe&&qe<Me?qe:Me;0===Le&&(qs=null),e.expirationTime=Le,e.finishedWork=null}function Do(){return!!ro||!(null===ao||ao.timeRemaining()>yo)&&(ro=!0)}function Oo(e){null===to&&o("246"),to.expirationTime=0,so||(so=!0,oo=e)}function ko(e,t){var n=uo;uo=!0;try{return e(t)}finally{(uo=n)||eo||Ao(1,null)}}function Uo(e,t){if(uo&&!lo){lo=!0;try{return e(t)}finally{lo=!1}}return e(t)}function Po(e,t,n){if(co)return e(t,n);uo||eo||0===io||(Ao(io,null),io=0);var i=co,r=uo;uo=co=!0;try{return e(t,n)}finally{co=i,(uo=r)||eo||Ao(1,null)}}function $o(e,t,n,i,r){var s=t.current;e:if(n){n=n._reactInternalFiber;t:{2===rn(n)&&1===n.tag||o("170");var a=n;do{switch(a.tag){case 3:a=a.stateNode.context;break t;case 1:if(Di(a.type)){a=a.stateNode.__reactInternalMemoizedMergedChildContext;break t}}a=a.return}while(null!==a);o("171"),a=void 0}if(1===n.tag){var u=n.type;if(Di(u)){n=Pi(n,u,a);break e}}n=a}else n=Ri;return null===t.context?t.context=n:t.pendingContext=n,t=r,(r=nr(i)).payload={element:e},null!==(t=void 0===t?null:t)&&(r.callback=t),rr(s,r),Ks(s,i),i}function Ho(e,t,n,i){var r=t.current;return $o(e,t,n,r=Ws(_o(),r),i)}function Mo(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function qo(e){var t=2+25*(1+((_o()-2+500)/25|0));t<=Ns&&(t=Ns+1),this._expirationTime=Ns=t,this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function Lo(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function Fo(e,t,n){e={current:t=Fi(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,didError:!1,pendingCommitExpirationTime:0,finishedWork:null,timeoutHandle:-1,context:null,pendingContext:null,hydrate:n,nextExpirationTimeToWorkOn:0,expirationTime:0,firstBatch:null,nextScheduledRoot:null},this._internalRoot=t.stateNode=e}function jo(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Bo(e,t,n,i,r){jo(n)||o("200");var s=n._reactRootContainer;if(s){if("function"==typeof r){var a=r;r=function(){var e=Mo(s._internalRoot);a.call(e)}}null!=e?s.legacy_renderSubtreeIntoContainer(e,t,r):s.render(t,r)}else{if(s=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Fo(e,!1,t)}(n,i),"function"==typeof r){var u=r;r=function(){var e=Mo(s._internalRoot);u.call(e)}}Uo(function(){null!=e?s.legacy_renderSubtreeIntoContainer(e,t,r):s.render(t,r)})}return Mo(s._internalRoot)}function Go(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return jo(t)||o("200"),function(e,t,n){var i=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Ze,key:null==i?null:""+i,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Ie=function(e,t,n){switch(t){case"input":if(Ct(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var i=n[t];if(i!==e&&i.form===e.form){var r=L(i);r||o("90"),We(i),Ct(i,r)}}}break;case"textarea":Qn(e,n);break;case"select":null!=(t=n.value)&&Yn(e,!!n.multiple,t,!1)}},qo.prototype.render=function(e){this._defer||o("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,i=new Lo;return $o(e,t,null,n,i._onCommit),i},qo.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},qo.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||o("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var i=null,r=t;r!==this;)i=r,r=r._next;null===i&&o("251"),i._next=r._next,this._next=t,e.firstBatch=this}this._defer=!1,Io(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},qo.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},Lo.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Lo.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&o("191",n),n()}}},Fo.prototype.render=function(e,t){var n=this._internalRoot,i=new Lo;return null!==(t=void 0===t?null:t)&&i.then(t),Ho(e,n,null,i._onCommit),i},Fo.prototype.unmount=function(e){var t=this._internalRoot,n=new Lo;return null!==(e=void 0===e?null:e)&&n.then(e),Ho(null,t,null,n._onCommit),n},Fo.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var i=this._internalRoot,r=new Lo;return null!==(n=void 0===n?null:n)&&r.then(n),Ho(t,i,e,r._onCommit),r},Fo.prototype.createBatch=function(){var e=new qo(this),t=e._expirationTime,n=this._internalRoot,i=n.firstBatch;if(null===i)n.firstBatch=e,e._next=null;else{for(n=null;null!==i&&i._expirationTime<=t;)n=i,i=i._next;e._next=i,null!==n&&(n._next=e)}return e},Ue=ko,Pe=Po,$e=function(){eo||0===io||(Ao(io,null),io=0)};var Wo={createPortal:Go,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?o("188"):o("268",Object.keys(e))),e=null===(e=on(t))?null:e.stateNode},hydrate:function(e,t,n){return Bo(null,e,t,!0,n)},render:function(e,t,n){return Bo(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,i){return(null==e||void 0===e._reactInternalFiber)&&o("38"),Bo(e,t,n,!1,i)},unmountComponentAtNode:function(e){return jo(e)||o("40"),!!e._reactRootContainer&&(Uo(function(){Bo(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return Go.apply(void 0,arguments)},unstable_batchedUpdates:ko,unstable_interactiveUpdates:Po,flushSync:function(e,t){eo&&o("187");var n=uo;uo=!0;try{return Ys(e,t)}finally{uo=n,Ao(1,null)}},unstable_flushControlled:function(e){var t=uo;uo=!0;try{Ys(e)}finally{(uo=t)||eo||Ao(1,null)}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[M,q,L,D.injectEventPluginsByName,v,z,function(e){R(e,W)},Oe,ke,xn,k]},unstable_createRoot:function(e,t){return jo(e)||o("278"),new Fo(e,!0,null!=t&&!0===t.hydrate)}};!function(e){var t=e.findFiberByHostInstance;(function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Mi=Li(function(e){return t.onCommitFiberRoot(n,e)}),qi=Li(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}})(r({},e,{findHostInstanceByFiber:function(e){return null===(e=on(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}({findFiberByHostInstance:H,bundleType:0,version:"16.6.0",rendererPackageName:"react-dom"});var zo={default:Wo},Vo=zo&&Wo||zo;e.exports=Vo.default||Vo},function(e,t,n){"use strict";e.exports=n(7)},function(e,t,n){"use strict";
/** @license React v16.6.0
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var i=null,r=3,s=-1,o=-1,a=!1,u=!1,l="object"==typeof performance&&"function"==typeof performance.now,c={timeRemaining:l?function(){if(null!==i&&i.expirationTime<o)return 0;var e=y()-performance.now();return 0<e?e:0}:function(){if(null!==i&&i.expirationTime<o)return 0;var e=y()-Date.now();return 0<e?e:0},didTimeout:!1};function d(){if(!a){var e=i.expirationTime;u?v():u=!0,T(f,e)}}function h(){var e=i,t=i.next;if(i===t)i=null;else{var n=i.previous;i=n.next=t,t.previous=n}e.next=e.previous=null,n=e.callback,t=e.expirationTime,e=e.priorityLevel;var s=r,a=o;r=e,o=t;try{var u=n(c)}finally{r=s,o=a}if("function"==typeof u)if(u={callback:u,priorityLevel:e,expirationTime:t,next:null,previous:null},null===i)i=u.next=u.previous=u;else{n=null,e=i;do{if(e.expirationTime>=t){n=e;break}e=e.next}while(e!==i);null===n?n=i:n===i&&(i=u,d()),(t=n.previous).next=n.previous=u,u.next=n,u.previous=t}}function p(){if(-1===s&&null!==i&&1===i.priorityLevel){a=!0,c.didTimeout=!0;try{do{h()}while(null!==i&&1===i.priorityLevel)}finally{a=!1,null!==i?d():u=!1}}}function f(e){a=!0,c.didTimeout=e;try{if(e)for(;null!==i;){var n=t.unstable_now();if(!(i.expirationTime<=n))break;do{h()}while(null!==i&&i.expirationTime<=n)}else if(null!==i)do{h()}while(null!==i&&0<y()-t.unstable_now())}finally{a=!1,null!==i?d():u=!1,p()}}var m,g,T,v,y,E=Date,b="function"==typeof setTimeout?setTimeout:void 0,S="function"==typeof clearTimeout?clearTimeout:void 0,_="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,C="function"==typeof cancelAnimationFrame?cancelAnimationFrame:void 0;function w(e){m=_(function(t){S(g),e(t)}),g=b(function(){C(m),e(t.unstable_now())},100)}if(l){var R=performance;t.unstable_now=function(){return R.now()}}else t.unstable_now=function(){return E.now()};if("undefined"!=typeof window&&window._schedMock){var A=window._schedMock;T=A[0],v=A[1],y=A[2]}else if("undefined"==typeof window||"function"!=typeof window.addEventListener){var I=null,N=-1,x=function(e,t){if(null!==I){var n=I;I=null;try{N=t,n(e)}finally{N=-1}}};T=function(e,t){-1!==N?setTimeout(T,0,e,t):(I=e,setTimeout(x,t,!0,t),setTimeout(x,1073741823,!1,1073741823))},v=function(){I=null},y=function(){return 1/0},t.unstable_now=function(){return-1===N?0:N}}else{"undefined"!=typeof console&&("function"!=typeof _&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof C&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));var D=null,O=!1,k=-1,U=!1,P=!1,$=0,H=33,M=33;y=function(){return $};var q="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===q){O=!1,e=D;var n=k;D=null,k=-1;var i=t.unstable_now(),r=!1;if(0>=$-i){if(!(-1!==n&&n<=i))return U||(U=!0,w(L)),D=e,void(k=n);r=!0}if(null!==e){P=!0;try{e(r)}finally{P=!1}}}},!1);var L=function(e){if(null!==D){w(L);var t=e-$+M;t<M&&H<M?(8>t&&(t=8),M=t<H?H:t):H=t,$=e+M,O||(O=!0,window.postMessage(q,"*"))}else U=!1};T=function(e,t){D=e,k=t,P||0>t?window.postMessage(q,"*"):U||(U=!0,w(L))},v=function(){D=null,O=!1,k=-1}}t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=4,t.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:break;default:e=3}var i=r,o=s;r=e,s=t.unstable_now();try{return n()}finally{r=i,s=o,p()}},t.unstable_scheduleCallback=function(e,n){var o=-1!==s?s:t.unstable_now();if("object"==typeof n&&null!==n&&"number"==typeof n.timeout)n=o+n.timeout;else switch(r){case 1:n=o+-1;break;case 2:n=o+250;break;case 4:n=o+1073741823;break;default:n=o+5e3}if(e={callback:e,priorityLevel:r,expirationTime:n,next:null,previous:null},null===i)i=e.next=e.previous=e,d();else{o=null;var a=i;do{if(a.expirationTime>n){o=a;break}a=a.next}while(a!==i);null===o?o=i:o===i&&(i=e,d()),(n=o.previous).next=o.previous=e,e.next=o,e.previous=n}return e},t.unstable_cancelCallback=function(e){var t=e.next;if(null!==t){if(t===e)i=null;else{e===i&&(i=t);var n=e.previous;n.next=t,t.previous=n}e.next=e.previous=null}},t.unstable_wrapCallback=function(e){var n=r;return function(){var i=r,o=s;r=n,s=t.unstable_now();try{return e.apply(this,arguments)}finally{r=i,s=o,p()}}},t.unstable_getCurrentPriorityLevel=function(){return r}},function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){"use strict";n.r(t);var i=n(0),r=n.n(i),s=n(1),o=n.n(s);function a(e){if(isNaN(e))return e;var t=e.getHours(),n=e.getMinutes();return(t>9?t:"0"+t)+":"+(n>9?n:"0"+n)}function u(e){if(isNaN(e))return"---";var t=new Date;switch(Math.round(t/864e5-e/864e5)){case 2:var n="позавчера";break;case 1:n="вчера";break;case 0:n="сегодня";break;case-1:n="завтра";break;case-2:n="послезавтра";break;default:var i=e.getDate(),r=e.getMonth()+1;n=(i>9?i:"0"+i)+"-"+(r>9?r:"0"+r)+"-"+e.getFullYear()}return n+" "+a(e)}var l="STATE_OFF",c="STATE_GO_ON",d="STATE_READY",h="STATE_CALLING",p="STATE_PROGRESS",f="STATE_RINGING",m="STATE_GO_TALK",g="STATE_BUSY",T="STATE_GO_OFF";n(8);function v(e){return(v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function y(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function E(e){return(E=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function b(e,t){return(b=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function S(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var C=function(e){function t(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,r=new Array(i),s=0;s<i;s++)r[s]=arguments[s];return _(S(S(n=function(e,t){return!t||"object"!==v(t)&&"function"!=typeof t?S(e):t}(this,(e=E(t)).call.apply(e,[this].concat(r))))),"state",{outcalls:[],types:[],loading:!0,error:!1}),_(S(S(n)),"handleClickSelectClient",function(e){n.props.onClickClient(e)}),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&b(e,t)}(t,i["Component"]),function(e,t,n){t&&y(e.prototype,t),n&&y(e,n)}(t,[{key:"componentDidMount",value:function(){var e=this;this.state;$.get("callcenter/get-outcalls",{},function(t){console.log(t),e.state={outcalls:t.outcalls,types:t.types,loading:!1,error:!1};var n=!0,i=!1,r=void 0;try{for(var s,o=e.state.outcalls[Symbol.iterator]();!(n=(s=o.next()).done);n=!0){var a=s.value;e.addOutcallType(a)}}catch(e){i=!0,r=e}finally{try{n||null==o.return||o.return()}finally{if(i)throw r}}e.setState(e.state)},"json").fail(function(t){console.log(t),e.setState({outcalls:[],types:[],loading:!1,error:t.responseText})})}},{key:"addOutcallType",value:function(e){for(var t in this.state.types)if(e.type_id==this.state.types[t].id)return e.type_name=this.state.types[t].name,void(e.type_desc=this.state.types[t].desc)}},{key:"render",value:function(){var e=this,t=this.props,n=this.state;return r.a.createElement("div",{className:"cc-outcalls-outher"},r.a.createElement("table",{className:"table table-condensed outcalls"},r.a.createElement("tbody",null,n.outcalls.map(function(n,i){return r.a.createElement("tr",{key:i},r.a.createElement("td",{className:"o-date"},u(function(e){return"string"==typeof e?new Date(e.replace(/-/g,"/")):"---"}(n.created))),r.a.createElement("td",{className:"o-desc"},r.a.createElement("span",{className:"glyphicon glyphicon-question-sign"})),r.a.createElement("td",{className:"o-type"},n.type_name),r.a.createElement("td",{className:"o-name"},n.name),r.a.createElement("td",{className:"o-phone"},n.phone),r.a.createElement("td",{className:"o-desc"},r.a.createElement("button",{className:"btn btn-info btn-block btn-xs",onClick:t.onClickClient.bind(e,n.user_id)},r.a.createElement("span",{className:"glyphicon glyphicon-user"}))),r.a.createElement("td",{className:"o-attempt"},n.attempt,"1"),r.a.createElement("td",{className:"o-call-button"},r.a.createElement("button",{className:"btn btn-success btn-block btn-xs",onClick:t.onClickCall.bind(e,n.phone,n.user_id,n.id),disabled:t.state!=d},"Позвонить")))}))))}}]),t}();n(9);function w(e){return(w="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function R(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function A(e){return(A=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function I(e,t){return(I=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function N(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function x(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var D=function(e){function t(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,r=new Array(i),s=0;s<i;s++)r[s]=arguments[s];return x(N(N(n=function(e,t){return!t||"object"!==w(t)&&"function"!=typeof t?N(e):t}(this,(e=A(t)).call.apply(e,[this].concat(r))))),"componentDidMount",function(){if(n.props.options.client){var e,t=n.props.options.client;switch(e=t.name?t.name:"CallcenterClient",t.type){case"react":o.a.render(window[e],n.refs.container);break;case"function":window[e](N(N(n)),n.refs.container)}}}),x(N(N(n)),"clickArea",function(){}),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&I(e,t)}(t,i["Component"]),function(e,t,n){t&&R(e.prototype,t),n&&R(e,n)}(t,[{key:"render",value:function(){this.props,this.state;return r.a.createElement("div",{className:"cc-client-outher",ref:"container"},"Loading...")}}]),t}();n(10);function O(e){return(O="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function k(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function U(e,t){return!t||"object"!==O(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function P(e){return(P=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function H(e,t){return(H=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var M=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),U(this,P(t).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&H(e,t)}(t,i["Component"]),function(e,t,n){t&&k(e.prototype,t),n&&k(e,n)}(t,[{key:"render",value:function(){this.props,this.state;return r.a.createElement("div",{className:"cc-wiki-outher"},"Hello from Wiki!")}}]),t}();n(11);function q(e){return(q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function L(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function F(e){return(F=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function j(e,t){return(j=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function B(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function G(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var W=function(e){function t(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,s=new Array(i),o=0;o<i;o++)s[o]=arguments[o];return G(B(B(n=function(e,t){return!t||"object"!==q(t)&&"function"!=typeof t?B(e):t}(this,(e=F(t)).call.apply(e,[this].concat(s))))),"state",{ajaxNum:0,ajaxError:!1}),G(B(B(n)),"getButtonsBlock",function(e,t){var i=[];for(var s in e)e.hasOwnProperty(s)&&i.push({name:s,items:e[s]});var o=B(B(n));function a(e,t){return r.a.createElement("button",{key:t,className:"btn btn-default"+(e.width?" width-"+e.width:""),onClick:o.props.onClickCustom.bind(this,e.event)},e.name)}return r.a.createElement("div",{className:"p-o-block-wrapper p-o-custom"},i.map(function(e,t){return r.a.createElement("fieldset",{key:t},r.a.createElement("legend",null,e.name),e.items.map(a))}))}),G(B(B(n)),"componentDidMount",function(){var e=B(B(n));$(document).ajaxSend(function(t,n,i){e.state.ajaxNum++,e.setState(e.state)}).ajaxSuccess(function(t,n,i){e.state.ajaxNum>0&&e.state.ajaxNum--,e.state.ajaxError=!1,e.setState(e.state)}).ajaxError(function(t,n,i){e.state.ajaxNum>0&&e.state.ajaxNum--,e.state.ajaxError=!0,e.setState(e.state)})}),G(B(B(n)),"getDisplayValue",function(){var e=n.props.display+"",t="888888888888888",i=t.length,s=e.length,o=n.props.state,a=o==p||o==f||o==h||o==m;if(s>i)return r.a.createElement("span",{className:"n-d-full"},r.a.createElement("span",{className:"d-f-data"+(a?" blink":"")},e.substring(0,i)));var u=Math.floor((i-s)/2),l=i-u-s;return r.a.createElement("span",{className:"n-d-full"},t.substring(0,u),r.a.createElement("span",{className:"d-f-data"+(a?" blink":"")},e),t.substring(0,l))}),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&j(e,t)}(t,i["Component"]),function(e,t,n){t&&L(e.prototype,t),n&&L(e,n)}(t,[{key:"render",value:function(){var e,t=this.props,n=this.state,i=t.state,s=this.props.options,o="";if(t.options.logo){var a=t.options.logo;"object"==q(a)&&(e={backgroundColor:a.bgColor,padding:a.padding},o=r.a.createElement("img",{className:"yii2-callcenter-logo",src:a.url}))}var u,d,h,v=i==p||i==f||"STATE_TALKING"==i||i==m||"STATE_ENDING"==i||i==g;switch(console.log("Phone render ",v,i),i){case l:u=" red";break;case T:case c:u=" disabled";break;default:u=" green"}return n.ajaxError?(d="red",h="Последний запрос к серверу выполнен с ошибкой."):n.ajaxNum>0?(d="yellow",h="Запрос к серверу выполняется."):(d="#008000",h="Система работает нормально. Запросы к серверу выполняются без ошибок."),r.a.createElement("div",{className:"cc-phone-outher"},r.a.createElement("div",{className:"p-o-block-wrapper p-o-logo"},r.a.createElement("div",{className:"o-l-lines"},"0"),r.a.createElement("div",{className:"o-l-img",style:e},o),r.a.createElement("div",{className:"o-l-power"+u,onClick:t.onClickPower},r.a.createElement("span",{className:"glyphicon glyphicon-off"}))),r.a.createElement("div",{className:"p-o-block-wrapper p-o-number"},r.a.createElement("div",{className:"o-n-lights"},r.a.createElement("div",{className:"n-lighs-ws"}),r.a.createElement("div",{className:"n-lighs-sip"+(t.register?" green":"")}),r.a.createElement("div",{className:"n-lighs-query",title:h,style:{background:d}})),r.a.createElement("div",{className:"o-n-display"},this.getDisplayValue())),r.a.createElement("div",{className:"p-o-block-wrapper p-o-buttons"},r.a.createElement("button",{className:"btn btn-xl btn-danger",disabled:!v,onClick:t.onClickCancel},r.a.createElement("span",{className:"glyphicon glyphicon-phone-alt"})),r.a.createElement("button",{className:"btn btn-xl btn-success",disabled:!(i==f),onClick:t.onClickAnswer},r.a.createElement("span",{className:"glyphicon glyphicon-earphone"}))),r.a.createElement("div",{className:"p-o-block-wrapper p-o-transfer"},r.a.createElement("button",{className:"btn btn-default",onClick:t.onClickTransfer},r.a.createElement("span",{className:"glyphicon glyphicon-arrow-right"})),r.a.createElement("select",{className:"form-control"},r.a.createElement("option",null,"888888888"),r.a.createElement("option",null,"777777777")),r.a.createElement("button",{className:"btn btn-default",onClick:t.onClickHold},r.a.createElement("span",{className:"glyphicon gluphicon-mic"}))),this.getButtonsBlock(s.buttons))}}]),t}(),z=n(3),V=n.n(z);n(12);function K(e){return(K="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Y(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function Z(e){return(Z=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function J(e,t){return(J=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Q(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function X(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var ee=function(e){function t(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,r=new Array(i),s=0;s<i;s++)r[s]=arguments[s];return X(Q(Q(n=function(e,t){return!t||"object"!==K(t)&&"function"!=typeof t?Q(e):t}(this,(e=Z(t)).call.apply(e,[this].concat(r))))),"state",{soundPhone:document.getElementById("sound-phone"),session:!1,phoneState:l,display:""}),X(Q(Q(n)),"onClickPower",function(e){console.log("onClickPower",n.state);var t=Q(Q(n));n.state.phoneState==l?(n.state.phoneState=c,n.setState(n.state,function(){t.state.ua.register()})):n.state.phoneState==d&&(n.state.phoneState=T,n.setState(n.state,function(){t.state.ua.unregister()}))}),X(Q(Q(n)),"onClickCancel",function(e){console.log("clickCancel",Q(Q(n))),n.state.phoneState==g?(n.state.phoneState=d,n.state.display="",n.setState(n.state)):n.state.session&&(n.state.session.terminate(),n.state.session=!1,n.setState(n.state))}),X(Q(Q(n)),"onClickAnswer",function(){n.state.session&&n.state.phoneState==f&&(n.state.session.accept({sessionDescriptionHandlerOptions:{constraints:{audio:!0,video:!1}}}),n.state.phoneState=m,n.setState(n.state)),console.log("cliclAccept")}),X(Q(Q(n)),"onClickHold",function(){}),X(Q(Q(n)),"onClickTransfer",function(){}),X(Q(Q(n)),"onClickCustom",function(e){n.makeCall(e)}),X(Q(Q(n)),"onClickCall",function(e,t,i){n.selectClient(t),n.makeCall(e,i)}),X(Q(Q(n)),"onClickInfo",function(e){console.log("clickInfo",e)}),X(Q(Q(n)),"selectClient",function(e){"object"==K(n.props.options)&&"object"==K(n.props.options.client)&&n.props.options.client.select&&window[n.props.options.client.select](e)}),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&J(e,t)}(t,i["Component"]),function(e,t,n){t&&Y(e.prototype,t),n&&Y(e,n)}(t,[{key:"componentDidMount",value:function(){var e=this,t=this,n=this.props,i=this.state,r=n.options.sip;i.ua=new V.a.UA({uri:r.name+"@"+r.url,transportOptions:{wsServers:[r.ws],traceSip:!0,maxReconnectionAttempts:1e9},log:{level:"debug"},authorizationUser:r.name,password:r.password,hackIpInContact:!1,hackWssInTransport:!1,hackViaTcp:!1}),i.ua.on("invite",function(t){var n=e,i=e.state;i.phoneState==d&&(n.refs.soundPhoneRing.play(),i.session=t,i.phoneState=f,i.display=i.session.remoteIdentity.displayName,n.setState(i)),t.on("accepted",function(e){n.refs.soundPhoneRing.pause(),n.refs.soundPhoneRing.currentTime=0;var r=t.sessionDescriptionHandler.peerConnection,s=new MediaStream;r.getReceivers().forEach(function(e){var t=e.track;t&&s.addTrack(t)}),i.soundPhone.srcObject=s,i.phoneState="STATE_TALKING",n.setState(i),console.log("Incoming call accepted",t)}),t.on("failed",function(e){}),t.on("bye",function(e){}),t.on("terminated",function(e){console.log("incoming call terminated"+e),n.state.phoneState==T?n.state.phoneState=l:n.state.phoneState=g,n.refs.soundPhoneRing.pause(),n.refs.soundPhoneRing.currentTime=0,n.state.session=!1,n.setState(n.state)})}),i.ua.on("registered",function(){var n=e.state;n.phoneState!=c&&n.phoneState!=l||(n.phoneState=d,n.display=""),t.setState(n),console.log("Sip phone registered",n)}),i.ua.on("unregistered",function(n,i){var r=e.state;r.phoneState==T&&(r.phoneState=l),console.log("Sip phone ubregistered",i,r),t.setState(r)}),i.ua.on("registrationFailed",function(n,i){var r=e.state;console.log("Sip phone registration failed",i),r.phoneState==c&&(r.phoneState=l),t.setState(r)})}},{key:"makeCall",value:function(e,t){var n=this,i=this;if(i.state.phoneState==d){var r={sessionDescriptionHandlerOptions:{constraints:{audio:!0,video:!1}},extraHeaders:["X-user-domain: "+this.props.options.sip.url,"X-callid: "+t]};i.state.display=e,i.state.phoneState=h,i.setState(i.state),i.state.session=this.state.ua.invite(e+"@"+this.props.options.sip.url,r),i.state.session.on("progress",function(e){if(i.state.phoneState==h){i.state.phoneState=p;try{i.refs.soundPhoneRingback.play()}catch(e){console.log(e)}i.setState(i.state)}}),i.state.session.on("accepted",function(e,t){console.log("Outgoing  call accepted",e,t,n),i.refs.soundPhoneRingback.pause(),i.refs.soundPhoneRingback.currentTime=0;var r=i.state.session.sessionDescriptionHandler.peerConnection,s=new MediaStream;r.getReceivers().forEach(function(e){var t=e.track;t&&s.addTrack(t)}),i.state.soundPhone.srcObject=s;try{i.state.soundPhone.play()}catch(e){console.log(e)}i.state.phoneState="STATE_TALKING",i.setState(i.state)}),i.state.session.on("terminated",function(e){console.log("outgoing call terminated"+e),i.refs.soundPhoneRingback.pause(),i.refs.soundPhoneRingback.currentTime=0,i.state.phoneState==T?i.state.phoneState=l:i.state.phoneState=g,i.state.session=!1,i.setState(i.state)})}}},{key:"render",value:function(){var e=this.props,t=this.state,n=e.options;return r.a.createElement("div",{className:"cc-outher"},r.a.createElement("audio",{ref:"soundPhoneRingback",src:"/sound/phone_wait.mp3",loop:!0}),r.a.createElement("audio",{ref:"soundPhoneRing",src:"/sound/phone_ring.mp3",loop:!0}),r.a.createElement("audio",{ref:"soundPhoneBusy",src:"/sound/phone_busy.mp3"}),r.a.createElement("div",{className:"c-o-left"},r.a.createElement(C,{state:t.phoneState,onClickInfo:this.onClickInfo,onClickClient:this.selectClient,onClickCall:this.onClickCall}),r.a.createElement(D,{options:n}),r.a.createElement(M,null)),r.a.createElement("div",{className:"c-o-right"},r.a.createElement(W,{onClickPower:this.onClickPower,onClickAnswer:this.onClickAnswer,onClickCancel:this.onClickCancel,onClickTransfer:this.onClickTransfer,onClickHold:this.onClickHold,onClickCustom:this.onClickCustom,display:t.display,state:t.phoneState,options:n,register:t.ua&&t.ua.isRegistered()})))}}]),t}(),te=document.getElementById("yii2-callcenter-root"),ne=JSON.parse(te.dataset.options);o.a.render(r.a.createElement(ee,{options:ne}),te)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,